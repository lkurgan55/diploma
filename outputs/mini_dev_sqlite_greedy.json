[
  {
    "id": 0,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "What is the ratio of customers who pay in EUR against customers who pay in CZK?",
    "gold_sql": "select cast(sum(iif(currency = 'eur', 1, 0)) as float) / sum(iif(currency = 'czk', 1, 0)) as ratio from customers",
    "pred_sql": "select count(case when currency='eur' then 1 else null end) / count(*) as ratio from customers"
  },
  {
    "id": 1,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "In 2012, who had the least consumption in LAM?",
    "gold_sql": "select t1.customerid from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where t1.segment = 'lam' and substr(t2.date, 1, 4) = '2012' group by t1.customerid order by sum(t2.consumption) asc limit 1",
    "pred_sql": "select c.customerid, y.date, y.consumption from yearmonth y join customers c on y.customerid = c.customerid where y.date between '2012-01-01' and '2012-12-31' and c.segment = 'lam' order by y.consumption limit 1"
  },
  {
    "id": 2,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "What was the average monthly consumption of customers in SME for the year 2013?",
    "gold_sql": "select avg(t2.consumption) / 12 from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where substr(t2.date, 1, 4) = '2013' and t1.segment = 'sme'",
    "pred_sql": "select avg(consumption) from yearmonth where customerid in (select customerid from customers where segment = 'sme') and date like '2013%'"
  },
  {
    "id": 3,
    "db_id": "debit_card_specializing",
    "difficulty": "challenging",
    "question": "What was the difference in gas consumption between CZK-paying customers and EUR-paying customers in 2012?",
    "gold_sql": "select sum(iif(t1.currency = 'czk', t2.consumption, 0)) - sum(iif(t1.currency = 'eur', t2.consumption, 0)) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where substr(t2.date, 1, 4) = '2012'",
    "pred_sql": "with czk_customers as (select * from yearmonth where customerid in (select customerid from customers where currency = 'czk')), eur_customers as (select * from yearmonth where customerid in (select customerid from customers where currency = 'eur')) select sum(czk_customers.consumption) - sum(eur_customers.consumption) from czk_customers join eur_customers on czk_customers.date = eur_customers.date where"
  },
  {
    "id": 4,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "Which year recorded the most consumption of gas paid in CZK?",
    "gold_sql": "select substr(t2.date, 1, 4) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where t1.currency = 'czk' group by substr(t2.date, 1, 4) order by sum(t2.consumption) desc limit 1",
    "pred_sql": "with consumption as ( select year(date) as year, sum(consumption) as total_consumption from yearmonth group by year ) select year from consumption order by total_consumption desc limit 1"
  },
  {
    "id": 5,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "What was the gas consumption peak month for SME customers in 2013?",
    "gold_sql": "select substr(t2.date, 5, 2) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where substr(t2.date, 1, 4) = '2013' and t1.segment = 'sme' group by substr(t2.date, 5, 2) order by sum(t2.consumption) desc limit 1",
    "pred_sql": "with peak as ( select date, consumption, customerid from yearmonth where customerid in (select customerid from customers where segment = 'sme') and date like '2013%' order by consumption desc ) select date, consumption from peak where rowid = 1"
  },
  {
    "id": 6,
    "db_id": "debit_card_specializing",
    "difficulty": "challenging",
    "question": "What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME?",
    "gold_sql": "select cast(sum(iif(t1.segment = 'sme', t2.consumption, 0)) as real) / count(t1.customerid) - cast(sum(iif(t1.segment = 'lam', t2.consumption, 0)) as real) / count(t1.customerid) , cast(sum(iif(t1.segment = 'lam', t2.consumption, 0)) as real) / count(t1.customerid) - cast(sum(iif(t1.segment = 'kam', t2.consumption, 0)) as real) / count(t1.customerid) , cast(sum(iif(t1.segment = 'kam', t2.consumption, 0)) as real) / count(t1.customerid) - cast(sum(iif(t1.segment = 'sme', t2.consumption, 0)) as real) / count(t1.customerid) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where t1.currency = 'czk' and t2.consumption = ( select min(consumption) from yearmonth ) and t2.date between 201301 and 201312",
    "pred_sql": "with cte as ( select customerid, sum(consumption) as totalconsumption, 'sme' as segment from yearmonth where date like '2013%' and (select segment from customers where customerid = yearmonth.customerid) = 'sme' group by customerid union all select customerid, sum(consumption) as total"
  },
  {
    "id": 7,
    "db_id": "debit_card_specializing",
    "difficulty": "challenging",
    "question": "Which of the three segments—SME, LAM and KAM—has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013?",
    "gold_sql": "select cast((sum(iif(t1.segment = 'sme' and t2.date like '2013%', t2.consumption, 0)) - sum(iif(t1.segment = 'sme' and t2.date like '2012%', t2.consumption, 0))) as float) * 100 / sum(iif(t1.segment = 'sme' and t2.date like '2012%', t2.consumption, 0)), cast(sum(iif(t1.segment = 'lam' and t2.date like '2013%', t2.consumption, 0)) - sum(iif(t1.segment = 'lam' and t2.date like '2012%', t2.consumption, 0)) as float) * 100 / sum(iif(t1.segment = 'lam' and t2.date like '2012%', t2.consumption, 0)) , cast(sum(iif(t1.segment = 'kam' and t2.date like '2013%', t2.consumption, 0)) - sum(iif(t1.segment = 'kam' and t2.date like '2012%', t2.consumption, 0)) as float) * 100 / sum(iif(t1.segment = 'kam' and t2.date like '2012%', t2.consumption, 0)) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid",
    "pred_sql": "with segment_consumption as ( select s.segment, ym.customerid, ym.date, ym.consumption, lag(ym.consumption) over (partition by ym.customerid, ym.segment order by ym.date) as prev_consumption, (ym.consumption - lag(ym.consumption) over (partition by ym.customerid, ym.segment"
  },
  {
    "id": 8,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "How much did customer 6 consume in total between August and November 2013?",
    "gold_sql": "select sum(consumption) from yearmonth where customerid = 6 and date between '201308' and '201311'",
    "pred_sql": "select sum(consumption) from yearmonth where customerid = 6 and date between '2013-08-01' and '2013-11-30'"
  },
  {
    "id": 9,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "How many more \"discount\" gas stations does the Czech Republic have compared to Slovakia?",
    "gold_sql": "select sum(iif(country = 'cze', 1, 0)) - sum(iif(country = 'svk', 1, 0)) from gasstations where segment = 'discount'",
    "pred_sql": "select count(*) - (select count(*) from gasstations where country='slovakia') from gasstations where country='cze'"
  },
  {
    "id": 10,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "Is it true that more SMEs pay in Czech koruna than in euros? If so, how many more?",
    "gold_sql": "select sum(currency = 'czk') - sum(currency = 'eur') from customers where segment = 'sme'",
    "pred_sql": "select count(*) from yearmonth where customerid in (select customerid from customers where segment = 'sme' and currency = 'czk') - count(*) from yearmonth where customerid in (select customerid from customers where segment = 'sme' and currency = 'eur')"
  },
  {
    "id": 11,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "How many percent of LAM customer consumed more than 46.73?",
    "gold_sql": "select cast(sum(iif(t2.consumption > 46.73, 1, 0)) as float) * 100 / count(t1.customerid) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where t1.segment = 'lam'",
    "pred_sql": "select 100.0 * count(*) / (select count(*) from yearmonth where customerid in (select customerid from customers where segment = 'lam') and consumption > 46.73) as percentage"
  },
  {
    "id": 12,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "In February 2012, what percentage of customers consumed more than 528.3?",
    "gold_sql": "select cast(sum(iif(consumption > 528.3, 1, 0)) as float) * 100 / count(customerid) from yearmonth where date = '201202'",
    "pred_sql": "select 100.0 * count(*) / (select count(*) from yearmonth where customerid in (select customerid from customers) and strftime('%y-%m', date) = '2012-02') as percentage from yearmonth where customerid in (select customerid from customers) and strftime('%y-%m', date) = '2012-02' and consumption > 528.3"
  },
  {
    "id": 13,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "What is the highest monthly consumption in the year 2012?",
    "gold_sql": "select sum(consumption) from yearmonth where substr(date, 1, 4) = '2012' group by substr(date, 5, 2) order by sum(consumption) desc limit 1",
    "pred_sql": "select max(consumption) from yearmonth where date like '2012-%'"
  },
  {
    "id": 14,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "Please list the product description of the products consumed in September, 2013.",
    "gold_sql": "select t3.description from transactions_1k as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid inner join products as t3 on t1.productid = t3.productid where t2.date = '201309'",
    "pred_sql": "select p.description from products p join transactions_1k t on p.productid = t.productid where strftime('%y-%m', t.date) = '2013-09' and t.amount > 0"
  },
  {
    "id": 15,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "Please list the countries of the gas stations with transactions taken place in June, 2013.",
    "gold_sql": "select distinct t2.country from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid inner join yearmonth as t3 on t1.customerid = t3.customerid where t3.date = '201306'",
    "pred_sql": "select country from gasstations where gasstationid in (select gasstationid from transactions_1k where strftime('%y-%m', date) = '2013-06' group by gasstationid)"
  },
  {
    "id": 16,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "Among the customers who paid in euro, how many of them have a monthly consumption of over 1000?",
    "gold_sql": "select count(*) from yearmonth as t1 inner join customers as t2 on t1.customerid = t2.customerid where t2.currency = 'eur' and t1.consumption > 1000.00",
    "pred_sql": "select count(*) from yearmonth y join customers c on y.customerid = c.customerid where c.currency = 'eur' and y.consumption > 1000"
  },
  {
    "id": 17,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "Please list the product descriptions of the transactions taken place in the gas stations in the Czech Republic.",
    "gold_sql": "select distinct t3.description from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid inner join products as t3 on t1.productid = t3.productid where t2.country = 'cze'",
    "pred_sql": "select p.description from transactions_1k t join gasstations g on t.gasstationid = g.gasstationid where g.country = 'cze' join products p on t.productid = p.productid"
  },
  {
    "id": 18,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "Please list the disparate time of the transactions taken place in the gas stations from chain no. 11.",
    "gold_sql": "select distinct t1.time from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t2.chainid = 11",
    "pred_sql": "select time from transactions_1k where gasstationid in (select gasstationid from gasstations where chainid = 11) order by time"
  },
  {
    "id": 19,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "Among the transactions made in the gas stations in the Czech Republic, how many of them are taken place after 2012/1/1?",
    "gold_sql": "select count(t1.transactionid) from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t2.country = 'cze' and strftime('%y', t1.date) >= '2012'",
    "pred_sql": "select count(*) from transactions_1k where gasstationid in (select gasstationid from gasstations where country='cze') and date > '2012-01-01'"
  },
  {
    "id": 20,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "What kind of currency did the customer paid at 16:25:00 in 2012/8/24?",
    "gold_sql": "select distinct t3.currency from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid inner join customers as t3 on t1.customerid = t3.customerid where t1.date = '2012-08-24' and t1.time = '16:25:00'",
    "pred_sql": "select currency from customers where customerid in (select customerid from transactions_1k where date='2012-08-24' and time='16:25:00')"
  },
  {
    "id": 21,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "What segment did the customer have at 2012/8/23 21:20:00?",
    "gold_sql": "select t2.segment from transactions_1k as t1 inner join customers as t2 on t1.customerid = t2.customerid where t1.date = '2012-08-23' and t1.time = '21:20:00'",
    "pred_sql": "select segment from customers where customerid in (select customerid from transactions_1k where date = '2012-08-23' and time = '21:20:00')"
  },
  {
    "id": 22,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "For all the transactions happened during 8:00-9:00 in 2012/8/26, how many happened in CZE?",
    "gold_sql": "select count(t1.transactionid) from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t1.date = '2012-08-26' and t1.time between '08:00:00' and '09:00:00' and t2.country = 'cze'",
    "pred_sql": "select count(*) from transactions_1k where strftime('%y-%m-%d %h:%m:%s', date||' '||time) between '2012-08-26 08:00:00' and '2012-08-26 09:00:00' and gasstationid in (select gasstationid from gasstations where country='cze')"
  },
  {
    "id": 23,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "What's the nationality of the customer who spent 548.4 in 2012/8/24?",
    "gold_sql": "select t2.country from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t1.date = '2012-08-24' and t1.price = 548.4",
    "pred_sql": "select c.country from customers c join yearmonth y on c.customerid = y.customerid where y.date = '2012-08-24' and y.consumption = 548.4"
  },
  {
    "id": 24,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "What is the percentage of the customers who used EUR in 2012/8/25?",
    "gold_sql": "select cast(sum(iif(t2.currency = 'eur', 1, 0)) as float) * 100 / count(t1.customerid) from transactions_1k as t1 inner join customers as t2 on t1.customerid = t2.customerid where t1.date = '2012-08-25'",
    "pred_sql": "select 100.0 * count(*) / (select count(*) from customers where currency='eur') as percentage from \"transactions_1k\" where strftime('%y-%m-%d', date)='2012-08-25' and customerid in (select customerid from customers where currency='eur')"
  },
  {
    "id": 25,
    "db_id": "debit_card_specializing",
    "difficulty": "challenging",
    "question": "For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013?",
    "gold_sql": "select cast(sum(iif(substring(date, 1, 4) = '2012', consumption, 0)) - sum(iif(substring(date, 1, 4) = '2013', consumption, 0)) as float) / sum(iif(substring(date, 1, 4) = '2012', consumption, 0)) from yearmonth where customerid = ( select t1.customerid from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t1.date = '2012-08-25' and t1.price = 1513.12 )",
    "pred_sql": "with cte as (select ym.customerid, ym.date, ym.consumption, lag(ym.consumption) over (partition by ym.customerid order by ym.date) as prev_consumption from yearmonth ym where ym.date like '2012%' and ym.customerid in (select t.customerid from transactions_1k t where t.date = '2012-08-25' and t.amount = 634.8))"
  },
  {
    "id": 26,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "What is the percentage of \"premium\" against the overall segment in Country = \"SVK\"?",
    "gold_sql": "select cast(sum(iif(country = 'svk' and segment = 'premium', 1, 0)) as float) * 100 / sum(iif(country = 'svk', 1, 0)) from gasstations",
    "pred_sql": "select (select count(*) from gasstations where country = 'cze' and segment = 'premium') / (select count(*) from gasstations where country = 'cze') * 100"
  },
  {
    "id": 27,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "What is the amount spent by customer \"38508\" at the gas stations? How much had the customer spent in January 2012?",
    "gold_sql": "select sum(t1.price ) , sum(iif(t3.date = '201201', t1.price, 0)) from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid inner join yearmonth as t3 on t1.customerid = t3.customerid where t1.customerid = '38508'",
    "pred_sql": "select sum(amount) from transactions_1k where customerid = 38508"
  },
  {
    "id": 28,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used?",
    "gold_sql": "select t2.customerid, sum(t2.price / t2.amount), t1.currency from customers as t1 inner join transactions_1k as t2 on t1.customerid = t2.customerid where t2.customerid = ( select customerid from yearmonth order by consumption desc limit 1 ) group by t2.customerid, t1.currency",
    "pred_sql": "with top_customer as ( select c.customerid, sum(t.amount) as total_spent from transactions_1k t join customers c on t.customerid = c.customerid group by c.customerid order by total_spent desc limit 1 ) select c.currency, avg(t.price) as avg_price from top_customer tc join transactions_1k t on tc.customerid = t.customerid join customers c on t.customer"
  },
  {
    "id": 29,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "For all the people who paid more than 29.00 per unit of product id No.5. Give their consumption status in the August of 2012.",
    "gold_sql": "select t2.consumption from transactions_1k as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where t1.price / t1.amount > 29.00 and t1.productid = 5 and t2.date = '201208'",
    "pred_sql": "with consumption as select ym.customerid, ym.date, ym.consumption from yearmonth ym where ym.customerid in (select t.customerid from transactions_1k t where t.productid = 5 and t.price > 29.00) and ym.date like '2012-08-%' select * from consumption"
  },
  {
    "id": 30,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "What's Angela Sanders's major?",
    "gold_sql": "select t2.major_name from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t1.first_name = 'angela' and t1.last_name = 'sanders'",
    "pred_sql": "select m.major_name from member m join major ma on m.link_to_major = ma.major_id where m.member_id ='rec1x5zbfiqooupw8'"
  },
  {
    "id": 31,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Among the students from the Student_Club who attended the event \"Women's Soccer\", how many of them want a T-shirt that's in medium size?",
    "gold_sql": "select count(t1.event_id) from event as t1 inner join attendance as t2 on t1.event_id = t2.link_to_event inner join member as t3 on t2.link_to_member = t3.member_id where t1.event_name = 'women''s soccer' and t3.t_shirt_size = 'medium'",
    "pred_sql": "select count(*) from attendance join member on attendance.link_to_member = member.member_id join event on attendance.link_to_event = event.event_id where event.event_name = 'women''s soccer' and member.t_shirt_size = 'medium'"
  },
  {
    "id": 32,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Among the events attended by more than 10 members of the Student_Club, how many of them are meetings?",
    "gold_sql": "select t1.event_name from event as t1 inner join attendance as t2 on t1.event_id = t2.link_to_event group by t1.event_id having count(t2.link_to_event) > 10 except select t1.event_name from event as t1 where t1.type = 'meeting'",
    "pred_sql": "with attendance_counts as ( select link_to_event, count(*) as attendance_count from attendance group by link_to_event having count(*) > 10 ) select count(*) from attendance_counts join event on attendance_counts.link_to_event = event.event_id where event.type = 'meeting'"
  },
  {
    "id": 33,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "List all the names of events that had an attendance of over 20 students but were not fundraisers.",
    "gold_sql": "select t1.event_name from event as t1 inner join attendance as t2 on t1.event_id = t2.link_to_event group by t1.event_id having count(t2.link_to_event) > 20 except select t1.event_name from event as t1 where t1.type = 'fundraiser'",
    "pred_sql": "select distinct e.event_name from event e join attendance a on e.event_id = a.link_to_event where a.link_to_event in (select link_to_event from attendance group by link_to_event having count(*) > 20) and e.type!= 'fundraiser'"
  },
  {
    "id": 34,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "What is the amount of the funds that the Vice President received?",
    "gold_sql": "select t2.amount from member as t1 inner join income as t2 on t1.member_id = t2.link_to_member where t1.position = 'vice president'",
    "pred_sql": "select sum(amount) from income where link_to_member in (select member_id from member where position = 'vice president')"
  },
  {
    "id": 35,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "List the full name of the Student_Club members that grew up in Illinois state.",
    "gold_sql": "select t1.first_name, t1.last_name from member as t1 inner join zip_code as t2 on t1.zip = t2.zip_code where t2.state = 'illinois'",
    "pred_sql": "select m.first_name ||'' || m.last_name as full_name from member m join zip_code z on m.zip = z.zip_code where z.state = 'illinois'"
  },
  {
    "id": 36,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Was each expense in October Meeting on October 8, 2019 approved?",
    "gold_sql": "select t3.approved from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event inner join expense as t3 on t2.budget_id = t3.link_to_budget where t1.event_name = 'october meeting' and t1.event_date like '2019-10-08%'",
    "pred_sql": "select * from expense where expense_date = '2019-10-08' and expense_description like '%october meeting%' and approved = 'true'"
  },
  {
    "id": 37,
    "db_id": "student_club",
    "difficulty": "challenging",
    "question": "Calculate the total average cost that Elijah Allen spent in the events on September and October.",
    "gold_sql": "select avg(t2.cost) from member as t1 inner join expense as t2 on t1.member_id = t2.link_to_member where t1.last_name = 'allen' and t1.first_name = 'elijah' and (substr(t2.expense_date, 6, 2) = '09' or substr(t2.expense_date, 6, 2) = '10')",
    "pred_sql": "select avg(cost) from expense where link_to_member ='recd078pns3x2dobe' and extract(month from expense_date) in (9, 10)"
  },
  {
    "id": 38,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Calculate the difference of the total amount spent in all events by the Student_Club in year 2019 and 2020.",
    "gold_sql": "select sum(case when substr(t1.event_date, 1, 4) = '2019' then t2.spent else 0 end) - sum(case when substr(t1.event_date, 1, 4) = '2020' then t2.spent else 0 end) as num from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event",
    "pred_sql": "with total_spent_2019 as ( select sum(spent) as total_spent_2019 from budget where extract(year from event_date) = 2019 and event_status = 'closed' ), total_spent_2020 as ( select sum(spent) as total_spent_2020 from budget where extract(year from event_date) = 2020 and event_status = 'closed'"
  },
  {
    "id": 39,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "What was the notes of the fundraising on 2019/9/14?",
    "gold_sql": "select notes from income where source = 'fundraising' and date_received = '2019-09-14'",
    "pred_sql": "select notes from event where event_date = '2019-09-14' and type = 'fundraising'"
  },
  {
    "id": 40,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "Tell the phone number of \"Carlo Jacobs\".",
    "gold_sql": "select phone from member where first_name = 'carlo' and last_name = 'jacobs'",
    "pred_sql": "select phone from member where first_name = 'carlo' and last_name = 'jacobs'"
  },
  {
    "id": 41,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "What is the status of the event which bought \"Post Cards, Posters\" on 2019/8/20?",
    "gold_sql": "select t1.event_status from budget as t1 inner join expense as t2 on t1.budget_id = t2.link_to_budget where t2.expense_description = 'post cards, posters' and t2.expense_date = '2019-08-20'",
    "pred_sql": "select e.status from event e join expense e1 on e.event_id = e1.link_to_event where e1.expense_description = 'post cards, posters' and e1.expense_date = '2019-08-20'"
  },
  {
    "id": 42,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "What was Brent Thomason's major?",
    "gold_sql": "select t2.major_name from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t1.first_name = 'brent' and t1.last_name = 'thomason'",
    "pred_sql": "select m.major_name from member m join major ma on m.link_to_major = ma.major_id where m.member_id ='rec28orzgcm1dtqbz'"
  },
  {
    "id": 43,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "For all the club members from \"Business\" major, how many of them wear medium size t-shirt?",
    "gold_sql": "select count(t1.member_id) from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t2.major_name = 'business' and t1.t_shirt_size = 'medium'",
    "pred_sql": "select count(*) from member where link_to_major ='rec06df6vz1cypkpc' and t_shirt_size = 'medium'"
  },
  {
    "id": 44,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "Which department was the President of the club in?",
    "gold_sql": "select t2.department from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t1.position = 'president'",
    "pred_sql": "select m.department from member m join attendance a on m.member_id = a.link_to_member join event e on a.link_to_event = e.event_id where e.event_name = 'officers meeting - january'"
  },
  {
    "id": 45,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "State the date Connor Hilton paid his/her dues.",
    "gold_sql": "select t2.date_received from member as t1 inner join income as t2 on t1.member_id = t2.link_to_member where t1.first_name = 'connor' and t1.last_name = 'hilton' and t2.source = 'dues'",
    "pred_sql": "select date_received from income where link_to_member ='rec28orzgcm1dtqbz' and source = 'dues'"
  },
  {
    "id": 46,
    "db_id": "student_club",
    "difficulty": "challenging",
    "question": "How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"?",
    "gold_sql": "select cast(sum(case when t2.event_name = 'yearly kickoff' then t1.amount else 0 end) as real) / sum(case when t2.event_name = 'october meeting' then t1.amount else 0 end) from budget as t1 inner join event as t2 on t1.link_to_event = t2.event_id where t1.category = 'advertisement' and t2.type = 'meeting'",
    "pred_sql": "with budgeted_events as ( select link_to_event, category, sum(amount) as total_amount from budget group by link_to_event, category ) select count(*) from budgeted_events where category = 'advertisement' and link_to_event in ( select link_to_event from event where event_name like '%yearly kickoff%' ) and total_amount > ( select sum(amount) from budgeted_events"
  },
  {
    "id": 47,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "What is the total cost of the pizzas for all the events?",
    "gold_sql": "select sum(cost) from expense where expense_description = 'pizza'",
    "pred_sql": "select sum(cost) from expense where expense_description like '%pizza%' and link_to_budget in (select link_to_event from budget where category = 'food' and event_status = 'closed')"
  },
  {
    "id": 48,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "How many cities are there in Orange County, Virginia?",
    "gold_sql": "select count(city) from zip_code where county = 'orange county' and state = 'virginia'",
    "pred_sql": "select city from zip_code where county = 'orange county' and state = 'virginia'"
  },
  {
    "id": 49,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "What does the person with the phone number \"809-555-3360\" major in?",
    "gold_sql": "select t2.major_name from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t1.phone = '809-555-3360'",
    "pred_sql": "select m.major_name from member m join major ma on m.link_to_major = ma.major_id where m.phone = '809-555-3360'"
  },
  {
    "id": 50,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "How many members attended the \"Women's Soccer\" event?",
    "gold_sql": "select count(t2.link_to_member) from event as t1 inner join attendance as t2 on t1.event_id = t2.link_to_event where t1.event_name = 'women''s soccer'",
    "pred_sql": "select count(*) from attendance where link_to_event in (select event_id from event where event_name = 'women''s soccer')"
  },
  {
    "id": 51,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "List all the members of the \"School of Applied Sciences, Technology and Education\" department.",
    "gold_sql": "select t1.first_name, t1.last_name from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t2.department = 'school of applied sciences, technology and education'",
    "pred_sql": "select * from member where link_to_major in (select major_id from major where department = 'school of applied sciences, technology and education')"
  },
  {
    "id": 52,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Among all the closed events, which event has the highest spend-to-budget ratio?",
    "gold_sql": "select t2.event_name from budget as t1 inner join event as t2 on t1.link_to_event = t2.event_id where t2.status = 'closed' order by t1.spent / t1.amount desc limit 1",
    "pred_sql": "with closed_events as ( select link_to_event, sum(spent) as total_spent, sum(amount) as total_budget from budget where event_status = 'closed' group by link_to_event ) select link_to_event from closed_events order by total_spent / total_budget desc limit 1"
  },
  {
    "id": 53,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "What is the highest amount of budget spend for an event?",
    "gold_sql": "select max(spent) from budget",
    "pred_sql": "select max(spent) from budget"
  },
  {
    "id": 54,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "What is the total amount of money spent for food?",
    "gold_sql": "select sum(spent) from budget where category = 'food'",
    "pred_sql": "select sum(cost) from expense where expense_description like '%food%' and approved = 'true'"
  },
  {
    "id": 55,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "List the name of students that have attended more than 7 events.",
    "gold_sql": "select t1.first_name, t1.last_name from member as t1 inner join attendance as t2 on t1.member_id = t2.link_to_member group by t2.link_to_member having count(t2.link_to_event) > 7",
    "pred_sql": "with attendance_counts as ( select link_to_member, count(*) as attendance_count from attendance group by link_to_member ) select m.first_name, m.last_name from member m join attendance_counts ac on m.member_id = ac.link_to_member where ac.attendance_count > 7"
  },
  {
    "id": 56,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Which student has been entrusted to manage the budget for the Yearly Kickoff?",
    "gold_sql": "select t4.first_name, t4.last_name from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event inner join expense as t3 on t2.budget_id = t3.link_to_budget inner join member as t4 on t3.link_to_member = t4.member_id where t1.event_name = 'yearly kickoff'",
    "pred_sql": "select m.first_name, m.last_name from member m join attendance a on m.member_id = a.link_to_member join event e on a.link_to_event = e.event_id where e.event_name = 'yearly kickoff' and e.type = 'meeting' and e.status = 'open'"
  },
  {
    "id": 57,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "Which event has the lowest cost?",
    "gold_sql": "select t1.event_name from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event inner join expense as t3 on t2.budget_id = t3.link_to_budget order by t3.cost limit 1",
    "pred_sql": "select e.event_name, e.event_date, e.type, e.notes, e.location, e.status, e.event_id from event e where e.event_id in (select link_to_event from expense order by cost limit 1)"
  },
  {
    "id": 58,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Based on the total cost for all event, what is the percentage of cost for Yearly Kickoff event?",
    "gold_sql": "select cast(sum(case when t1.event_name = 'yearly kickoff' then t3.cost else 0 end) as real) * 100 / sum(t3.cost) from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event inner join expense as t3 on t2.budget_id = t3.link_to_budget",
    "pred_sql": "with total_cost as ( select sum(cost) as total_cost from expense where expense_description like '%yearly kickoff%' ) select (select sum(cost) from expense where expense_description like '%yearly kickoff%') / (select total_cost from total_cost) * 100 as percentage"
  },
  {
    "id": 59,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "Indicate the top source of funds received in September 2019 based on their amount.",
    "gold_sql": "select source from income where date_received between '2019-09-01' and '2019-09-30' order by source desc limit 1",
    "pred_sql": "with income as ( select source, sum(amount) as total_income from income where date_received like '2019-09-%' group by source ) select source from income order by total_income desc limit 1"
  },
  {
    "id": 60,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "How many members of the Student_Club have major in 'Physics Teaching'?",
    "gold_sql": "select count(t2.member_id) from major as t1 inner join member as t2 on t1.major_id = t2.link_to_major where t1.major_name = 'physics teaching'",
    "pred_sql": "select count(*) from member where link_to_major in (select major_id from major where major_name = 'physics teaching')"
  },
  {
    "id": 61,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Name the event with the highest amount spent on advertisement.",
    "gold_sql": "select t2.event_name from budget as t1 inner join event as t2 on t1.link_to_event = t2.event_id where t1.category = 'advertisement' order by t1.spent desc limit 1",
    "pred_sql": "with event_budget as ( select e.event_id, e.event_name, sum(b.spent) as total_spent from event e join budget b on e.event_id = b.link_to_event where b.category = 'advertisement' group by e.event_id, e.event_name ) select event_name from event_budget order by total_spent desc limit 1"
  },
  {
    "id": 62,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Did Maya Mclean attend the 'Women's Soccer' event?",
    "gold_sql": "select case when t3.event_name = 'women''s soccer' then 'yes' end as result from member as t1 inner join attendance as t2 on t1.member_id = t2.link_to_member inner join event as t3 on t2.link_to_event = t3.event_id where t1.first_name = 'maya' and t1.last_name = 'mclean'",
    "pred_sql": "select * from attendance where link_to_event in (select event_id from event where event_name = 'women''s soccer') and link_to_member in (select member_id from member where first_name = 'maya' and last_name = 'mclean')"
  },
  {
    "id": 63,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Indicate the cost of posters for 'September Speaker' event.",
    "gold_sql": "select t3.cost from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event inner join expense as t3 on t2.budget_id = t3.link_to_budget where t1.event_name = 'september speaker' and t3.expense_description = 'posters'",
    "pred_sql": "select cost from expense where expense_description like '%posters%' and link_to_event in (select event_id from event where event_name like '%september speaker%')"
  },
  {
    "id": 64,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Indicate the name of the closed event whose cost has exceeded the budget the most.",
    "gold_sql": "select t2.event_name from budget as t1 inner join event as t2 on t2.event_id = t1.link_to_event where t1.event_status = 'closed' and t1.remaining < 0 order by t1.remaining limit 1",
    "pred_sql": "with closed_events as ( select event_id, sum(cost) as total_cost from expense where approved = 'true' group by event_id ) select event_name from event where event_id in ( select link_to_event from closed_events order by total_cost desc limit 1 )"
  },
  {
    "id": 65,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Identify the type of expenses and their total value approved for 'October Meeting' event.",
    "gold_sql": "select t1.type, sum(t3.cost) from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event inner join expense as t3 on t2.budget_id = t3.link_to_budget where t1.event_name = 'october meeting'",
    "pred_sql": "select sum(cost) from expense where link_to_event ='rec2n69dmcrqn9pjc' and approved = 'true'"
  },
  {
    "id": 66,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.",
    "gold_sql": "select t2.category, sum(t2.amount) from event as t1 join budget as t2 on t1.event_id = t2.link_to_event where t1.event_name = 'april speaker' group by t2.category order by sum(t2.amount) asc",
    "pred_sql": "with event_budget as ( select e.event_id, b.category, b.amount from event e join budget b on e.event_id = b.link_to_event where e.event_name = 'april speaker' ) select category, amount from event_budget order by amount asc"
  },
  {
    "id": 67,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "Mention the total expense used on 8/20/2019.",
    "gold_sql": "select sum(cost) from expense where expense_date = '2019-08-20'",
    "pred_sql": "select sum(cost) from expense where expense_date = '2019-08-20'"
  },
  {
    "id": 68,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "List out the full name and total cost that member id \"rec4BLdZHS2Blfp4v\" incurred?",
    "gold_sql": "select t1.first_name, t1.last_name, sum(t2.cost) from member as t1 inner join expense as t2 on t1.member_id = t2.link_to_member where t1.member_id = 'rec4bldzhs2blfp4v'",
    "pred_sql": "select m.first_name ||'' || m.last_name as full_name, sum(e.cost) as total_cost from member m join expense e on m.member_id = e.link_to_member where m.member_id ='rec4bldzhs2blfp4v'"
  },
  {
    "id": 69,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "State what kind of expenses that Sacha Harrison incurred?",
    "gold_sql": "select t2.expense_description from member as t1 inner join expense as t2 on t1.member_id = t2.link_to_member where t1.first_name = 'sacha' and t1.last_name = 'harrison'",
    "pred_sql": "select expense_description from expense where link_to_member ='recd078pns3x2dobe' and approved = 'true'"
  },
  {
    "id": 70,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "State the category of events were held at MU 215.",
    "gold_sql": "select distinct t2.category from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event where t1.location = 'mu 215'",
    "pred_sql": "select category from budget where link_to_event in (select event_id from event where location = 'mu 215') and event_status = 'open'"
  },
  {
    "id": 71,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "List the last name of members with a major in environmental engineering and include its department and college name.",
    "gold_sql": "select t2.last_name, t1.department, t1.college from major as t1 inner join member as t2 on t1.major_id = t2.link_to_major where t2.position = 'member' and t1.major_name = 'environmental engineering'",
    "pred_sql": "select m.last_name from member m join major ma on m.link_to_major = ma.major_id where ma.major_name like '%environmental engineering%' and ma.department and ma.college"
  },
  {
    "id": 72,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "What are the budget category of the events located at MU 215 and a guest speaker type with a 0 budget spent?",
    "gold_sql": "select distinct t2.category, t1.type from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event where t1.location = 'mu 215' and t2.spent = 0 and t1.type = 'guest speaker'",
    "pred_sql": "select category from budget where link_to_event in (select event_id from event where location = 'mu 215') and spent = 0"
  },
  {
    "id": 73,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Among the members with t-shirt size of medium, what is the percentage of the amount 50 received by the Student_Club?",
    "gold_sql": "select cast(sum(case when t2.amount = 50 then 1.0 else 0 end) as real) * 100 / count(t2.income_id) from member as t1 inner join income as t2 on t1.member_id = t2.link_to_member where t1.position = 'member' and t1.t_shirt_size = 'medium'",
    "pred_sql": "select (sum(case when m.t_shirt_size = 'medium' and i.amount = 50 then 1 else 0 end) / (select count(*) from member where t_shirt_size = 'medium')) * 100 as percentage from member m join income i on m.link_to_member = i.link_to_member where i.amount = 50"
  },
  {
    "id": 74,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "List the names of closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020.",
    "gold_sql": "select distinct event_name from event where type = 'game' and date(substr(event_date, 1, 10)) between '2019-03-15' and '2020-03-20' and status = 'closed'",
    "pred_sql": "select event_name as \"game\" from event where status = 'closed' and event_date between '2019-03-15' and '2020-03-20'"
  },
  {
    "id": 75,
    "db_id": "student_club",
    "difficulty": "challenging",
    "question": "Give the full name and contact number of members who had to spend more than average on each expense.",
    "gold_sql": "select distinct t3.first_name, t3.last_name, t3.phone from expense as t1 inner join budget as t2 on t1.link_to_budget = t2.budget_id inner join member as t3 on t3.member_id = t1.link_to_member where t1.cost > ( select avg(t1.cost) from expense as t1 inner join budget as t2 on t1.link_to_budget = t2.budget_id inner join member as t3 on t3.member_id = t1.link_to_member )",
    "pred_sql": "with avg_expense as ( select link_to_member, avg(cost) as avg_cost from expense group by link_to_member ) select m.first_name, m.last_name, m.phone from member m join avg_expense ae on m.link_to_member = ae.link_to_member join expense e on m.link_to_member = e.link_to_member where e.cost > ae.avg_cost"
  },
  {
    "id": 76,
    "db_id": "student_club",
    "difficulty": "challenging",
    "question": "Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it.",
    "gold_sql": "select t2.first_name, t2.last_name, t1.cost from expense as t1 inner join member as t2 on t1.link_to_member = t2.member_id where t1.expense_description = 'water, veggie tray, supplies'",
    "pred_sql": "select m.first_name ||'' || m.last_name as full_name, sum(e.cost) as total_cost from expense e join member m on e.link_to_member = m.member_id where expense_description like '%water%' or expense_description like '%veggie%' or expense_description like '%supplies%' group by m.member_id"
  },
  {
    "id": 77,
    "db_id": "student_club",
    "difficulty": "challenging",
    "question": "Write the full names of students who received funds on the date of 9/9/2019 and include the amount received.",
    "gold_sql": "select distinct t3.first_name, t3.last_name, t4.amount from event as t1 inner join attendance as t2 on t1.event_id = t2.link_to_event inner join member as t3 on t3.member_id = t2.link_to_member inner join income as t4 on t4.link_to_member = t3.member_id where t4.date_received = '2019-09-09'",
    "pred_sql": "select m.first_name ||'' || m.last_name as full_name, i.amount from income i join member m on i.link_to_member = m.member_id where i.date_received = '2019-09-09'"
  },
  {
    "id": 78,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "Are there more in-patient or outpatient who were male? What is the deviation in percentage?",
    "gold_sql": "select cast(sum(case when admission = '+' then 1 else 0 end) as real) * 100 / sum(case when admission = '-' then 1 else 0 end) from patient where sex = 'm'",
    "pred_sql": "select 'inpatient' as 'type', count(*) as 'count' from patient where admission like '%+' union select 'outpatient', count(*) from patient where admission is null"
  },
  {
    "id": 79,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "What is the percentage of female patient were born after 1930?",
    "gold_sql": "select cast(sum(case when strftime('%y', birthday) > '1930' then 1 else 0 end) as real) * 100 / count(*) from patient where sex = 'f'",
    "pred_sql": "select count(*)/(select count(*) from patient where sex='f' and birthday>'1930-01-01')*100 as percentage from patient where sex='f' and birthday>'1930-01-01'"
  },
  {
    "id": 80,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "What is the ratio of outpatient to inpatient followed up treatment among all the 'SLE' diagnosed patient?",
    "gold_sql": "select sum(case when admission = '+' then 1.0 else 0 end) / sum(case when admission = '-' then 1 else 0 end) from patient where diagnosis = 'sle'",
    "pred_sql": "select count(case when diagnosis = 'sle' and admission = '+' then 1 else null end) / count(case when diagnosis = 'sle' then 1 else null end) as ratio from patient"
  },
  {
    "id": 81,
    "db_id": "thrombosis_prediction",
    "difficulty": "simple",
    "question": "What is the disease patient '30609' diagnosed with. List all the date of laboratory tests done for this patient.",
    "gold_sql": "select t1.diagnosis, t2.date from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.id = 30609",
    "pred_sql": "select diagnosis, date from laboratory where id in (select id from patient where id = 30609)"
  },
  {
    "id": 82,
    "db_id": "thrombosis_prediction",
    "difficulty": "simple",
    "question": "List the patient ID, sex and birthday of patient with LDH beyond normal range.",
    "gold_sql": "select distinct t1.id, t1.sex, t1.birthday from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.ldh > 500",
    "pred_sql": "select p.id, p.sex, p.birthday from patient p join laboratory l on p.id = l.id where l.ldh > (select avg(ld) from laboratory)"
  },
  {
    "id": 83,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "State the ID and age of patient with positive degree of coagulation.",
    "gold_sql": "select distinct t1.id, strftime('%y', current_timestamp) - strftime('%y', t1.birthday) from patient as t1 inner join examination as t2 on t1.id = t2.id where t2.rvvt = '+'",
    "pred_sql": "select p.id, datediff(p.birthday, '0001-01-01') as age from patient p join laboratory l on p.id = l.id where l.id in (select id from laboratory where plt > 150)"
  },
  {
    "id": 84,
    "db_id": "thrombosis_prediction",
    "difficulty": "simple",
    "question": "For patients with severe degree of thrombosis, list their ID, sex and disease the patient is diagnosed with.",
    "gold_sql": "select distinct t1.id, t1.sex, t1.diagnosis from patient as t1 inner join examination as t2 on t1.id = t2.id where t2.thrombosis = 2",
    "pred_sql": "select p.id, p.sex, e.diagnosis from patient p join examination e on p.id = e.id where e.thrombosis = 1"
  },
  {
    "id": 85,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "How many female patients who came at the hospital in 1997 was immediately followed at the outpatient clinic?",
    "gold_sql": "select count(*) from patient where strftime('%y', description) = '1997' and sex = 'f' and admission = '-'",
    "pred_sql": "select count(*) from patient where sex = 'f' and `first date` = '1997-01-01' and exists (select 1 from examination where patient.id = examination.id)"
  },
  {
    "id": 86,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "How many of the patients with the most serious thrombosis cases examined in 1997 are women?",
    "gold_sql": "select count(*) from patient as t1 inner join examination as t2 on t1.id = t2.id where t1.sex = 'f' and strftime('%y', t2.`examination date`) = '1997' and t2.thrombosis = 1",
    "pred_sql": "select count(*) from patient p join examination e on p.id = e.id where e.thrombosis = (select max(thrombosis) from examination) and e.`examination date` = '1997-01-01' and p.sex = 'f'"
  },
  {
    "id": 87,
    "db_id": "thrombosis_prediction",
    "difficulty": "simple",
    "question": "What are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis.",
    "gold_sql": "select t2.symptoms, t1.diagnosis from patient as t1 inner join examination as t2 on t1.id = t2.id where t2.symptoms is not null order by t1.birthday desc limit 1",
    "pred_sql": "select symptoms from examination where id in (select id from patient where birthday = (select min(birthday) from patient))"
  },
  {
    "id": 88,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?",
    "gold_sql": "select t1.date, strftime('%y', t2.`first date`) - strftime('%y', t2.birthday),t2.birthday from laboratory as t1 inner join patient as t2 on t1.id = t2.id where t2.diagnosis = 'sjs' and t2.birthday is not null order by t2.birthday asc limit 1",
    "pred_sql": "with oldest_sjs_patient as ( select min(l.date) as date, p.birthday as birthday from laboratory l join patient p on l.id = p.id where l.id in ( select id from examination where diagnosis like '%sjs%' ) ) select datediff(min(l.date), p.birthday) as age from oldest_sjs_patient op join patient p on op.id = p.id join laboratory"
  },
  {
    "id": 89,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "What is the ratio of male to female patients among all those with abnormal uric acid counts?",
    "gold_sql": "select cast(sum(case when t2.ua <= 8.0 and t1.sex = 'm' then 1 else 0 end) as real) / sum(case when t2.ua <= 6.5 and t1.sex = 'f' then 1 else 0 end) from patient as t1 inner join laboratory as t2 on t1.id = t2.id",
    "pred_sql": "select count(case when sex='m' then 1 else null end) / count(case when sex='f' then 1 else null end) as ratio from patient p join laboratory l on p.id=l.id where ua > 3.8"
  },
  {
    "id": 90,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "How many underage patients were examined during the course of the three-year period from 1990 to 1993?",
    "gold_sql": "select count(t1.id) from patient as t1 inner join examination as t2 on t1.id = t2.id where strftime('%y', t2.`examination date`) between '1990' and '1993' and strftime('%y', t2.`examination date`) - strftime('%y', t1.birthday) < 18",
    "pred_sql": "select count(*) from patient p join examination e on p.id = e.id where p.birthday > '1990-01-01' and p.birthday < '1993-01-01' and e.id is not null"
  },
  {
    "id": 91,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis?",
    "gold_sql": "select strftime('%y', t2.date) - strftime('%y', t1.birthday), t1.diagnosis from patient as t1 inner join laboratory as t2 on t1.id = t2.id order by t2.hgb desc limit 1",
    "pred_sql": "with max_hgb as ( select id, hgb from examination where hgb = ( select max(hgb) from examination ) ) select (select birthday from patient where id = (select id from max_hgb)) as birthday, (select diagnosis from examination where id = (select id from max_hgb)) as diagnosis;"
  },
  {
    "id": 92,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "For the patient who was diagnosed with SLE on 1994/2/19, what was his/her anti-Cardiolipin antibody concentration status on 1993/11/12?",
    "gold_sql": "select `acl iga`, `acl igg`, `acl igm` from examination where id in ( select id from patient where diagnosis = 'sle' and description = '1994-02-19' ) and `examination date` = '1993-11-12'",
    "pred_sql": "select * from laboratory where id in (select id from patient where diagnosis = 'sle' and birthday = '1956-04-14') and date = '1993-11-12' and `acl igg` is not null and `acl igm` is not null"
  },
  {
    "id": 93,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981?",
    "gold_sql": "select cast((sum(case when t2.date like '1981-11-%' then t2.`t-cho` else 0 end) - sum(case when t2.date like '1981-12-%' then t2.`t-cho` else 0 end)) as real) / sum(case when t2.date like '1981-12-%' then t2.`t-cho` else 0 end) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.birthday = '1959-02-18'",
    "pred_sql": "select (select t-cho from laboratory where id in (select id from patient where birthday = '1959-02-18') and date between '1981-11-01' and '1981-12-31') - (select t-cho from laboratory where id in (select id from patient where birthday = '1959-02-18') and date between '1981-10-01' and '1981-11-30') / (select t-cho"
  },
  {
    "id": 94,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "How many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID.",
    "gold_sql": "select distinct id from laboratory where date between '1987-07-06' and '1996-01-31' and gpt > 30 and alb < 4",
    "pred_sql": "select p.id from patient p join examination e on p.id = e.id join laboratory l on p.id = l.id where e.`examination date` between '1987-07-06' and '1996-01-31' and l.gpt > 30 and l.alb < 4"
  },
  {
    "id": 95,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average?",
    "gold_sql": "select count(*) from examination where thrombosis = 2 and `ana pattern` = 's' and `acl igm` > (select avg(`acl igm`) * 1.2 from examination where thrombosis = 2 and `ana pattern` = 's')",
    "pred_sql": "select count(*) from patient p join examination e on p.id = e.id where e.thrombosis = 2 and e.`ana pattern` = 's' and e.`acl igm` > (select avg(`acl igm`) from examination where `ana pattern` = 's') + 20"
  },
  {
    "id": 96,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range.",
    "gold_sql": "select distinct t1.id from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.admission = '-' and t2.`t-bil` < 2.0 and t2.date like '1991-10-%'",
    "pred_sql": "select p.id, p.sex, p.birthday, p.description, p.`first date`, p.admission, p.diagnosis from patient p join laboratory l on p.id = l.id where l.date like '1991-10-%' and l.`t-bil` between 0 and 1.2"
  },
  {
    "id": 97,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE?",
    "gold_sql": "select avg(t2.alb) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.plt > 400 and t1.diagnosis = 'sle' and t1.sex = 'f'",
    "pred_sql": "select avg(alb) from laboratory where id in (select id from patient where sex = 'f' and diagnosis = 'sle') and plt > 400"
  },
  {
    "id": 98,
    "db_id": "thrombosis_prediction",
    "difficulty": "simple",
    "question": "How many female patients were given an APS diagnosis?",
    "gold_sql": "select count(id) from patient where sex = 'f' and diagnosis = 'aps'",
    "pred_sql": "select count(*) from patient p join diagnosis d on p.id = d.id where p.sex = 'f' and d.diagnosis = 'aps'"
  },
  {
    "id": 99,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "What percentage of patients who were born in 1980 and were diagnosed with RA are women?",
    "gold_sql": "select cast(sum(case when sex = 'f' then 1 else 0 end) as real) * 100 / count(id) from patient where diagnosis = 'ra' and strftime('%y', birthday) = '1980'",
    "pred_sql": "select 100.0 * count(case when birthday like '1980-%' and diagnosis = 'ra' and sex = 'f' then 1 else null end) / count(case when birthday like '1980-%' and diagnosis = 'ra' then 1 else null end) as percentage from patient"
  },
  {
    "id": 100,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "Was the patient with the number 57266's uric acid within a normal range?",
    "gold_sql": "select case when (t1.sex = 'f' and t2.ua > 6.5) or (t1.sex = 'm' and t2.ua > 8.0) then true else false end from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.id = 57266",
    "pred_sql": "select * from laboratory where id = 57266 and ua between 2.5 and 7.5"
  },
  {
    "id": 101,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "Provide IDs for male patients with ALT glutamic pylvic transaminase (GPT) that have history of ALT glutamic pylvic transaminase (GPT) exceed the normal range.",
    "gold_sql": "select distinct t1.id from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.sex = 'm' and t2.gpt >= 60",
    "pred_sql": "select id from patient where sex = 'm' and id in (select id from laboratory where gpt > (select avg(gpt) from laboratory))"
  },
  {
    "id": 102,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "Please provide the diagnosis of patients with ALT glutamic pylvic transaminase beyond the normal range by ascending order of their date of birth.",
    "gold_sql": "select distinct t1.diagnosis from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.gpt > 60 order by t1.birthday asc",
    "pred_sql": "with diagnosis as ( select p.id, p.birthday, e.diagnosis, l.date from patient p join examination e on p.id = e.id join laboratory l on p.id = l.id where l.date = (select max(date) from laboratory where id = p.id) and l.alp > (select avg(alp) from laboratory) ) select p.sex, p.birthday, e.diagnosis from diagnosis d join patient"
  },
  {
    "id": 103,
    "db_id": "thrombosis_prediction",
    "difficulty": "simple",
    "question": "Provide all ID, sex and birthday of patients whose urea nitrogen (UN) just within the borderline of passing?",
    "gold_sql": "select distinct t1.id, t1.sex, t1.birthday from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.un = 29",
    "pred_sql": "select p.id, p.sex, p.birthday from patient p where p.id in (select l.id from laboratory l where l.id = p.id and l.un between 15 and 35)"
  },
  {
    "id": 104,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "List and group all patients by sex for total bilirubin (T-BIL) level not within the normal range.",
    "gold_sql": "select t1.id,t1.sex from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.`t-bil` >= 2.0 group by t1.sex,t1.id",
    "pred_sql": "with patients as ( select p.id, p.sex, l.`t-bil` from patient p join laboratory l on p.id = l.id ) select p.sex, count(*) as count from patients p where p.`t-bil` not between 0.1 and 1.2 group by p.sex"
  },
  {
    "id": 105,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "What is the average age of the male patient with high cholesterol?",
    "gold_sql": "select avg(strftime('%y', date('now')) - strftime('%y', t1.birthday)) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.`t-cho` >= 250 and t1.sex = 'm'",
    "pred_sql": "select avg(datediff('now', birthday)/365.25) as average_age from patient where sex = 'm' and exists (select * from laboratory where id = patient.id and t-cho > 200)"
  },
  {
    "id": 106,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "For all patients with triglyceride (TG) level beyond the normal range, how many are age more than 50 years?",
    "gold_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.tg >= 200 and strftime('%y', current_timestamp) - strftime('%y', t1.birthday) > 50",
    "pred_sql": "select count(*) from patient p join laboratory l on p.id = l.id where l.tg > (select avg(tg) from laboratory) and p.birthday < '1950-01-01'"
  },
  {
    "id": 107,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "For patient born between 1936-1956, how many male patients have creatinine phosphokinase beyond the normal range?",
    "gold_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where strftime('%y', t1.birthday) between '1936' and '1956' and t1.sex = 'm' and t2.cpk >= 250",
    "pred_sql": "select count(*) from patient where birthday between '1936-01-01' and '1956-12-31' and sex = 'm' and exists (select 1 from laboratory where laboratory.id = patient.id and laboratory.cpk > (select avg(cpk) from laboratory))"
  },
  {
    "id": 108,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "Provide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range.",
    "gold_sql": "select distinct t1.id, t1.sex , strftime('%y', current_timestamp) - strftime('%y', t1.birthday) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.glu >= 180 and t2.`t-cho` < 250",
    "pred_sql": "select p.id, p.sex, (julianday(p.birthday,'start of month') + julianday('now','start of month') - 1) / 30.4375 as age from patient p join laboratory l on p.id = l.id where l.glu not between 70 and 110 and l.`t-cho` between 150 and 240"
  },
  {
    "id": 109,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "What are the patient's diagnosis for those who has lower red blood blood cell? State their ID and age.",
    "gold_sql": "select distinct t1.diagnosis, t1.id , strftime('%y', current_timestamp) -strftime('%y', t1.birthday) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.rbc < 3.5",
    "pred_sql": "select p.id, p.birthday, datediff('now', p.birthday) as age from patient p join laboratory l on p.id = l.id where l.rbc < 4.5"
  },
  {
    "id": 110,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "Among the patients who were diagnosed with SLE, who is the oldest with normal hemoglobin level. Provide the ID and sex.",
    "gold_sql": "select t1.id, t1.sex from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.diagnosis = 'sle' and t2.hgb > 10 and t2.hgb < 17 order by t1.birthday asc limit 1",
    "pred_sql": "select p.id, p.sex from patient p join diagnosis d on p.id = d.id join examination e on p.id = e.id where d.diagnosis = 'sle' and e.hgb = 0"
  },
  {
    "id": 111,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "Name the ID and age of patient with two or more laboratory examinations which show their hematoclit level exceeded the normal range.",
    "gold_sql": "select distinct t1.id, strftime('%y', current_timestamp) - strftime('%y', t1.birthday) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.id in ( select id from laboratory where hct >= 52 group by id having count(id) >= 2 )",
    "pred_sql": "with patient_lab as ( select p.id, p.sex, p.birthday, (strftime('%y', 'now') - strftime('%y', p.birthday)) as age, count(*) as num_exams, group_concat(distinct l.date) as exam_dates from patient p join laboratory l on p.id = l.id group by p.id, p.sex, p.birthday having count(*) >"
  },
  {
    "id": 112,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range?",
    "gold_sql": "select sum(case when t2.plt <= 100 then 1 else 0 end) - sum(case when t2.plt >= 400 then 1 else 0 end) from patient as t1 inner join laboratory as t2 on t1.id = t2.id",
    "pred_sql": "with abnormalplt as ( select id from laboratory where plt < 150 or plt > 400 ) select count(*) as lowplt, count(*) as highplt from abnormalplt group by (case when plt < 150 then 'lowplt' else 'highplt' end)"
  },
  {
    "id": 113,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level.",
    "gold_sql": "select distinct t1.id from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.plt between 100 and 400 and strftime('%y', t2.date) - strftime('%y', t1.birthday) < 50 and strftime('%y', t2.date) = '1984'",
    "pred_sql": "with patients as ( select id from patient where birthday > date('now', '-50 year') ) select p.id from patients p join laboratory l on p.id = l.id where l.date >= date('1984-01-01') and l.date <= date('1984-12-31') and l.plt = 150"
  },
  {
    "id": 114,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)?",
    "gold_sql": "select cast(sum(case when t2.pt >= 14 and t1.sex = 'f' then 1 else 0 end) as real) * 100 / count(case when t2.pt >= 14 then 1 else 0 end) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where strftime('%y', current_timestamp) - strftime('%y', t1.birthday) > 55",
    "pred_sql": "select round(avg(case when wbc > 10 then 1 else 0 end) * 100.0, 2) as percentage from patient p where extract(year from birthday) - extract(year from date('now')) > 55 and sex = 'f'"
  },
  {
    "id": 115,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level?",
    "gold_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.fg <= 150 or t2.fg >= 450 and t2.wbc > 3.5 and t2.wbc < 9.0 and t1.sex = 'm'",
    "pred_sql": "select count(*) from patient where sex = 'm' and wbc = 6.4"
  },
  {
    "id": 116,
    "db_id": "thrombosis_prediction",
    "difficulty": "simple",
    "question": "How many patients with an Ig G higher than normal?",
    "gold_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id inner join examination as t3 on t3.id = t2.id where t2.igg >= 2000",
    "pred_sql": "select count(distinct p.id) from patient p join laboratory l on p.id = l.id where l.id is not null and l.`igg` > 0"
  },
  {
    "id": 117,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "Among the patients with a normal Ig G level, how many of them have symptoms?",
    "gold_sql": "select count(t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id inner join examination as t3 on t3.id = t2.id where t2.igg between 900 and 2000 and t3.symptoms is not null",
    "pred_sql": "select count(*) from patient p join examination e on p.id = e.id where e.`acl igg` = 0 and e.symptoms is not null"
  },
  {
    "id": 118,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "How many patients with a normal Ig A level came to the hospital after 1990/1/1?",
    "gold_sql": "select count(t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.iga between 80 and 500 and strftime('%y', t1.`first date`) > '1990'",
    "pred_sql": "select count(*) from patient p join examination e on p.id = e.id where e.`acl iga` = 0 and e.`examination date` > '1990-01-01'"
  },
  {
    "id": 119,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "For the patients with an abnormal Ig M level, what is the most common disease they are diagnosed with?",
    "gold_sql": "select t1.diagnosis from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.igm not between 40 and 400 group by t1.diagnosis order by count(t1.diagnosis) desc limit 1",
    "pred_sql": "with abnormal_igm as ( select diagnosis, count(*) as count from examination where `acl igm` > 1.6 group by diagnosis order by count desc ) select diagnosis from abnormal_igm where count = (select max(count) from abnormal_igm)"
  },
  {
    "id": 120,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "How many patients with a abnormal C-reactive protein don't have their data recorded?",
    "gold_sql": "select count(t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where (t2.crp = '+' ) and t1.description is null",
    "pred_sql": "select count(*) from patient where id not in (select id from laboratory where crp is not null)"
  },
  {
    "id": 121,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "Among the patients whose creatinine level is abnormal, how many of them aren't 70 yet?",
    "gold_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.cre >= 1.5 and strftime('%y', date('now')) - strftime('%y', t1.birthday) < 70",
    "pred_sql": "select count(*) from patient p join laboratory l on p.id = l.id where l.cre > 0 and p.birthday > '1970-01-01'"
  },
  {
    "id": 122,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital?",
    "gold_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.rnp = 'negative' or t2.rnp = '0' and t1.admission = '+'",
    "pred_sql": "select count(distinct p.id) from patient p join laboratory l on p.id = l.id where l.rnp = 'none' and l.description like '%+ %'"
  },
  {
    "id": 123,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "Among the patients with normal anti-SM, how many of them does not have thrombosis?",
    "gold_sql": "select count(t1.id) from examination as t1 inner join laboratory as t2 on t1.id = t2.id where t2.sm in ('negative','0') and t1.thrombosis = 0",
    "pred_sql": "select count(*) from patient p join examination e on p.id = e.id where e.thrombosis = 0 and e.`ana pattern` not like '%s%' and e.`ana pattern` not like '%m%'"
  },
  {
    "id": 124,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "Among the patients who has a normal anti-scl70, how many of them are female and does not have any symptom?",
    "gold_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id inner join examination as t3 on t3.id = t2.id where (t2.sc170 = 'negative' or t2.sc170 = '0') and t1.sex = 'f' and t3.symptoms is null",
    "pred_sql": "select count(*) from patient p join laboratory l on p.id = l.id where p.sex = 'f' and l.`dna-ii` = 0 and l.symptoms is null"
  },
  {
    "id": 125,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male?",
    "gold_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.centromea in ('negative', '0') and t2.ssb in ('negative', '0') and t1.sex = 'm'",
    "pred_sql": "select count(*) from patient p join examination e on p.id = e.id join laboratory l on p.id = l.id where e.`acl iga` = 0 and e.`ana pattern` like '%centromea%' and e.`ana pattern` like '%ssb%' and p.sex = 'm'"
  },
  {
    "id": 126,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "Among the patients who have an abnormal level of glutamic oxaloacetic transaminase, when was the youngest of them born?",
    "gold_sql": "select t1.birthday from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.got >= 60 order by t1.birthday desc limit 1",
    "pred_sql": "with youngest_patient as ( select min(birthday) as youngest_birthday from patient where id in ( select patient.id from patient join examination on patient.id = examination.id where examination.got > 0 ) ) select birthday from patient where id in ( select patient.id from patient join examination on patient.id = examination.id where examination.got > 0 ) and birthday = (select"
  },
  {
    "id": 127,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "For the patients with a normal range of creatinine phosphokinase, how many of them have a positive measure of degree of coagulation?",
    "gold_sql": "select count(t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id inner join examination as t3 on t1.id = t3.id where t2.cpk < 250 and (t3.kct = '+' or t3.rvvt = '+' or t3.lac = '+')",
    "pred_sql": "select count(*) from patient p join laboratory l on p.id = l.id where p.id in (select id from patient where diagnosis is not null) and l.cpk between 0 and 200"
  },
  {
    "id": 128,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Give the name of the league had the most goals in the 2016 season?",
    "gold_sql": "select t2.name from match as t1 inner join league as t2 on t1.league_id = t2.id where t1.season = '2015/2016' group by t2.name order by sum(t1.home_team_goal + t1.away_team_goal) desc limit 1",
    "pred_sql": "with league_goals as ( select league_id, count(*) as goals from match where date like '2016-%' group by league_id ) select name from league where id in ( select league_id from league_goals order by goals desc limit 1 )"
  },
  {
    "id": 129,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "In Scotland Premier League, which away team won the most during the 2010 season?",
    "gold_sql": "select teaminfo.team_long_name from league as leaguedata inner join match as matchdata on leaguedata.id = matchdata.league_id inner join team as teaminfo on matchdata.away_team_api_id = teaminfo.team_api_id where leaguedata.name = 'scotland premier league' and matchdata.season = '2009/2010' and matchdata.away_team_goal - matchdata.home_team_goal > 0 group by matchdata.away_team_api_id order by count(*) desc limit 1",
    "pred_sql": "with away_wins as ( select away_team_api_id, count(*) as wins from match where season = '2010' and league_id = (select id from league where name = 'scotland premier league') group by away_team_api_id ) select away_team_api_id, wins from away_wins order by wins desc limit 1"
  },
  {
    "id": 130,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "What are the speed in which attacks are put together of the top 4 teams with the highest build Up Play Speed?",
    "gold_sql": "select t1.buildupplayspeed from team_attributes as t1 inner join team as t2 on t1.team_api_id = t2.team_api_id order by t1.buildupplayspeed asc limit 4",
    "pred_sql": "with top_teams as ( select team_api_id, avg(buildupplayspeed) as avg_build_up_play_speed from team_attributes group by team_api_id order by avg_build_up_play_speed desc limit 4 ) select t.team_api_id, t.avg_build_up_play_speed, (select avg(buildupplayspeed) from team_attributes where team_api_id = t.team_api_id and"
  },
  {
    "id": 131,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Give the name of the league had the most matches end as draw in the 2016 season?",
    "gold_sql": "select t2.name from match as t1 inner join league as t2 on t1.league_id = t2.id where t1.season = '2015/2016' and t1.home_team_goal = t1.away_team_goal group by t2.name order by count(t1.id) desc limit 1",
    "pred_sql": "with league_draws as ( select league_id, count(*) as draw_count from match where season = '2016' and home_team_goal = away_team_goal group by league_id ) select league_id from league_draws order by draw_count desc limit 1"
  },
  {
    "id": 132,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015.",
    "gold_sql": "select distinct datetime() - t2.birthday age from player_attributes as t1 inner join player as t2 on t1.player_api_id = t2.player_api_id where strftime('%y',t1.`date`) >= '2013' and strftime('%y',t1.`date`) <= '2015' and t1.sprint_speed >= 97",
    "pred_sql": "with player_attributes as ( select p.player_api_id, p.player_name, pa.date, pa.sprint_speed from player p join player_attributes pa on p.player_api_id = pa.player_fifa_api_id where pa.date between '2013-01-01' and '2015-12-31' and pa.sprint_speed >= 97 ) select pa.player_api_id, p.player_name, datediff(current_date, p.b"
  },
  {
    "id": 133,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Give the name of the league with the highest matches of all time and how many matches were played in the said league.",
    "gold_sql": "select t2.name, t1.max_count from league as t2 join (select league_id, max(cnt) as max_count from (select league_id, count(id) as cnt from match group by league_id) as subquery) as t1 on t1.league_id = t2.id",
    "pred_sql": "with league_matches as ( select league_id, count(*) as num_matches from match group by league_id ) select name, num_matches from league_matches join league on league_matches.league_id = league.id order by num_matches desc limit 1"
  },
  {
    "id": 134,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "Give the team_fifa_api_id of teams with more than 50 but less than 60 build-up play speed.",
    "gold_sql": "select distinct team_fifa_api_id from team_attributes where buildupplayspeed > 50 and buildupplayspeed < 60",
    "pred_sql": "select team_fifa_api_id from team_attributes where buildupplayspeed > 50 and buildupplayspeed < 60"
  },
  {
    "id": 135,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "List the long name of teams with above-average build-up play passing in 2012.",
    "gold_sql": "select distinct t4.team_long_name from team_attributes as t3 inner join team as t4 on t3.team_api_id = t4.team_api_id where substr(t3.`date`, 1, 4) = '2012' and t3.buildupplaypassing > ( select cast(sum(t2.buildupplaypassing) as real) / count(t1.id) from team as t1 inner join team_attributes as t2 on t1.team_api_id = t2.team_api_id where strftime('%y',t2.`date`) = '2012')",
    "pred_sql": "with team_attributes as ( select t.team_long_name, ta.buildupplaypassing, ta.date from team_attributes ta join team t on ta.team_fifa_api_id = t.team_fifa_api_id where ta.date like '2012-%' and ta.buildupplaypassing > (select avg(buildupplaypassing) from team_attributes where date like '2012-%') ) select team_long_name from team_attributes group by"
  },
  {
    "id": 136,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992.",
    "gold_sql": "select cast(count(case when t2.preferred_foot = 'left' then t1.id else null end) as real) * 100 / count(t1.id) percent from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where substr(t1.birthday, 1, 4) between '1987' and '1992'",
    "pred_sql": "select (count(case when preferred_foot = 'left' and birthday between '1987-01-01' and '1992-12-31' then 1 else null end) / count(case when birthday between '1987-01-01' and '1992-12-31' then 1 else null end)) * 100 as percentage from player_attributes"
  },
  {
    "id": 137,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "Find the average number of long-shot done by Ahmed Samir Farag.",
    "gold_sql": "select cast(sum(t2.long_shots) as real) / count(t2.`date`) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.player_name = 'ahmed samir farag'",
    "pred_sql": "select avg(long_shots) as average_long_shots from player_attributes where player_name = 'ahmed samir farag'"
  },
  {
    "id": 138,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy.",
    "gold_sql": "select t1.player_name from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.height > 180 group by t1.id order by cast(sum(t2.heading_accuracy) as real) / count(t2.`player_fifa_api_id`) desc limit 10",
    "pred_sql": "select p.player_name, avg(pa.heading_accuracy) as avg_heading_accuracy from player p join player_attributes pa on p.player_api_id = pa.player_api_id where p.height > 180 group by p.player_name order by avg_heading_accuracy desc limit 10"
  },
  {
    "id": 139,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season.",
    "gold_sql": "select t1.name from league as t1 inner join match as t2 on t1.id = t2.league_id where t2.season = '2009/2010' group by t1.name having (cast(sum(t2.home_team_goal) as real) / count(distinct t2.id)) - (cast(sum(t2.away_team_goal) as real) / count(distinct t2.id)) > 0",
    "pred_sql": "with league_data as ( select l.name, avg(h.home_team_goal) as avg_home_goals, avg(a.away_team_goal) as avg_away_goals from match m join team t on m.home_team_api_id = t.team_api_id join league l on t.country_id = l.country_id where m.season = '2009/2010' group by l.name ) select name from league_data where avg_home_goals >"
  },
  {
    "id": 140,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "List the football players with a birthyear of 1970 and a birthmonth of October.",
    "gold_sql": "select player_name from player where substr(birthday, 1, 7) = '1970-10'",
    "pred_sql": "select * from player where strftime('%y', birthday) = '1970' and strftime('%m', birthday) = '10'"
  },
  {
    "id": 141,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "What is the overall rating of the football player Gabriel Tamas in year 2011?",
    "gold_sql": "select t2.overall_rating from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.player_name = 'gabriel tamas' and strftime('%y', t2.date) = '2011'",
    "pred_sql": "select avg(overall_rating) as overall_rating from player_attributes where player_fifa_api_id in (select player_fifa_api_id from player where player_name = 'gabriel tamas') and date like '2011-%'"
  },
  {
    "id": 142,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Calculate the average home team goal in the 2010/2011 season in the country of Poland.",
    "gold_sql": "select cast(sum(t2.home_team_goal) as real) / count(t2.id) from country as t1 inner join match as t2 on t1.id = t2.country_id where t1.name = 'poland' and t2.season = '2010/2011'",
    "pred_sql": "select avg(home_team_goal) from match where country_id = (select id from country where name = 'poland') and season = '2010/2011'"
  },
  {
    "id": 143,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "Who has the highest average finishing rate between the highest and shortest football player?",
    "gold_sql": "select a from ( select avg(finishing) result, 'max' a from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.height = ( select max(height) from player ) union select avg(finishing) result, 'min' a from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.height = ( select min(height) from player ) ) order by result desc limit 1",
    "pred_sql": "with player_stats as ( select player_api_id, avg(finishing) as avg_finishing from player_attributes group by player_api_id ) select player_api_id, name, avg_finishing from player_stats join player on player_stats.player_api_id = player.player_api_id order by avg_finishing desc limit 1"
  },
  {
    "id": 144,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "From 2010 to 2015, what was the average overall rating of players who are higher than 170?",
    "gold_sql": "select cast(sum(t2.overall_rating) as real) / count(t2.id) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.height > 170 and strftime('%y',t2.`date`) >= '2010' and strftime('%y',t2.`date`) <= '2015'",
    "pred_sql": "with player_ratings as ( select pa.player_api_id, pa.overall_rating from player_attributes pa where pa.date between '2010-01-01' and '2015-12-31' and pa.height > 170 ) select avg(pr.overall_rating) as average_rating from player_ratings pr"
  },
  {
    "id": 145,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye\n?",
    "gold_sql": "select cast(sum(case when t1.player_name = 'abdou diallo' then t2.ball_control else 0 end) as real) / count(case when t1.player_name = 'abdou diallo' then t2.id else null end) - cast(sum(case when t1.player_name = 'aaron appindangoye' then t2.ball_control else 0 end) as real) / count(case when t1.player_name = 'aaron appindangoye' then t2.id else null end) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id",
    "pred_sql": "with player_attributes as ( select player_api_id, avg(ball_control) as avg_ball_control from player_attributes group by player_api_id ) select (select avg_ball_control from player_attributes where player_api_id = (select player_api_id from player where player_name = 'abdou diallo')) - (select avg_ball_control from player_attributes where player_api_id = (select player_api_id from player where player_name = 'aaron appindangoy"
  },
  {
    "id": 146,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "Which player is older, Aaron Lennon or Abdelaziz Barrada?",
    "gold_sql": "select player_name from player where player_name in ('aaron lennon', 'abdelaziz barrada') order by birthday asc limit 1",
    "pred_sql": "select * from player where player_name in ('aaron lennon', 'abdelaziz barrada') order by birthday"
  },
  {
    "id": 147,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "Which player is the tallest?",
    "gold_sql": "select player_name from player order by height desc limit 1",
    "pred_sql": "select player_name, height from player order by height desc limit 1"
  },
  {
    "id": 148,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Among the players whose preferred foot was the left foot when attacking, how many of them would remain in his position when the team attacked?",
    "gold_sql": "select count(player_api_id) from player_attributes where preferred_foot = 'left' and attacking_work_rate = 'low'",
    "pred_sql": "with left_foot_attackers as ( select player_fifa_api_id, preferred_foot from player_attributes where preferred_foot = 'left' ) select count(*) from left_foot_attackers where id in ( select player_1 from match union all select player_2 from match union all select player_3 from match union all select player_4 from match"
  },
  {
    "id": 149,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "Among the players born before the year 1986, how many of them would remain in his position and defense while the team attacked?",
    "gold_sql": "select count(distinct t1.player_name) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where strftime('%y',t1.birthday) < '1986' and t2.defensive_work_rate = 'high'",
    "pred_sql": "with players as ( select p.* from player p where p.birthday < '1986-01-01' ) select count(*) from players p join team_attributes ta on p.player_api_id = ta.player_fifa_api_id join match m on p.player_api_id in (m.home_player_1, m.home_player_2, m.home_player_3, m.home_player_4, m.home_player_5, m.home_player_6"
  },
  {
    "id": 150,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Please list the names of the players whose volley score and dribbling score are over 70.",
    "gold_sql": "select distinct t1.player_name from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t2.volleys > 70 and t2.dribbling > 70",
    "pred_sql": "select player_name from player where id in ( select home_player_1 from match where home_player_x11 > 70 or home_player_x2 > 70 union select away_player_1 from match where away_player_x11 > 70 or away_player_x2 > 70 )"
  },
  {
    "id": 151,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "How many matches were held in the Belgium Jupiler League in April, 2009?",
    "gold_sql": "select count(t2.id) from league as t1 inner join match as t2 on t1.id = t2.league_id where t1.name = 'belgium jupiler league' and substr(t2.`date`, 1, 7) = '2009-04'",
    "pred_sql": "select count(*) from match where country_id = (select id from country where name = 'belgium') and league_id = (select id from league where name = 'belgium jupiler league') and strftime('%y-%m', date) = '2009-04'"
  },
  {
    "id": 152,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "Give the name of the league had the most matches in the 2008/2009 season?",
    "gold_sql": "select t1.name from league as t1 join match as t2 on t1.id = t2.league_id where t2.season = '2008/2009' group by t1.name having count(t2.id) = (select max(match_count) from (select count(t2.id) as match_count from match as t2 where t2.season = '2008/2009' group by t2.league_id))",
    "pred_sql": "select name from league where id in (select league_id from match where season = '2008/2009' group by league_id order by count(*) desc limit 1)"
  },
  {
    "id": 153,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel?",
    "gold_sql": "select (sum(case when t1.player_name = 'ariel borysiuk' then t2.overall_rating else 0 end) * 1.0 - sum(case when t1.player_name = 'paulin puel' then t2.overall_rating else 0 end)) * 100 / sum(case when t1.player_name = 'paulin puel' then t2.overall_rating else 0 end) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id",
    "pred_sql": "select (select overall_rating from player_attributes where player_api_id = (select player_api_id from player where player_name = 'ariel borysiuk')) - (select overall_rating from player_attributes where player_api_id = (select player_api_id from player where player_name = 'paulin puel')) / (select overall_rating from player_attributes where player_api_id = (select player_api_id from player where player_name = 'paulin puel')) * 100"
  },
  {
    "id": 154,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Calculate the average overall rating of Pietro Marino.",
    "gold_sql": "select cast(sum(t2.overall_rating) as real) / count(t2.id) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.player_name = 'pietro marino'",
    "pred_sql": "select avg(overall_rating) from player_attributes where player_name = 'pietro marino'"
  },
  {
    "id": 155,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "What is Ajax's highest chance creation passing score and what is it classified as?",
    "gold_sql": "select t2.chancecreationpassing, t2.chancecreationpassingclass from team as t1 inner join team_attributes as t2 on t1.team_api_id = t2.team_api_id where t1.team_long_name = 'ajax' order by t2.chancecreationpassing desc limit 1",
    "pred_sql": "select max(chancecreationpassing) as highest_chance_creation_passing, chancecreationpassingclass as chance_creation_passing_class from team_attributes where team_fifa_api_id = (select team_fifa_api_id from team where team_short_name = 'ajax')"
  },
  {
    "id": 156,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "For the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player.",
    "gold_sql": "select t1.player_name from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where substr(t2.`date`, 1, 10) = '2016-06-23' and t2.overall_rating = 77 order by t1.birthday asc limit 1",
    "pred_sql": "select player_name from player where player_api_id in (select player_api_id from player_attributes where date = '2016-06-23' and overall_rating = 77) order by birthday limit 1"
  },
  {
    "id": 157,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "What was the overall rating for Aaron Mooy on 2016/2/4?",
    "gold_sql": "select t2.overall_rating from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where substr(t2.`date`, 1, 10) = '2016-02-04' and t1.player_name = 'aaron mooy'",
    "pred_sql": "select overall_rating from player_attributes where player_fifa_api_id = (select player_fifa_api_id from player where player_name = 'aaron mooy') and date = '2016-02-18'"
  },
  {
    "id": 158,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "How was Francesco Migliore's attacking work rate on 2015/5/1?",
    "gold_sql": "select t2.attacking_work_rate from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t2.`date` like '2015-05-01%' and t1.player_name = 'francesco migliore'",
    "pred_sql": "select pa.date, pa.attacking_work_rate from player_attributes pa where pa.player_fifa_api_id = (select pa2.player_fifa_api_id from player pa2 where pa2.player_name = 'francesco migliore') and pa.date = '2015-05-01'"
  },
  {
    "id": 159,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "When was the first time did Kevin Constant have his highest crossing score? Give the date.",
    "gold_sql": "select `date` from ( select t2.crossing, t2.`date` from player as t1 inner join player_attributes as t2 on t1.player_fifa_api_id = t2.player_fifa_api_id where t1.player_name = 'kevin constant' order by t2.crossing desc) order by date desc limit 1",
    "pred_sql": "with player_attributes as ( select player_fifa_api_id, max(crossing) as max_crossing from player_attributes group by player_fifa_api_id ) select date from team_attributes where team_fifa_api_id in ( select player_fifa_api_id from player_attributes where max_crossing = (select max(max_crossing) from player_attributes) ) and date = ( select date from team_attributes"
  },
  {
    "id": 160,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Tell the build Up play passing class for \"FC Lorient\" on 2010/2/22.",
    "gold_sql": "select t2.buildupplaypassingclass from team as t1 inner join team_attributes as t2 on t1.team_api_id = t2.team_api_id where t1.team_long_name = 'fc lorient' and t2.`date` like '2010-02-22%'",
    "pred_sql": "select ta.buildupplaypassingclass from team t join team_attributes ta on t.team_api_id = ta.team_api_id join match m on t.team_api_id = m.home_team_api_id where t.team_short_name = 'fc lorient' and m.date = '2010-02-22'"
  },
  {
    "id": 161,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "For the team \"Hannover 96\", what was its defence aggression class on 2015/9/10?",
    "gold_sql": "select t2.defenceaggressionclass from team as t1 inner join team_attributes as t2 on t1.team_api_id = t2.team_api_id where t1.team_long_name = 'hannover 96' and t2.`date` like '2015-09-10%'",
    "pred_sql": "select ta.buildupplayspeedclass, ta.buildupplaydribblingclass, ta.buildupplaypassingclass, ta.buildupplaypositioningclass, ta.chancecreationpassingclass, ta.chancecreationcrossingclass, ta.chancecreationshootingclass, ta.chancecreationpositioningclass, ta.defencepressureclass, ta.defenceaggressionclass,"
  },
  {
    "id": 162,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21?",
    "gold_sql": "select cast(sum(t2.overall_rating) as real) / count(t2.id) from player as t1 inner join player_attributes as t2 on t1.player_fifa_api_id = t2.player_fifa_api_id where t1.player_name = 'marko arnautovic' and substr(t2.`date`, 1, 10) between '2007-02-22' and '2016-04-21'",
    "pred_sql": "with player_attributes as ( select player_fifa_api_id, avg(overall_rating) as avg_overall_rating from player_attributes where date between '2007-02-22' and '2016-04-21' group by player_fifa_api_id ) select avg_overall_rating from player_attributes where player_fifa_api_id in ( select player_fifa_api_id from player where player_name = 'marko arn"
  },
  {
    "id": 163,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12?",
    "gold_sql": "select (sum(case when t1.player_name = 'landon donovan' then t2.overall_rating else 0 end) * 1.0 - sum(case when t1.player_name = 'jordan bowery' then t2.overall_rating else 0 end)) * 100 / sum(case when t1.player_name = 'landon donovan' then t2.overall_rating else 0 end) lvsj_percent from player as t1 inner join player_attributes as t2 on t1.player_fifa_api_id = t2.player_fifa_api_id where substr(t2.`date`, 1, 10) = '2013-07-12'",
    "pred_sql": "with player_attributes as ( select player_api_id, overall_rating from player_attributes where date = '2013-07-12' ) select (select overall_rating from player_attributes where player_api_id = (select player_api_id from player where player_name = 'landon donovan')) - (select overall_rating from player_attributes where player_api_id = (select player_api_id from player where player_name = 'jordan bowery')) / (select overall_rating"
  },
  {
    "id": 164,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "List down most tallest players' name.",
    "gold_sql": "select player_name from (select player_name, height, dense_rank() over (order by height desc) as rank from player) where rank = 1",
    "pred_sql": "select p.player_name from player p join (select player_api_id, max(height) as max_height from player group by player_api_id) as max_heights on p.player_api_id = max_heights.player_api_id where p.height = max_heights.max_height"
  },
  {
    "id": 165,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "State the name of the most strongest player.",
    "gold_sql": "select distinct t1.player_name from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t2.overall_rating = (select max(overall_rating) from player_attributes)",
    "pred_sql": "with player_attributes as ( select player_fifa_api_id, avg(overall_rating) as average_rating from player_attributes group by player_fifa_api_id ) select player_fifa_api_id from player_attributes order by average_rating desc limit 1"
  },
  {
    "id": 166,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Who are the players that tend to be attacking when their mates were doing attack moves? List down their name.",
    "gold_sql": "select distinct t1.player_name from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t2.attacking_work_rate = 'high'",
    "pred_sql": "select distinct p.player_name from player_attributes pa join player p on pa.player_fifa_api_id = p.player_fifa_api_id where pa.buildupplaydribbling > 50 and pa.buildupplaypassing > 50 and pa.buildupplaypositioning > 50"
  },
  {
    "id": 167,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "What are the short name of team who played safe while creating chance of passing?",
    "gold_sql": "select distinct t1.team_short_name from team as t1 inner join team_attributes as t2 on t1.team_api_id = t2.team_api_id where t2.chancecreationpassingclass = 'safe'",
    "pred_sql": "select distinct t.team_short_name from team_attributes ta join team t on ta.team_fifa_api_id = t.team_fifa_api_id where ta.buildupplaypassing > 50 and ta.buildupplaypassingclass = 'organised'"
  },
  {
    "id": 168,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "How many football players born after the 1990s have the first name \"Aaron\"?",
    "gold_sql": "select count(id) from player where birthday > '1990' and player_name like 'aaron%'",
    "pred_sql": "select count(*) from player where birthday > '1990-01-01' and player_name = 'aaron'"
  },
  {
    "id": 169,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "What is the difference between players 6 and 23's jumping scores?",
    "gold_sql": "select sum(case when t1.id = 6 then t1.jumping else 0 end) - sum(case when t1.id = 23 then t1.jumping else 0 end) from player_attributes as t1",
    "pred_sql": "select (select ball_control from player_attributes where id = (select id from player where player_api_id = 218353)) - (select ball_control from player_attributes where id = (select id from player where player_api_id = 162549))"
  },
  {
    "id": 170,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Please provide top four football players' IDs who are among the lowest potential players and prefer to use the right foot when attacking.",
    "gold_sql": "select id from player_attributes where preferred_foot = 'right' order by potential asc limit 4",
    "pred_sql": "with lowest_potential_players as ( select player_api_id, overall_rating, preferred_foot from player_attributes where overall_rating = (select min(overall_rating) from player_attributes) and preferred_foot = 'right' ) select player_api_id from lowest_potential_players order by overall_rating limit 4"
  },
  {
    "id": 171,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "How many players had the highest potential score for crossing that preferred to use their left foots while attacking?",
    "gold_sql": "select count(t1.id) from player_attributes as t1 where t1.preferred_foot = 'left' and t1.crossing = ( select max(crossing) from player_attributes)",
    "pred_sql": "select count(*) from player_attributes where preferred_foot = 'left' and potential = (select max(potential) from player_attributes where preferred_foot = 'left') and preferred_foot = 'left' and attacking_work_rate = 'high'"
  },
  {
    "id": 172,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "What was the final score for the match on September 24, 2008, in the Belgian Jupiler League between the home team and the away team?",
    "gold_sql": "select t2.home_team_goal, t2.away_team_goal from league as t1 inner join match as t2 on t1.id = t2.league_id where t1.name = 'belgium jupiler league' and t2.`date` like '2008-09-24%'",
    "pred_sql": "select home_team_goal, away_team_goal from match where country_id = (select id from country where name = 'belgium') and league_id = (select id from league where name = 'jupiler league') and date = '2008-09-24'"
  },
  {
    "id": 173,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Does the KSV Cercle Brugge team have a slow, balanced or fast speed class?",
    "gold_sql": "select distinct t1.buildupplayspeedclass from team_attributes as t1 inner join team as t2 on t1.team_api_id = t2.team_api_id where t2.team_long_name = 'ksv cercle brugge'",
    "pred_sql": "select * from team_attributes where team_fifa_api_id = (select team_fifa_api_id from team where team_api_id = (select home_team_api_id from match where home_team_api_id = 9987)) and buildupplayspeedclass in ('slow', 'balanced', 'fast')"
  },
  {
    "id": 174,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "Please state the finishing rate and curve score of the player who has the heaviest weight.",
    "gold_sql": "select id, finishing, curve from player_attributes where player_api_id = ( select player_api_id from player order by weight desc limit 1 ) limit 1",
    "pred_sql": "with player_weights as ( select player_api_id, weight from player ) select avg(case when weight = (select max(weight) from player_weights) then overall_rating else null end) as finishing_rate, avg(case when weight = (select max(weight) from player_weights) then potential else null end) as curve_score from player_attributes where player_api_id in ( select player_api_id from player_weights )"
  },
  {
    "id": 175,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "Which top 4 leagues had the most games in the 2015-2016 season?",
    "gold_sql": "select t1.name from league as t1 inner join match as t2 on t1.id = t2.league_id where t2.season = '2015/2016' group by t1.name order by count(t2.id) desc limit 4",
    "pred_sql": "select l.name, count(*) as num_games from match m join league l on m.league_id = l.id where m.season = '2015/2016' group by l.name order by num_games desc limit 4"
  },
  {
    "id": 176,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Please provide the full name of the away team that scored the most goals.",
    "gold_sql": "select t2.team_long_name from match as t1 inner join team as t2 on t1.away_team_api_id = t2.team_api_id order by t1.away_team_goal desc limit 1",
    "pred_sql": "select (select team_short_name from team where team_api_id = (select away_team_api_id from match where away_team_goal = (select max(away_team_goal) from match))) as away_team_name"
  },
  {
    "id": 177,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "Please name one player whose overall strength is the greatest.",
    "gold_sql": "select distinct t1.player_name from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t2.overall_rating = ( select max(overall_rating) from player_attributes)",
    "pred_sql": "select * from player_attributes where overall_rating = (select max(overall_rating) from player_attributes)"
  },
  {
    "id": 178,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "What is the percentage of players that are under 180 cm who have an overall strength of more than 70?",
    "gold_sql": "select cast(count(case when t2.overall_rating > 70 and t1.height < 180 then t1.id else null end) as real) * 100 / count(t1.id) percent from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id",
    "pred_sql": "select (select count(*) from player p join player_attributes pa on p.player_api_id = pa.player_fifa_api_id where p.height < 180 and pa.overall_rating > 70) / (select count(*) from player p where p.height < 180) * 100 as percentage"
  },
  {
    "id": 179,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "Please list the reference names of the drivers who are eliminated in the first period in race number 20.",
    "gold_sql": "select t2.driverref from qualifying as t1 inner join drivers as t2 on t2.driverid = t1.driverid where t1.raceid = 20 order by t1.q1 desc limit 5",
    "pred_sql": "select d.driverref from results r join drivers d on r.driverid = d.driverid where r.raceid = 20 and r.position > 10"
  },
  {
    "id": 180,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "What is the surname of the driver with the best lap time in race number 19 in the second qualifying period?",
    "gold_sql": "select t2.surname from qualifying as t1 inner join drivers as t2 on t2.driverid = t1.driverid where t1.raceid = 19 order by t1.q2 asc limit 1",
    "pred_sql": "select surname from drivers where driverid in (select driverid from qualifying where raceid = 19 and position = 1 and q2 is not null) order by laptimes.milliseconds limit 1"
  },
  {
    "id": 181,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "Please give the name of the race held on the circuits in Germany.",
    "gold_sql": "select distinct t2.name from circuits as t1 inner join races as t2 on t2.circuitid = t1.circuitid where t1.country = 'germany'",
    "pred_sql": "select r.name from races r join circuits c on r.circuitid = c.circuitid where c.country = 'germany'"
  },
  {
    "id": 182,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "What is the coordinates location of the circuits for Australian grand prix?",
    "gold_sql": "select distinct t1.lat, t1.lng from circuits as t1 inner join races as t2 on t2.circuitid = t1.circuitid where t2.name = 'australian grand prix'",
    "pred_sql": "select c.lat, c.lng from circuits c where c.name like '%australian grand prix%'"
  },
  {
    "id": 183,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "Give the coordinate position for Abu Dhabi Grand Prix.",
    "gold_sql": "select distinct t1.lat, t1.lng from circuits as t1 inner join races as t2 on t2.circuitid = t1.circuitid where t2.name = 'abu dhabi grand prix'",
    "pred_sql": "select lat, lng from circuits where name = 'abu dhabi'"
  },
  {
    "id": 184,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "What's Bruno Senna's Q1 result in the qualifying race No. 354?",
    "gold_sql": "select t1.q1 from qualifying as t1 inner join drivers as t2 on t2.driverid = t1.driverid where t1.raceid = 354 and t2.forename = 'bruno' and t2.surname = 'senna'",
    "pred_sql": "select q1 from qualifying where raceid = 354 and driverid = (select driverid from drivers where forename = 'bruno' and surname = 'senna')"
  },
  {
    "id": 185,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "What is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903?",
    "gold_sql": "select t2.number from qualifying as t1 inner join drivers as t2 on t2.driverid = t1.driverid where t1.raceid = 903 and t1.q3 like '1:54%'",
    "pred_sql": "select number from qualifying where raceid = 903 and q3 = '0:01:54'"
  },
  {
    "id": 186,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",
    "gold_sql": "select count(t3.driverid) from races as t1 inner join results as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t1.year = 2007 and t1.name = 'bahrain grand prix' and t2.time is null",
    "pred_sql": "select count(*) from results where raceid = (select raceid from races where name = 'bahrain grand prix' and year = 2007) and positiontext!= 'finished'"
  },
  {
    "id": 187,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "For all the drivers who finished the game in race No. 592, who is the oldest?",
    "gold_sql": "select t1.forename, t1.surname from drivers as t1 inner join results as t2 on t2.driverid = t1.driverid where t2.raceid = 592 and t2.time is not null and t1.dob is not null order by t1.dob asc limit 1",
    "pred_sql": "select d.forename, d.surname, d.dob from drivers d join results r on d.driverid = r.driverid where r.raceid = 592 and r.positiontext = 'finished'"
  },
  {
    "id": 188,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "Who was the player that got the lap time of 0:01:27 in the race No. 161? Show his introduction website.",
    "gold_sql": "select distinct t2.forename, t2.surname, t2.url from laptimes as t1 inner join drivers as t2 on t2.driverid = t1.driverid where t1.raceid = 161 and t1.time like '1:27%'",
    "pred_sql": "select d.url from drivers d join results r on d.driverid = r.driverid join laptimes lt on r.raceid = lt.raceid and r.driverid = lt.driverid where lt.time = '0:01:27' and r.raceid = 161"
  },
  {
    "id": 189,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "Where is Malaysian Grand Prix held? Give the location coordinates.",
    "gold_sql": "select distinct t1.lat, t1.lng from circuits as t1 inner join races as t2 on t2.circuitid = t1.circuitid where t2.name = 'malaysian grand prix'",
    "pred_sql": "select lat, lng from circuits where name = 'sepang international circuit'"
  },
  {
    "id": 190,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "For the constructor which got the highest point in the race No. 9 , what is its introduction website?",
    "gold_sql": "select t2.url from constructorresults as t1 inner join constructors as t2 on t2.constructorid = t1.constructorid where t1.raceid = 9 order by t1.points desc limit 1",
    "pred_sql": "select url from constructors where constructorid in (select constructorid from constructorresults where raceid in (select raceid from races where round in (select round from races where year = (select year from races where raceid in (select raceid from results where points = (select max(points) from results where raceid in (select raceid from constructorresults where constructorid in (select constructorid from constructors where nationality = 'german'))))))) and circuitid in (select circuitid from circuits"
  },
  {
    "id": 191,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?",
    "gold_sql": "select t2.code from qualifying as t1 inner join drivers as t2 on t2.driverid = t1.driverid where t1.raceid = 45 and t1.q3 like '1:33%'",
    "pred_sql": "select d.code from drivers d join qualifying q on d.driverid = q.driverid where q.raceid = 45 and q.q3 = '0:01:33'"
  },
  {
    "id": 192,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "Show me the season page of year when the race No. 901 took place.",
    "gold_sql": "select t2.url from races as t1 inner join seasons as t2 on t2.year = t1.year where t1.raceid = 901",
    "pred_sql": "with seasons as ( select * from seasons where year in ( select year from races where raceid in ( select raceid from races where round = ( select round from races where raceid = 901 ) ) ) ) select * from seasons"
  },
  {
    "id": 193,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "For all the drivers who finished the game in race No. 872, who is the youngest?",
    "gold_sql": "select t1.forename, t1.surname from drivers as t1 inner join results as t2 on t2.driverid = t1.driverid where t2.raceid = 872 and t2.time is not null order by t1.dob desc limit 1",
    "pred_sql": "select d.forename, d.surname, d.dob from drivers d join results r on d.driverid = r.driverid where r.raceid = 872 and r.positiontext = 'finished' order by d.dob asc limit 1"
  },
  {
    "id": 194,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "For the driver who set the fastest lap speed, what is his nationality?",
    "gold_sql": "select t1.nationality from drivers as t1 inner join results as t2 on t2.driverid = t1.driverid order by t2.fastestlapspeed desc limit 1",
    "pred_sql": "select d.nationality from drivers d join results r on d.driverid = r.driverid join status s on r.statusid = s.statusid where r.fastestlapspeed = (select max(fastestlapspeed) from results)"
  },
  {
    "id": 195,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed?",
    "gold_sql": "select (sum(iif(t2.raceid = 853, t2.fastestlapspeed, 0)) - sum(iif(t2.raceid = 854, t2.fastestlapspeed, 0))) * 100 / sum(iif(t2.raceid = 853, t2.fastestlapspeed, 0)) from drivers as t1 inner join results as t2 on t2.driverid = t1.driverid where t1.forename = 'paul' and t1.surname = 'di resta'",
    "pred_sql": "with fastest_laps as ( select raceid, driverid, fastestlapspeed, lag(fastestlapspeed) over (partition by raceid order by driverid) as prev_fastest_lap_speed from results where raceid = 853 ) select 100 * (fastestlapspeed - prev_fastest_lap_speed) / prev_fastest_lap_speed as percent_faster from fastest_laps"
  },
  {
    "id": 196,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "For the drivers who took part in the race in 1983/7/16, what's their race completion rate?",
    "gold_sql": "select cast(count(case when t2.time is not null then t2.driverid end) as real) * 100 / count(t2.driverid) from races as t1 inner join results as t2 on t2.raceid = t1.raceid where t1.date = '1983-07-16'",
    "pred_sql": "with race_participants as ( select d.driverid, d.name, r.date from drivers d join results r on d.driverid = r.driverid where r.raceid in ( select r.raceid from races r where r.date = '1983-07-16' ) ) select name, count(*) as total_laps, sum(case when laps = 1 then 1 else"
  },
  {
    "id": 197,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "List the names of all races that occurred in the earliest recorded year and month.",
    "gold_sql": "select name from races where strftime('%y', date) = ( select strftime('%y', date) from races order by date asc limit 1 ) and strftime('%m', date) = ( select strftime('%m', date) from races order by date asc limit 1 )",
    "pred_sql": "with earliest_race_year as ( select year from seasons order by year limit 1 ) select r.name from races r where r.year = (select * from earliest_race_year)"
  },
  {
    "id": 198,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "State the driver with the most points scored. Find his full name with that points.",
    "gold_sql": "select t3.forename, t3.surname, t2.points from races as t1 inner join driverstandings as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid order by t2.points desc limit 1",
    "pred_sql": "select d.forename, d.surname, sum(r.points) as total_points from results r join drivers d on r.driverid = d.driverid group by d.driverid, d.forename, d.surname order by total_points desc limit 1"
  },
  {
    "id": 199,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "What is the best lap time recorded? List the driver and race with such recorded lap time.",
    "gold_sql": "select t2.milliseconds, t1.forename, t1.surname, t3.name from drivers as t1 inner join laptimes as t2 on t1.driverid = t2.driverid inner join races as t3 on t2.raceid = t3.raceid order by t2.milliseconds asc limit 1",
    "pred_sql": "with best_lap as ( select raceid, driverid, min(milliseconds) as best_lap_time from laptimes group by raceid, driverid ) select d.forename, d.surname, r.name, bl.best_lap_time from best_lap bl join drivers d on bl.driverid = d.driverid join races r on bl.raceid = r.raceid order by bl.best_lap_time asc limit 1"
  },
  {
    "id": 200,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "What is the average lap time for Lewis Hamilton in the 2009 Malaysian Grand Prix?",
    "gold_sql": "select avg(t2.milliseconds) from races as t1 inner join laptimes as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t3.forename = 'lewis' and t3.surname = 'hamilton' and t1.year = 2009 and t1.name = 'malaysian grand prix'",
    "pred_sql": "select avg(milliseconds) from laptimes where raceid = (select raceid from races where year = 2009 and name = 'malaysian grand prix') and driverid = (select driverid from drivers where driverref = 'hamilton')"
  },
  {
    "id": 201,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010.",
    "gold_sql": "select cast(count(case when t2.position <> 1 then t2.position end) as real) * 100 / count(t2.driverstandingsid) from races as t1 inner join driverstandings as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t3.surname = 'hamilton' and t1.year >= 2010",
    "pred_sql": "with circuit_data as ( select c.circuitid, c.name, r.year, r.date, r.time, r.url from circuits c join races r on c.circuitid = r.circuitid where r.year >= 2010 ), hamilton_results as ( select r.circuitid, r.year,"
  },
  {
    "id": 202,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "Name the driver with the most winning. Mention his nationality and what is his maximum point scores.",
    "gold_sql": "select t1.forename, t1.surname, t1.nationality, max(t2.points) from drivers as t1 inner join driverstandings as t2 on t2.driverid = t1.driverid where t2.wins >= 1 group by t1.forename, t1.surname, t1.nationality order by count(t2.wins) desc limit 1",
    "pred_sql": "with winning_drivers as ( select d.driverid, d.forename, d.surname, count(r.wins) as wins from drivers d join results r on d.driverid = r.driverid group by d.driverid, d.forename, d.surname order by wins desc ) select * from winning_drivers where wins = (select max(wins) from winning_drivers) limit 1;"
  },
  {
    "id": 203,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "How old is the youngest Japanese driver? What is his name?",
    "gold_sql": "select strftime('%y', current_timestamp) - strftime('%y', dob), forename , surname from drivers where nationality = 'japanese' order by dob desc limit 1",
    "pred_sql": "select min(dob) as youngest_dob, forename, surname from drivers where nationality = 'japanese'"
  },
  {
    "id": 204,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "Name the races along with its circuit name and location for f1 races hosted in September 2005.",
    "gold_sql": "select distinct t2.name, t1.name, t1.location from circuits as t1 inner join races as t2 on t2.circuitid = t1.circuitid where t2.year = 2005 and strftime('%m', t2.date) = '09'",
    "pred_sql": "with race_data as ( select r.year, r.name, c.name as circuit_name, c.location from races r join circuits c on r.circuitid = c.circuitid where r.date like '2005-09-%' ) select * from race_data"
  },
  {
    "id": 205,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "Which race was Alex Yoong in when he was in track number less than 20?",
    "gold_sql": "select t1.name from races as t1 inner join driverstandings as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t3.forename = 'alex' and t3.surname = 'yoong' and t2.position < 20",
    "pred_sql": "select r.year, r.name, d.driverref, d.number, r.date, r.time, r.url from races r join drivers d on r.driverid = d.driverid where d.driverref = 'yoong' and d.number < 20"
  },
  {
    "id": 206,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "State the race and year of race in which Michael Schumacher had his fastest lap.",
    "gold_sql": "select t1.name, t1.year from races as t1 inner join laptimes as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t3.forename = 'michael' and t3.surname = 'schumacher' order by t2.milliseconds asc limit 1",
    "pred_sql": "with fastest_lap as ( select r.year, r.name, d.driverref, d.forename, d.surname, l.time, l.milliseconds from results r join drivers d on r.driverid = d.driverid join laptimes l on r.raceid = l.raceid and r.driverid = l.driverid and l.lap = (select max(lap) from laptimes where raceid = r.raceid and driverid = r"
  },
  {
    "id": 207,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "Which was Lewis Hamilton first race? What was his points recorded for his first race event?",
    "gold_sql": "select t1.name, t2.points from races as t1 inner join driverstandings as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t3.forename = 'lewis' and t3.surname = 'hamilton' order by t1.year asc limit 1",
    "pred_sql": "select * from results where driverref = 'hamilton' order by raceid limit 1"
  },
  {
    "id": 208,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "Among all European Grand Prix races, what is the percentage of the races were hosted in Germany?",
    "gold_sql": "select cast(count(case when t1.country = 'germany' then t2.circuitid end) as real) * 100 / count(t2.circuitid) from circuits as t1 inner join races as t2 on t2.circuitid = t1.circuitid where t2.name = 'european grand prix'",
    "pred_sql": "with european_grand_prix as ( select r.circuitid, c.name from races r join circuits c on r.circuitid = c.circuitid where c.country = 'germany' ) select count(*) / (select count(*) from european_grand_prix) * 100 as percentage"
  },
  {
    "id": 209,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "What's the location coordinates of Silverstone Circuit?",
    "gold_sql": "select lat, lng from circuits where name = 'silverstone circuit'",
    "pred_sql": "select lat, lng from circuits where name = 'silverstone'"
  },
  {
    "id": 210,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "What's the reference name of Marina Bay Street Circuit?",
    "gold_sql": "select circuitref from circuits where name = 'marina bay street circuit'",
    "pred_sql": "select url from circuits where name = 'marina bay street circuit'"
  },
  {
    "id": 211,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "Which country is the oldest driver from?",
    "gold_sql": "select nationality from drivers where dob is not null order by dob asc limit 1",
    "pred_sql": "select nationality from drivers where dob = (select min(dob) from drivers)"
  },
  {
    "id": 212,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "Which driver ranked the first in the Canadian Grand Prix in 2007? Please give his reference name.",
    "gold_sql": "select t3.forename, t3.surname, t3.driverref from races as t1 inner join results as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t1.name = 'canadian grand prix' and t2.rank = 1 and t1.year = 2007",
    "pred_sql": "select d.driverref from results r join drivers d on r.driverid = d.driverid where r.raceid in (select raceid from races where name like '%canadian grand prix%' and year = 2007) order by r.position limit 1"
  },
  {
    "id": 213,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "In which Formula_1 race did Lewis Hamilton rank the highest?",
    "gold_sql": "select name from races where raceid in ( select raceid from results where rank = 1 and driverid = ( select driverid from drivers where forename = 'lewis' and surname = 'hamilton' ) )",
    "pred_sql": "with ranked_results as ( select *, row_number() over (partition by raceid, driverid order by position) as rank from results ) select raceid from ranked_results where driverid = (select driverid from drivers where forename = 'lewis' and surname = 'hamilton') and rank = 1"
  },
  {
    "id": 214,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "What was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix?",
    "gold_sql": "select t2.fastestlapspeed from races as t1 inner join results as t2 on t2.raceid = t1.raceid where t1.name = 'spanish grand prix' and t1.year = 2009 and t2.fastestlapspeed is not null order by t2.fastestlapspeed desc limit 1",
    "pred_sql": "with fastest_lap as ( select driverid, max(milliseconds) as fastest_lap_time, (select lat from circuits where circuitid = race.circuitid) as lat, (select lng from circuits where circuitid = race.circuitid) as lng from laptimes join races on laptimes.raceid = races.raceid where race.year = 2009 and race.name = 'spanish grand prix' group by driverid"
  },
  {
    "id": 215,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "What was Lewis Hamilton's final rank in the 2008 Chinese Grand Prix?",
    "gold_sql": "select t2.positionorder from races as t1 inner join results as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t3.forename = 'lewis' and t3.surname = 'hamilton' and t1.name = 'chinese grand prix' and t1.year = 2008",
    "pred_sql": "select position from results where raceid in (select raceid from races where name like '%chinese grand prix%' and year = 2009) and driverid = (select driverid from drivers where forename = 'lewis' and surname = 'hamilton')"
  },
  {
    "id": 216,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "What's the finish time for the driver who ranked second in 2008's AustChineseralian Grand Prix?",
    "gold_sql": "select t1.time from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t1.rank = 2 and t2.name = 'chinese grand prix' and t2.year = 2008",
    "pred_sql": "with race as ( select * from races where name like '%chinese grand prix%' and year = 2009 ) select time from results where raceid in (select raceid from race) and position = 2"
  },
  {
    "id": 217,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "Among the drivers that finished the race in the 2008 Chinese Grand Prix, how many of them have participated in Formula_1 races?",
    "gold_sql": "select count(*) from ( select t1.driverid from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t2.name = 'chinese grand prix' and t2.year = 2008 and t1.time is not null group by t1.driverid having count(t2.raceid) > 0 )",
    "pred_sql": "select count(*) from results where raceid = (select raceid from races where name = 'chinese grand prix' and year = 2008) and position > 0"
  },
  {
    "id": 218,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix?",
    "gold_sql": "with time_in_seconds as ( select t1.positionorder, case when t1.positionorder = 1 then (cast(substr(t1.time, 1, 1) as real) * 3600) + (cast(substr(t1.time, 3, 2) as real) * 60) + cast(substr(t1.time, 6) as real) else cast(substr(t1.time, 2) as real) end as time_seconds from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t2.name = 'australian grand prix' and t1.time is not null and t2.year = 2008 ), champion_time as ( select time_seconds from time_in_seconds where positionorder = 1), last_driver_incremental as ( select time_seconds from time_in_seconds where positionorder = (select max(positionorder) from time_in_seconds) ) select (cast((select time_seconds from last_driver_incremental) as real) * 100) / (select time_seconds + (select time_seconds from last_driver_incremental) from champion_time)",
    "pred_sql": "with champion as ( select d.driverid, d.forename, d.surname, r.points from results r join drivers d on r.driverid = d.driverid where r.raceid = (select raceid from races where year = 2008 and name = 'australian grand prix') order by r.points desc limit 1 ), lastdriver as ( select d.driverid, d.forename, d.surname, r.points"
  },
  {
    "id": 219,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "How many circuits are there in Adelaide, Australia?",
    "gold_sql": "select count(circuitid) from circuits where location = 'adelaide' and country = 'australia'",
    "pred_sql": "select count(*) from circuits where location like '%adelaide%' and country='australia'"
  },
  {
    "id": 220,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "What are the maximum points of British constructors?",
    "gold_sql": "select max(t1.points) from constructorstandings as t1 inner join constructors as t2 on t1.constructorid = t2.constructorid where t2.nationality = 'british'",
    "pred_sql": "select max(points) from constructorresults cr join constructors c on cr.constructorid = c.constructorid where c.nationality = 'british'"
  },
  {
    "id": 221,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "Please list the constructor names with 0 points at race 291.",
    "gold_sql": "select t2.name from constructorstandings as t1 inner join constructors as t2 on t1.constructorid = t2.constructorid where t1.points = 0 and t1.raceid = 291",
    "pred_sql": "select c.name from constructors c join constructorresults cr on c.constructorid = cr.constructorid where cr.raceid = 291 and cr.points = 0"
  },
  {
    "id": 222,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "How many Japanese constructors have 0 points in 2 races?",
    "gold_sql": "select count(t1.raceid) from constructorstandings as t1 inner join constructors as t2 on t1.constructorid = t2.constructorid where t1.points = 0 and t2.nationality = 'japanese' group by t1.constructorid having count(raceid) = 2",
    "pred_sql": "select count(*) from constructors c join constructorresults cr on c.constructorid = cr.constructorid where c.nationality = 'japanese' and cr.points = 0 and cr.raceid in (select raceid from races where year = 2009)"
  },
  {
    "id": 223,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "Please calculate the race completion percentage of Japanese drivers from 2007 to 2009.",
    "gold_sql": "select cast(sum(iif(t1.time is not null, 1, 0)) as real) * 100 / count(t1.raceid) from results as t1 inner join races as t2 on t1.raceid = t2.raceid inner join drivers as t3 on t1.driverid = t3.driverid where t3.nationality = 'japanese' and t2.year between 2007 and 2009",
    "pred_sql": "with japanese_drivers as ( select d.driverid, d.forename, d.surname, r.year from drivers d join constructors c on d.constructorid = c.constructorid join constructors_results cr on d.driverid = cr.constructorid join races r on cr.raceid = r.raceid where c.nationality = 'japanese' and r.year between 2007 and 2009 ) select (count(*) *"
  },
  {
    "id": 224,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "What is the average time in seconds of champion for each year, before year 1975?",
    "gold_sql": "with time_in_seconds as ( select t2.year, t2.raceid, t1.positionorder, case when t1.positionorder = 1 then (cast(substr(t1.time, 1, 1) as real) * 3600) + (cast(substr(t1.time, 3, 2) as real) * 60) + cast(substr(t1.time, 6,2) as real ) + cast(substr(t1.time, 9) as real)/1000 else 0 end as time_seconds from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t1.time is not null ), champion_time as ( select year, raceid, time_seconds from time_in_seconds where positionorder = 1 ) select year, avg(time_seconds) from champion_time where year < 1975 group by year having avg(time_seconds) is not null",
    "pred_sql": "with champion_results as ( select r.year, d.forename, d.surname, r.time from results r join drivers d on r.driverid = d.driverid join constructorstandings cs on r.raceid = cs.raceid and r.driverid = cs.driverid where cs.position = 1 and r.year < 1975 ) select avg(julianday(r.time) - julianday('1970-01-"
  },
  {
    "id": 225,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "What is the fastest lap number of the champion in 2009?",
    "gold_sql": "select t1.fastestlap from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t2.year = 2009 and t1.time like '_:%:__.___'",
    "pred_sql": "with champion_2009 as ( select d.driverid, d.forename, d.surname, r.year, r.raceid from drivers d join results r on d.driverid = r.driverid join constructorstandings cs on r.driverid = cs.driverid where r.year = 2009 order by cs.points desc limit 1 ) select lr.lap from champion_2009 c join laptimes lr on"
  },
  {
    "id": 226,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "What is the average of fastest lap speed in the 2009 Spanish Grand Prix race?",
    "gold_sql": "select avg(t1.fastestlapspeed) from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t2.year = 2009 and t2.name = 'spanish grand prix'",
    "pred_sql": "select avg(fastestlapspeed) from results where raceid in (select raceid from races where year = 2009 and name = 'spanish grand prix')"
  },
  {
    "id": 227,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50?",
    "gold_sql": "select cast(sum(iif(strftime('%y', t3.dob) < '1985' and t1.laps > 50, 1, 0)) as real) * 100 / count(*) from results as t1 inner join races as t2 on t1.raceid = t2.raceid inner join drivers as t3 on t1.driverid = t3.driverid where t2.year between 2000 and 2005",
    "pred_sql": "with drivers_before_1985 as ( select driverid, dob from drivers where extract(year from dob) < 1985 ) select count(*) * 100.0 / (select count(*) from drivers_before_1985) as percentage from drivers_before_1985 join results on drivers_before_1985.driverid = results.driverid where laps > 50"
  },
  {
    "id": 228,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "How many French drivers who obtain the laptime less than 02:00.00?",
    "gold_sql": "select count(t1.driverid) from drivers as t1 inner join laptimes as t2 on t1.driverid = t2.driverid where t1.nationality = 'french' and (cast(substr(t2.time, 1, 2) as integer) * 60 + cast(substr(t2.time, 4, 2) as integer) + cast(substr(t2.time, 7, 2) as real) / 1000) < 120",
    "pred_sql": "select count(*) from drivers join laptimes on drivers.driverid = laptimes.driverid where drivers.nationality = 'french' and laptimes.time < '02:00:00'"
  },
  {
    "id": 229,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "List out the code for drivers who have nationality in American.",
    "gold_sql": "select code from drivers where nationality = 'american'",
    "pred_sql": "select * from drivers where nationality = 'american'"
  },
  {
    "id": 230,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?",
    "gold_sql": "select count(*) from ( select t1.nationality from drivers as t1 order by julianday(t1.dob) desc limit 3) as t3 where t3.nationality = 'dutch'",
    "pred_sql": "with youngest_drivers as ( select d.driverid, d.dob, d.forename, d.surname, d.nationality from drivers d order by d.dob desc limit 3 ) select count(*) from youngest_drivers where nationality = 'netherlands'"
  },
  {
    "id": 231,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "Please state the reference name of the oldest German driver.",
    "gold_sql": "select driverref from drivers where nationality = 'german' order by julianday(dob) asc limit 1",
    "pred_sql": "select c.name from constructors c join drivers d on c.constructorid = d.constructorid where d.nationality = 'german' order by d.dob limit 1"
  },
  {
    "id": 232,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "Which drivers who were born in 1971 and has the fastest lap time on the race? Give id and code of these drivers.",
    "gold_sql": "select t2.driverid, t2.code from results as t1 inner join drivers as t2 on t1.driverid = t2.driverid where strftime('%y', t2.dob) = '1971' and t1.fastestlaptime is not null",
    "pred_sql": "select d.driverid, d.code from drivers d join results r on d.driverid = r.driverid where d.dob like '1971-%' and r.fastestlap is not null order by r.fastestlaptime asc"
  },
  {
    "id": 233,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "From race no. 50 to 100, how many finishers have been disqualified?",
    "gold_sql": "select sum(iif(time is not null, 1, 0)) from results where statusid = 2 and raceid < 100 and raceid > 50",
    "pred_sql": "with disqualified_finishers as ( select count(*) as disqualified_finishers from results where raceid between 50 and 100 and positiontext = 'disqualified' ) select * from disqualified_finishers"
  },
  {
    "id": 234,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "How many times the circuits were held in Austria? Please give their location and coordinates.",
    "gold_sql": "select distinct location, lat, lng from circuits where country = 'austria'",
    "pred_sql": "with circuit_locations as ( select c.circuitid, c.name, c.location, c.lat, c.lng from circuits c ) select c.name, c.location, c.lat, c.lng from circuit_locations c where c.name like '%austria%' or c.location like '%austria%'"
  },
  {
    "id": 235,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "On what year did the youngest driver had his first qualifying race? Also state the name, date and time of the race.",
    "gold_sql": "select t3.year, t3.name, t3.date, t3.time from qualifying as t1 inner join drivers as t2 on t1.driverid = t2.driverid inner join races as t3 on t1.raceid = t3.raceid where t1.driverid = ( select driverid from drivers order by dob desc limit 1 ) order by t3.date asc limit 1",
    "pred_sql": "with youngest_driver as ( select min(dob) as youngest_dob, driverid from drivers group by driverid ) select s.year, r.name, r.date, r.time from seasons s join races r on s.year = r.year join results res on r.raceid = res.raceid join drivers d on res.driverid = d.driverid join youngest_driver"
  },
  {
    "id": 236,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985.",
    "gold_sql": "select t2.forename, t2.surname from pitstops as t1 inner join drivers as t2 on t1.driverid = t2.driverid where t2.nationality = 'german' and strftime('%y', t2.dob) between '1980' and '1985' group by t2.forename, t2.surname order by avg(t1.duration) limit 3",
    "pred_sql": "with german_drivers as ( select d.driverid, d.forename, d.surname, avg(p.duration) as avg_pit_stop_duration from drivers d join pitstops p on d.driverid = p.driverid where d.nationality = 'german' and d.dob between '1980-01-01' and '1985-12-31' group by d.driverid, d.forename, d.surname order by avg"
  },
  {
    "id": 237,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "Who is the champion of the Canadian Grand Prix in 2008? Indicate his finish time.",
    "gold_sql": "select t1.time from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t2.name = 'canadian grand prix' and t2.year = 2008 and t1.time like '_:%:__.___'",
    "pred_sql": "with champion as ( select d.driverref, r.time from results r join drivers d on r.driverid = d.driverid where r.raceid in ( select r2.raceid from races r2 where r2.name like '%canadian grand prix%' and r2.year = 2008 ) order by r.position limit 1 ) select * from champion"
  },
  {
    "id": 238,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "What is the constructor reference name of the champion in the 2009 Singapore Grand Prix? Please give its website.",
    "gold_sql": "select t3.constructorref, t3.url from results as t1 inner join races as t2 on t1.raceid = t2.raceid inner join constructors as t3 on t1.constructorid = t3.constructorid where t2.name = 'singapore grand prix' and t2.year = 2009 and t1.time like '_:%:__.___'",
    "pred_sql": "select c.constructorref, c.url from constructors c join constructorstandings cs on c.constructorid = cs.constructorid join races r on cs.raceid = r.raceid where r.year = 2009 and r.name = 'singapore grand prix' order by cs.points desc limit 1"
  },
  {
    "id": 239,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "Please list all the superpowers of 3-D Man.",
    "gold_sql": "select t3.power_name from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id where t1.superhero_name = '3-d man'",
    "pred_sql": "select power_name from superpower join hero_power on superpower.id = hero_power.power_id where hero_id = (select id from superhero where superhero_name = '3-d man')"
  },
  {
    "id": 240,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team.",
    "gold_sql": "select sum(t1.points), t2.name, t2.nationality from constructorresults as t1 inner join constructors as t2 on t1.constructorid = t2.constructorid inner join races as t3 on t3.raceid = t1.raceid where t3.name = 'monaco grand prix' and t3.year between 1980 and 2010 group by t2.name order by sum(t1.points) desc limit 1",
    "pred_sql": "with monaco_gp as ( select r.year, c.name, c.nationality, sum(cr.points) as total_points from races r join circuits c on r.circuitid = c.circuitid join constructorresults cr on r.raceid = cr.raceid where r.name like '%monaco grand prix%' and r.year between 1980 and 2010 group by r.year, c.name, c.nationality )"
  },
  {
    "id": 241,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "What is full name of the racer who ranked 1st in the 3rd qualifying race held in the Marina Bay Street Circuit in 2008?",
    "gold_sql": "select t2.forename, t2.surname from qualifying as t1 inner join drivers as t2 on t1.driverid = t2.driverid inner join races as t3 on t1.raceid = t3.raceid where q3 is not null and t3.year = 2008 and t3.circuitid in ( select circuitid from circuits where name = 'marina bay street circuit' ) order by cast(substr(q3, 1, instr(q3, ':') - 1) as integer) * 60 + cast(substr(q3, instr(q3, ':') + 1, instr(q3, '.') - instr(q3, ':') - 1) as real) + cast(substr(q3, instr(q3, '.') + 1) as real) / 1000 asc limit 1",
    "pred_sql": "select d.forename, d.surname from qualifying q join drivers d on q.driverid = d.driverid where q.raceid = (select r.raceid from races r where r.year = 2008 and r.circuitid = (select c.circuitid from circuits c where c.name = 'marina bay street circuit')) and q.position = 1 and q.number = 3"
  },
  {
    "id": 242,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "As of the present, what is the full name of the youngest racer? Indicate her nationality and the name of the race to which he/she first joined.",
    "gold_sql": "select t1.forename, t1.surname, t1.nationality, t3.name from drivers as t1 inner join driverstandings as t2 on t1.driverid = t2.driverid inner join races as t3 on t2.raceid = t3.raceid order by julianday(t1.dob) desc limit 1",
    "pred_sql": "select d.forename, d.surname, d.nationality, r.name from drivers d join results r on d.driverid = r.driverid where d.dob = (select max(dob) from drivers)"
  },
  {
    "id": 243,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "How many accidents did the driver who had the highest number accidents in the Canadian Grand Prix have?",
    "gold_sql": "select count(t1.driverid) from results as t1 inner join races as t2 on t1.raceid = t2.raceid inner join status as t3 on t1.statusid = t3.statusid where t3.statusid = 3 and t2.name = 'canadian grand prix' group by t1.driverid order by count(t1.driverid) desc limit 1",
    "pred_sql": "with accidents as ( select d.driverid, count(*) as accidents from pitstops ps join drivers d on ps.driverid = d.driverid where ps.raceid in ( select r.raceid from races r where r.circuitid in ( select c.circuitid from circuits c where c.name = 'canadian grand prix' ) ) group by d.driverid ) select count(*)"
  },
  {
    "id": 244,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "Which top 20 driver created the shortest lap time ever record in a Formula_1 race? Please give them full names.",
    "gold_sql": "with lap_times_in_seconds as (select driverid, (case when substr(time, 1, instr(time, ':') - 1) <> '' then cast(substr(time, 1, instr(time, ':') - 1) as real) * 60 else 0 end + case when substr(time, instr(time, ':') + 1, instr(time, '.') - instr(time, ':') - 1) <> '' then cast(substr(time, instr(time, ':') + 1, instr(time, '.') - instr(time, ':') - 1) as real) else 0 end + case when substr(time, instr(time, '.') + 1) <> '' then cast(substr(time, instr(time, '.') + 1) as real) / 1000 else 0 end) as time_in_seconds from laptimes) select t2.forename, t2.surname, t1.driverid from (select driverid, min(time_in_seconds) as min_time_in_seconds from lap_times_in_seconds group by driverid) as t1 inner join drivers as t2 on t1.driverid = t2.driverid order by t1.min_time_in_seconds asc limit 20",
    "pred_sql": "with shortest_lap as ( select d.forename, d.surname, r.time, r.milliseconds from drivers d join results r on d.driverid = r.driverid where r.lap = (select min(l.lap) from laptimes l) ) select forename, surname from shortest_lap order by milliseconds limit 1"
  },
  {
    "id": 245,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "Please list the lap records for the circuits in Italy.",
    "gold_sql": "with fastest_lap_times as (select t1.raceid, t1.fastestlaptime, (cast(substr(t1.fastestlaptime, 1, instr(t1.fastestlaptime, ':') - 1) as real) * 60) + (cast(substr(t1.fastestlaptime, instr(t1.fastestlaptime, ':') + 1, instr(t1.fastestlaptime, '.') - instr(t1.fastestlaptime, ':') - 1) as real)) + (cast(substr(t1.fastestlaptime, instr(t1.fastestlaptime, '.') + 1) as real) / 1000) as time_in_seconds from results as t1 where t1.fastestlaptime is not null ) select t1.fastestlaptime as lap_record from results as t1 inner join races as t2 on t1.raceid = t2.raceid inner join circuits as t3 on t2.circuitid = t3.circuitid inner join (select min(fastest_lap_times.time_in_seconds) as min_time_in_seconds from fastest_lap_times inner join races as t2 on fastest_lap_times.raceid = t2.raceid inner join circuits as t3 on t2.circuitid = t3.circuitid where t3.country = 'italy' ) as t4 on (cast(substr(t1.fastestlaptime, 1, instr(t1.fastestlaptime, ':') - 1) as real) * 60) + (cast(substr(t1.fastestlaptime, instr(t1.fastestlaptime, ':') + 1, instr(t1.fastestlaptime, '.') - instr(t1.fastestlaptime, ':') - 1) as real)) + (cast(substr(t1.fastestlaptime, instr(t1.fastestlaptime, '.') + 1) as real) / 1000) = t4.min_time_in_seconds limit 1",
    "pred_sql": "select * from circuits where location like '%italy%' and lat is not null and lng is not null"
  },
  {
    "id": 246,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Among the superheroes with the super power of \"Super Strength\", how many of them have a height of over 200cm?",
    "gold_sql": "select count(t1.id) from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id where t3.power_name = 'super strength' and t1.height_cm > 200",
    "pred_sql": "select count(*) from superhero where superhero_name in (select superhero_name from hero_power hp join superpower sp on hp.power_id = sp.id where sp.power_name = 'super strength') and height_cm > 200"
  },
  {
    "id": 247,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Among the superheroes with blue eyes, how many of them have the super power of \"Agility\"?",
    "gold_sql": "select count(t1.id) from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id inner join colour as t4 on t1.eye_colour_id = t4.id where t3.power_name = 'agility' and t4.colour = 'blue'",
    "pred_sql": "select count(*) from superhero where eye_colour_id = (select id from colour where colour = 'blue') and id in (select hero_id from hero_power where power_id = (select id from superpower where power_name = 'agility'))"
  },
  {
    "id": 248,
    "db_id": "superhero",
    "difficulty": "challenging",
    "question": "Please list the superhero names of all the superheroes that have blue eyes and blond hair.",
    "gold_sql": "select t1.superhero_name from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id inner join colour as t3 on t1.hair_colour_id = t3.id where t2.colour = 'blue' and t3.colour = 'blond'",
    "pred_sql": "select superhero_name from superhero where eye_colour_id = (select id from colour where colour = 'blue') and hair_colour_id = (select id from colour where colour = 'blond')"
  },
  {
    "id": 249,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Rank heroes published by Marvel Comics by their height in descending order.",
    "gold_sql": "select superhero_name, height_cm, rank() over (order by height_cm desc) as heightrank from superhero inner join publisher on superhero.publisher_id = publisher.id where publisher.publisher_name = 'marvel comics'",
    "pred_sql": "with ranked_heroes as ( select s.id, s.superhero_name, s.full_name, s.height_cm, p.publisher_name, row_number() over (order by s.height_cm desc) as rank from superhero s join publisher p on s.publisher_id = p.id where p.publisher_name = 'marvel comics' ) select * from ranked_heroes"
  },
  {
    "id": 250,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.",
    "gold_sql": "select colour.colour as eyecolor, count(superhero.id) as count, rank() over (order by count(superhero.id) desc) as popularityrank from superhero inner join colour on superhero.eye_colour_id = colour.id inner join publisher on superhero.publisher_id = publisher.id where publisher.publisher_name = 'marvel comics' group by colour.colour",
    "pred_sql": "with eye_colour_counts as ( select colour.id, colour.colour, count(*) as count from superhero join colour on superhero.eye_colour_id = colour.id group by colour.id, colour.colour ) select s.superhero_name, e.colour from superhero s join eye_colour_counts e on s.eye_colour_id = e.id order by e.count desc"
  },
  {
    "id": 251,
    "db_id": "superhero",
    "difficulty": "challenging",
    "question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "gold_sql": "select superhero_name from superhero as t1 where exists (select 1 from hero_power as t2 inner join superpower as t3 on t2.power_id = t3.id where t3.power_name = 'super strength' and t1.id = t2.hero_id)and exists (select 1 from publisher as t4 where t4.publisher_name = 'marvel comics' and t1.publisher_id = t4.id)",
    "pred_sql": "select s.superhero_name from superhero s join hero_power hp on s.id = hp.hero_id join superpower sp on hp.power_id = sp.id where sp.power_name = 'super strength' and s.publisher_id = (select id from publisher where publisher_name = 'marvel comics')"
  },
  {
    "id": 252,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Which publisher published the slowest superhero?",
    "gold_sql": "select t2.publisher_name from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id inner join hero_attribute as t3 on t1.id = t3.hero_id inner join attribute as t4 on t3.attribute_id = t4.id where t4.attribute_name = 'speed' order by t3.attribute_value limit 1",
    "pred_sql": "select p.publisher_name from superhero s join publisher p on s.publisher_id = p.id order by s.weight_kg desc limit 1"
  },
  {
    "id": 253,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "How many gold-eyed superheroes did Marvel Comics publish?",
    "gold_sql": "select count(t1.id) from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id inner join colour as t3 on t1.eye_colour_id = t3.id where t2.publisher_name = 'marvel comics' and t3.colour = 'gold'",
    "pred_sql": "select count(*) from superhero where eye_colour_id in (select id from colour where colour = 'gold') and publisher_id in (select id from publisher where publisher_name = 'marvel comics')"
  },
  {
    "id": 254,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Who is the dumbest superhero?",
    "gold_sql": "select t1.superhero_name from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id inner join attribute as t3 on t2.attribute_id = t3.id where t3.attribute_name = 'intelligence' order by t2.attribute_value limit 1",
    "pred_sql": "select s.superhero_name from superhero s where s.alignment_id = (select id from alignment where alignment = 'bad') and s.attribute_id in (select ha.attribute_id from hero_attribute ha where ha.attribute_value = (select min(ha.attribute_value) from hero_attribute ha))"
  },
  {
    "id": 255,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "What is Copycat's race?",
    "gold_sql": "select t2.race from superhero as t1 inner join race as t2 on t1.race_id = t2.id where t1.superhero_name = 'copycat'",
    "pred_sql": "select s.race_id, r.race from superhero s join race r on s.race_id = r.id where s.superhero_name = 'copycat'"
  },
  {
    "id": 256,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "Which superheroes have a durability attribute value of less than 50?",
    "gold_sql": "select superhero_name from superhero as t1 where exists (select 1 from hero_attribute as t2 inner join attribute as t3 on t2.attribute_id = t3.id where t3.attribute_name = 'durability' and t2.attribute_value < 50 and t1.id = t2.hero_id)",
    "pred_sql": "select s.superhero_name from superhero s join hero_attribute ha on s.id = ha.hero_id where ha.attribute_id = (select id from attribute where attribute_name = 'durability') and ha.attribute_value < 50"
  },
  {
    "id": 257,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "What are the names of the superheroes with the power of death touch?",
    "gold_sql": "select t1.superhero_name from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id where t3.power_name = 'death touch'",
    "pred_sql": "select s.superhero_name from superhero s join hero_power hp on s.id = hp.hero_id join superpower sp on hp.power_id = sp.id where sp.power_name = 'death touch'"
  },
  {
    "id": 258,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "How many female superheroes have a strength value of 100?",
    "gold_sql": "select count(t1.id) from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id inner join attribute as t3 on t2.attribute_id = t3.id inner join gender as t4 on t1.gender_id = t4.id where t3.attribute_name = 'strength' and t2.attribute_value = 100 and t4.gender = 'female'",
    "pred_sql": "select count(*) from superhero where gender_id = (select id from gender where gender = 'female') and attribute_id = (select id from attribute where attribute_name = 'strength') and attribute_value = 100"
  },
  {
    "id": 259,
    "db_id": "superhero",
    "difficulty": "challenging",
    "question": "What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics.",
    "gold_sql": "select (cast(count(*) as real) * 100 / (select count(*) from superhero)), cast(sum(case when t2.publisher_name = 'marvel comics' then 1 else 0 end) as real) from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id inner join alignment as t3 on t3.id = t1.alignment_id where t3.alignment = 'bad'",
    "pred_sql": "with self_interest as ( select count(*) as count from superhero where alignment_id in (select id from alignment where alignment = 'good' or alignment = 'bad') ) select round((count / (select count(*) from superhero)) * 100, 2) as percentage from self_interest"
  },
  {
    "id": 260,
    "db_id": "superhero",
    "difficulty": "challenging",
    "question": "Between DC and Marvel Comics, which publisher has published more superheroes? Find the difference in the number of superheroes they have published.",
    "gold_sql": "select sum(case when t2.publisher_name = 'marvel comics' then 1 else 0 end) - sum(case when t2.publisher_name = 'dc comics' then 1 else 0 end) from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id",
    "pred_sql": "select (select count(*) from superhero where publisher_id = (select id from publisher where publisher_name = 'marvel comics')) - (select count(*) from superhero where publisher_id = (select id from publisher where publisher_name = 'dc comics'))"
  },
  {
    "id": 261,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "Give the publisher ID of Star Trek.",
    "gold_sql": "select id from publisher where publisher_name = 'star trek'",
    "pred_sql": "select id from publisher where publisher_name = 'dark horse comics'"
  },
  {
    "id": 262,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "What is the total number of superheroes without full name?",
    "gold_sql": "select count(id) from superhero where full_name is null",
    "pred_sql": "select count(*) from superhero where full_name is null"
  },
  {
    "id": 263,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "What is the average weight of all female superheroes?",
    "gold_sql": "select avg(t1.weight_kg) from superhero as t1 inner join gender as t2 on t1.gender_id = t2.id where t2.gender = 'female'",
    "pred_sql": "select avg(weight_kg) from superhero where gender_id = (select id from gender where gender = 'female')"
  },
  {
    "id": 264,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "List down at least five superpowers of male superheroes.",
    "gold_sql": "select t3.power_name from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t3.id = t2.power_id inner join gender as t4 on t4.id = t1.gender_id where t4.gender = 'male' limit 5",
    "pred_sql": "select s.superhero_name, sp.power_name from superhero s join hero_power hp on s.id = hp.hero_id join superpower sp on hp.power_id = sp.id where s.gender_id = 1"
  },
  {
    "id": 265,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Among the superheroes with height from 170 to 190, list the names of the superheroes with no eye color.",
    "gold_sql": "select distinct t1.superhero_name from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id where t1.height_cm between 170 and 190 and t2.colour = 'no colour'",
    "pred_sql": "select s.superhero_name from superhero s where s.height_cm between 170 and 190 and s.eye_colour_id is null"
  },
  {
    "id": 266,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Provide the hair colour of the human superhero who is 185 cm tall.",
    "gold_sql": "select distinct t3.colour from superhero as t1 inner join race as t2 on t1.race_id = t2.id inner join colour as t3 on t1.hair_colour_id = t3.id where t1.height_cm = 185 and t2.race = 'human'",
    "pred_sql": "select h.hair_colour_id, c.colour from superhero h join colour c on h.hair_colour_id = c.id where h.height_cm = 185 and h.full_name like '%human%'"
  },
  {
    "id": 267,
    "db_id": "superhero",
    "difficulty": "challenging",
    "question": "In superheroes with height between 150 to 180, what is the percentage of heroes published by Marvel Comics?",
    "gold_sql": "select cast(count(case when t2.publisher_name = 'marvel comics' then 1 else null end) as real) * 100 / count(t1.id) from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id where t1.height_cm between 150 and 180",
    "pred_sql": "with heroes as ( select s.id, s.publisher_id, s.height_cm from superhero s where s.height_cm between 150 and 180 ) select count(*) * 100.0 / (select count(*) from heroes) as percentage from heroes where publisher_id in ( select id from publisher where publisher_name like '%marvel%' )"
  },
  {
    "id": 268,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Among the male superheroes, list the super hero names of superheroes with weight greater than the 79% average weight of all superheroes.",
    "gold_sql": "select t1.superhero_name from superhero as t1 inner join gender as t2 on t1.gender_id = t2.id where t2.gender = 'male' and t1.weight_kg * 100 > ( select avg(weight_kg) from superhero ) * 79",
    "pred_sql": "with avg_weight as (select avg(weight_kg) as avg_weight from superhero where gender_id = 1) select superhero_name from superhero where gender_id = 1 and weight_kg > (select avg_weight * 1.79 from avg_weight)"
  },
  {
    "id": 269,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "What are the superpowers of heroes with ID 1?",
    "gold_sql": "select distinct t2.power_name from hero_power as t1 inner join superpower as t2 on t1.power_id = t2.id where t1.hero_id = 1",
    "pred_sql": "select sp.power_name from hero_power hp join superpower sp on hp.power_id = sp.id where hp.hero_id = 1"
  },
  {
    "id": 270,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "How many heroes have stealth power?",
    "gold_sql": "select count(t1.hero_id) from hero_power as t1 inner join superpower as t2 on t1.power_id = t2.id where t2.power_name = 'stealth'",
    "pred_sql": "select count(*) from superhero s join hero_power hp on s.id = hp.hero_id join superpower sp on hp.power_id = sp.id where sp.power_name = 'stealth'"
  },
  {
    "id": 271,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "What is the hero's full name with the highest attribute in strength?",
    "gold_sql": "select t1.full_name from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id inner join attribute as t3 on t2.attribute_id = t3.id where t3.attribute_name = 'strength' order by t2.attribute_value desc limit 1",
    "pred_sql": "select s.full_name, a.attribute_name, ha.attribute_value from superhero s join hero_attribute ha on s.id = ha.hero_id join attribute a on ha.attribute_id = a.id where a.attribute_name = 'strength' order by ha.attribute_value desc limit 1"
  },
  {
    "id": 272,
    "db_id": "superhero",
    "difficulty": "challenging",
    "question": "Which superhero has the most durability published by Dark Horse Comics?",
    "gold_sql": "select t1.superhero_name from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id inner join attribute as t3 on t3.id = t2.attribute_id inner join publisher as t4 on t4.id = t1.publisher_id where t4.publisher_name = 'dark horse comics' and t3.attribute_name = 'durability' order by t2.attribute_value desc limit 1",
    "pred_sql": "select s.superhero_name from superhero s join publisher p on s.publisher_id = p.id where p.publisher_name = 'dark horse comics' order by s.height_cm desc limit 1"
  },
  {
    "id": 273,
    "db_id": "superhero",
    "difficulty": "challenging",
    "question": "List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics.",
    "gold_sql": "select t1.eye_colour_id, t1.hair_colour_id, t1.skin_colour_id from superhero as t1 inner join publisher as t2 on t2.id = t1.publisher_id inner join gender as t3 on t3.id = t1.gender_id where t2.publisher_name = 'dark horse comics' and t3.gender = 'female'",
    "pred_sql": "select s.eye_colour_id, c.colour, s.hair_colour_id, c2.colour, s.skin_colour_id, c3.colour from superhero s join colour c on s.eye_colour_id = c.id join colour c2 on s.hair_colour_id = c2.id join colour c3 on s.skin_colour_id = c3.id join publisher p on s.publisher_id = p.id where s.gender_id = (select id from gender where gender ="
  },
  {
    "id": 274,
    "db_id": "superhero",
    "difficulty": "challenging",
    "question": "Which superhero has the same eyes, hair and skin colour? Indicate the publisher of the superhero.",
    "gold_sql": "select t1.superhero_name, t2.publisher_name from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id where t1.eye_colour_id = t1.hair_colour_id and t1.eye_colour_id = t1.skin_colour_id",
    "pred_sql": "select p.publisher_name from superhero s join colour c on s.eye_colour_id = c.id join colour ch on s.hair_colour_id = ch.id join colour sc on s.skin_colour_id = sc.id where c.id = ch.id and ch.id = sc.id group by p.publisher_name limit 1"
  },
  {
    "id": 275,
    "db_id": "superhero",
    "difficulty": "challenging",
    "question": "What is the percentage of blue female superheroes among all female superheroes?",
    "gold_sql": "select cast(count(case when t3.colour = 'blue' then t1.id else null end) as real) * 100 / count(t1.id) from superhero as t1 inner join gender as t2 on t1.gender_id = t2.id inner join colour as t3 on t1.skin_colour_id = t3.id where t2.gender = 'female'",
    "pred_sql": "select 100.0 * count(case when gender_id = 2 and eye_colour_id = 2 then 1 else null end) / count(case when gender_id = 2 then 1 else null end) as percentage_of_blue_female_superheroes"
  },
  {
    "id": 276,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "How many powers does Amazo hero have?",
    "gold_sql": "select count(t1.power_id) from hero_power as t1 inner join superhero as t2 on t1.hero_id = t2.id where t2.superhero_name = 'amazo'",
    "pred_sql": "select count(*) from hero_power where hero_id in (select id from superhero where superhero_name = 'amazo')"
  },
  {
    "id": 277,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "Provide the heights of the heroes whose eye colours are amber.",
    "gold_sql": "select t1.height_cm from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id where t2.colour = 'amber'",
    "pred_sql": "select s.height_cm from superhero s join colour c on s.eye_colour_id = c.id where c.colour = 'amber'"
  },
  {
    "id": 278,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "List the heroes' names whose eyes and hair colours are both black.",
    "gold_sql": "select t1.superhero_name from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id and t1.hair_colour_id = t2.id where t2.colour = 'black'",
    "pred_sql": "select s.superhero_name from superhero s join colour e on s.eye_colour_id = e.id join colour h on s.hair_colour_id = h.id where e.colour = 'no colour' and h.colour = 'no colour'"
  },
  {
    "id": 279,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "Describe the names of neutral alignment superheroes.",
    "gold_sql": "select t1.superhero_name from superhero as t1 inner join alignment as t2 on t1.alignment_id = t2.id where t2.alignment = 'neutral'",
    "pred_sql": "select s.superhero_name from superhero s join alignment a on s.alignment_id = a.id where a.alignment = 'neutral'"
  },
  {
    "id": 280,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "How many heroes have the highest attribute value in strength?",
    "gold_sql": "select count(t1.hero_id) from hero_attribute as t1 inner join attribute as t2 on t1.attribute_id = t2.id where t2.attribute_name = 'strength' and t1.attribute_value = ( select max(attribute_value) from hero_attribute )",
    "pred_sql": "with max_strength as (select hero_id, max(attribute_value) as max_strength from hero_attribute join attribute on hero_attribute.attribute_id = attribute.id where attribute.attribute_name = 'strength' group by hero_id) select count(*) from max_strength where max_strength = (select max(max_strength) from max_strength)"
  },
  {
    "id": 281,
    "db_id": "superhero",
    "difficulty": "challenging",
    "question": "How many percent of female heroes were published by Marvel Comics?",
    "gold_sql": "select cast(count(case when t3.gender = 'female' and t2.publisher_name = 'marvel comics' then 1 else null end) as real) / count(case when t2.publisher_name = 'marvel comics' then 1 else null end) * 100 from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id inner join gender as t3 on t1.gender_id = t3.id",
    "pred_sql": "select 100.0 * count(case when s.publisher_id = (select id from publisher where publisher_name = 'marvel comics') and g.gender = 'female' then 1 else null end) / count(*) * 100 as percentage from superhero s join gender g on s.gender_id = g.id"
  },
  {
    "id": 282,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Calculate the difference between Emil Blonsky's weight and Charles Chandler's weight.",
    "gold_sql": "select ( select weight_kg from superhero where full_name like 'emil blonsky' ) - ( select weight_kg from superhero where full_name like 'charles chandler' ) as calculate",
    "pred_sql": "select (select weight_kg from superhero where full_name = 'richard milhouse jones') - (select weight_kg from superhero where full_name = 'charles chandler')"
  },
  {
    "id": 283,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "Calculate the average height for all superhero.",
    "gold_sql": "select cast(sum(height_cm) as real) / count(id) from superhero",
    "pred_sql": "select avg(height_cm) from superhero"
  },
  {
    "id": 284,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "What is Abomination's superpower?",
    "gold_sql": "select t3.power_name from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id where t1.superhero_name = 'abomination'",
    "pred_sql": "select s.superhero_name, sp.power_name from superhero s join hero_power hp on s.id = hp.hero_id join superpower sp on hp.power_id = sp.id where s.superhero_name = 'abomination'"
  },
  {
    "id": 285,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Which hero was the fastest?",
    "gold_sql": "select t1.superhero_name from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id inner join attribute as t3 on t2.attribute_id = t3.id where t3.attribute_name = 'speed' order by t2.attribute_value desc limit 1",
    "pred_sql": "select s.superhero_name from superhero s join hero_power hp on s.id = hp.hero_id join superpower sp on hp.power_id = sp.id where sp.power_name = 'speed' order by s.superhero_name limit 1"
  },
  {
    "id": 286,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "State all of 3-D Man's attributes along with their values.",
    "gold_sql": "select t3.attribute_name, t2.attribute_value from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id inner join attribute as t3 on t2.attribute_id = t3.id where t1.superhero_name = '3-d man'",
    "pred_sql": "select a.attribute_name, ha.attribute_value from hero_attribute ha join attribute a on ha.attribute_id = a.id where ha.hero_id = (select id from superhero where superhero_name = '3-d man')"
  },
  {
    "id": 287,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Which superheroes have blue eyes with brown hair?",
    "gold_sql": "select t1.superhero_name from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id inner join colour as t3 on t1.hair_colour_id = t3.id where t2.colour = 'blue' and t3.colour = 'brown'",
    "pred_sql": "select s.superhero_name from superhero s join colour c on s.eye_colour_id = c.id join colour h on s.hair_colour_id = h.id where c.colour = 'blue' and h.colour = 'brown'"
  },
  {
    "id": 288,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "What is the publisher for Hawkman, Karate Kid and Speedy?",
    "gold_sql": "select t2.publisher_name from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id where t1.superhero_name in ('hawkman', 'karate kid', 'speedy')",
    "pred_sql": "select s.publisher_id, p.publisher_name from superhero s join publisher p on s.publisher_id = p.id where s.superhero_name in ('hawkman', 'karate kid', 'speedy')"
  },
  {
    "id": 289,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Calculate the percentage of superheroes with blue eyes.",
    "gold_sql": "select cast(count(case when t2.colour = 'blue' then 1 else null end) as real) * 100 / count(t1.id) from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id",
    "pred_sql": "select round(count(*) * 100.0 / (select count(*) from superhero), 2) from superhero where eye_colour_id in (select id from colour where colour = 'blue')"
  },
  {
    "id": 290,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Find the ratio between male superheroes and female superheroes.",
    "gold_sql": "select cast(count(case when t2.gender = 'male' then t1.id else null end) as real) / count(case when t2.gender = 'female' then t1.id else null end) from superhero as t1 inner join gender as t2 on t1.gender_id = t2.id",
    "pred_sql": "select count(case when gender_id = 2 then 1 else null end) / count(*) as ratio from superhero where gender_id in (1, 2)"
  },
  {
    "id": 291,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.",
    "gold_sql": "select t2.colour from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id where t1.full_name = 'karen beecher-duncan'",
    "pred_sql": "select s.eye_colour_id from superhero s where s.full_name = 'karen beecher-duncan'"
  },
  {
    "id": 292,
    "db_id": "superhero",
    "difficulty": "challenging",
    "question": "In superheroes with missing weight data, calculate the difference between the number of superheroes with blue eyes and no eye color.",
    "gold_sql": "select sum(case when t2.id = 7 then 1 else 0 end) - sum(case when t2.id = 1 then 1 else 0 end) from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id where t1.weight_kg = 0 or t1.weight_kg is null",
    "pred_sql": "with blue_eyes as (select count(*) as blue_eyes from superhero where eye_colour_id in (select id from colour where colour = 'blue')) select count(*) - blue_eyes from superhero where weight_kg is null"
  },
  {
    "id": 293,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "How many green-skinned villains are there in the superhero universe?",
    "gold_sql": "select count(t1.id) from superhero as t1 inner join alignment as t2 on t1.alignment_id = t2.id inner join colour as t3 on t1.skin_colour_id = t3.id where t2.alignment = 'bad' and t3.colour = 'green'",
    "pred_sql": "select count(*) from superhero where skin_colour_id = (select id from colour where colour = 'green')"
  },
  {
    "id": 294,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Identify superheroes who can control wind and list their names in alphabetical order.",
    "gold_sql": "select t1.superhero_name from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id where t3.power_name = 'wind control' order by t1.superhero_name",
    "pred_sql": "with wind_controlling_superheroes as ( select s.superhero_name from superhero s join hero_power hp on s.id = hp.hero_id join superpower sp on hp.power_id = sp.id where sp.power_name = 'wind control' ) select * from wind_controlling_superheroes order by superhero_name"
  },
  {
    "id": 295,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Identify the gender of the superhero who has the ability of Phoenix Force.",
    "gold_sql": "select t4.gender from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id inner join gender as t4 on t1.gender_id = t4.id where t3.power_name = 'phoenix force'",
    "pred_sql": "select s.full_name, g.gender from superhero s join hero_power hp on s.id = hp.hero_id join superpower sp on hp.power_id = sp.id where sp.power_name = 'phoenix force'"
  },
  {
    "id": 296,
    "db_id": "superhero",
    "difficulty": "challenging",
    "question": "Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes.",
    "gold_sql": "select sum(case when t2.publisher_name = 'dc comics' then 1 else 0 end) - sum(case when t2.publisher_name = 'marvel comics' then 1 else 0 end) from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id",
    "pred_sql": "select (select count(*) from superhero where publisher_id in (select id from publisher where publisher_name like 'abc studios')) - (select count(*) from superhero where publisher_id in (select id from publisher where publisher_name like 'dark horse comics')) as difference"
  },
  {
    "id": 297,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "Which user has a higher reputation, Harlan or Jarrod Dixon?",
    "gold_sql": "select displayname from users where displayname in ('harlan', 'jarrod dixon') and reputation = ( select max(reputation) from users where displayname in ('harlan', 'jarrod dixon') )",
    "pred_sql": "select u1.displayname, u1.reputation from users u1 where u1.reputation > (select reputation from users where displayname = 'jarrod dixon')"
  },
  {
    "id": 298,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "Please list the display names of all the users whose accounts were created in the year 2011.",
    "gold_sql": "select displayname from users where strftime('%y', creationdate) = '2011'",
    "pred_sql": "select distinct u.displayname from users u where strftime('%y', u.creationdate) = '2011'"
  },
  {
    "id": 299,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "How many users last accessed the website after 2014/9/1?",
    "gold_sql": "select count(id) from users where date(lastaccessdate) > '2014-09-01'",
    "pred_sql": "select count(*) from users where lastaccessdate > '2014-09-01'"
  },
  {
    "id": 300,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "Who is the owner of the post \"Eliciting priors from experts\"?",
    "gold_sql": "select t2.displayname from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t1.title = 'eliciting priors from experts'",
    "pred_sql": "select p.owneruserid from posts p where p.title = 'eliciting priors from experts'"
  },
  {
    "id": 301,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "How many posts does the user csgillespie own?",
    "gold_sql": "select count(t1.id) from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t2.displayname = 'csgillespie'",
    "pred_sql": "select count(*) from posts where owneruserid = (select id from users where displayname = 'csgillespie')"
  },
  {
    "id": 302,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
    "gold_sql": "select t2.displayname from posts as t1 inner join users as t2 on t1.lasteditoruserid = t2.id where t1.title = 'examples for teaching: correlation does not mean causation'",
    "pred_sql": "select u.displayname from posts p join posthistory ph on p.id = ph.postid join users u on ph.userid = u.id where p.id = (select ph2.postid from posthistory ph2 where ph2.posthistorytypeid = 3 order by ph2.creationdate desc limit 1) and ph.posthistorytypeid = 3"
  },
  {
    "id": 303,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "Among the posts owned by an elder user, how many of them have a score of over 19?",
    "gold_sql": "select count(t1.id) from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t1.score >= 20 and t2.age > 65",
    "pred_sql": "select count(*) from posts where owneruserid in (select id from users where reputation > 1000) and score > 19"
  },
  {
    "id": 304,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "From which post is the tag \"bayesian\" excerpted from? Please give the body of the post.",
    "gold_sql": "select t2.body from tags as t1 inner join posts as t2 on t2.id = t1.excerptpostid where t1.tagname = 'bayesian'",
    "pred_sql": "select p.body from posts p join tags t on p.id = t.excerptpostid where t.tagname = 'bayesian'"
  },
  {
    "id": 305,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "What is the average score of the posts owned by the user csgillespie?",
    "gold_sql": "select avg(t1.score) from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t2.displayname = 'csgillespie'",
    "pred_sql": "select avg(score) from posts where owneruserid = (select id from users where displayname = 'csgillespie')"
  },
  {
    "id": 306,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "Among the posts with a score of over 5, what is the percentage of them being owned by an elder user?",
    "gold_sql": "select cast(sum(iif(t2.age > 65, 1, 0)) as real) * 100 / count(t1.id) from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t1.score > 5",
    "pred_sql": "with elder_users as ( select id from users where reputation > 1000 ) select 100.0 * count(*) / (select count(*) from posts where score > 5 and owneruserid in (select id from elder_users)) as percentage from posts where score > 5 and owneruserid in (select id from elder_users)"
  },
  {
    "id": 307,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "User No.3025 gave a comment at 20:29:39 on 2014/4/23 to a post, how many favorite counts did that post get?",
    "gold_sql": "select t1.favoritecount from posts as t1 inner join comments as t2 on t1.id = t2.postid where t2.creationdate = '2014-04-23 20:29:39.0' and t2.userid = 3025",
    "pred_sql": "select posts.favoritecount from posts where posts.id in (select postlinks.postid from postlinks where postlinks.creationdate = '2014-04-23 20:29:39.0' and postlinks.postid in (select comments.postid from comments where comments.userid = 3025))"
  },
  {
    "id": 308,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "User No.23853 gave a comment to a post at 9:08:18 on 2013/7/12, was that post well-finished?",
    "gold_sql": "select iif(t2.closeddate is null, 'not well-finished', 'well-finished') as resylt from comments as t1 inner join posts as t2 on t1.postid = t2.id where t1.userid = 23853 and t1.creationdate = '2013-07-12 09:08:18.0'",
    "pred_sql": "select exists (select 1 from comments where postid in (select id from posts where owneruserid = 23853 and creationdate = '2013-07-12 09:08:18') and text is not null)"
  },
  {
    "id": 309,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "For the user with the display name of \"Tiago Pasqualini\", how many posts did he/she own?",
    "gold_sql": "select count(t1.id) from users as t1 inner join posts as t2 on t1.id = t2.owneruserid where t1.displayname = 'tiago pasqualini'",
    "pred_sql": "select count(*) from posts where owneruserid in (select id from users where displayname = 'tiago pasqualini')"
  },
  {
    "id": 310,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "Provide the display name of the user who made the vote No.6347.",
    "gold_sql": "select t1.displayname from users as t1 inner join votes as t2 on t1.id = t2.userid where t2.id = 6347",
    "pred_sql": "select u.displayname from votes v join users u on v.userid = u.id where v.id = 6347"
  },
  {
    "id": 311,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "For the user No.24, how many times is the number of his/her posts compared to his/her votes?",
    "gold_sql": "select cast(count(distinct t2.id) as real) / count(distinct t1.id) from votes as t1 inner join posts as t2 on t1.userid = t2.owneruserid where t1.userid = 24",
    "pred_sql": "select count(*) from posts where owneruserid = 24 and id in (select postid from votes where userid = 24)"
  },
  {
    "id": 312,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
    "gold_sql": "select viewcount from posts where title = 'integration of weka and/or rapidminer into informatica powercenter/developer'",
    "pred_sql": "select viewcount from posts where title = 'what are some valuable statistical analysis open source projects available right now?'"
  },
  {
    "id": 313,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "Write the contents of comments with a score of 17.",
    "gold_sql": "select text from comments where score = 17",
    "pred_sql": "select text from comments where score = 17"
  },
  {
    "id": 314,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "Name the user that commented 'thank you user93!'",
    "gold_sql": "select t1.displayname from users as t1 inner join comments as t2 on t1.id = t2.userid where t2.text = 'thank you user93!'",
    "pred_sql": "select u.displayname from comments c join posts p on c.postid = p.id join votes v on p.id = v.postid join users u on v.userid = u.id where c.text = 'thank you user93!'"
  },
  {
    "id": 315,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "Which user made a post titled 'Understanding what Dassault iSight is doing?' and how much is the reputation of the user?",
    "gold_sql": "select t1.displayname, t1.reputation from users as t1 inner join posts as t2 on t1.id = t2.owneruserid where t2.title = 'understanding what dassault isight is doing?'",
    "pred_sql": "select u.displayname, u.reputation from posts p join users u on p.owneruserid = u.id where p.title = 'understanding what dassault isight is doing?'"
  },
  {
    "id": 316,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "Who is the owner of the post titled 'Open source tools for visualizing multi-dimensional data?'",
    "gold_sql": "select t2.displayname from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t1.title = 'open source tools for visualizing multi-dimensional data?'",
    "pred_sql": "select p.owneruserid from posts p where p.title = 'open source tools for visualizing multi-dimensional data'"
  },
  {
    "id": 317,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "Write all the comments left by users who edited the post titled 'Why square the difference instead of taking the absolute value in standard deviation?'",
    "gold_sql": "select t2.comment from posts as t1 inner join posthistory as t2 on t1.id = t2.postid where t1.title = 'why square the difference instead of taking the absolute value in standard deviation?'",
    "pred_sql": "with edited_post as ( select p.id from posts p where p.title = 'why square the difference instead of taking the absolute value in standard deviation?' ) select c.* from comments c join posthistory ph on c.postid = ph.postid join edited_post ep on ph.postid = ep.id where ph.revisionguid in ( select ph.revisionguid from posthistory ph join edited_post ep on ph.postid = ep"
  },
  {
    "id": 318,
    "db_id": "codebase_community",
    "difficulty": "challenging",
    "question": "Which user added a bounty amount of 50 to the post title mentioning variance?",
    "gold_sql": "select t3.displayname, t1.title from posts as t1 inner join votes as t2 on t1.id = t2.postid inner join users as t3 on t3.id = t2.userid where t2.bountyamount = 50 and t1.title like '%variance%'",
    "pred_sql": "select * from votes where postid in (select id from posts where title like '%variance%' and bountyamount = 50) and userid in (select id from users)"
  },
  {
    "id": 319,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "Calculate the average view count of each post tagged as 'humor' and list the title and the comment of each post.",
    "gold_sql": "select avg(t2.viewcount), t2.title, t1.text from comments as t1 inner join posts as t2 on t2.id = t1.postid where t2.tags = '<humor>' group by t2.title, t1.text",
    "pred_sql": "with post_views as ( select p.id, p.title, avg(p.viewcount) as avg_view_count from posts p join tags t on p.id = t.excerptpostid where t.tagname = 'humor' group by p.id, p.title ) select pv.title, pv.avg_view_count, c.text from post_views pv join comments c on pv.id = c.postid"
  },
  {
    "id": 320,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "How many users are awarded with more than 5 badges?",
    "gold_sql": "select count(userid) from ( select userid, count(name) as num from badges group by userid ) t where t.num > 5",
    "pred_sql": "select count(*) from users u join badges b on u.id = b.userid where b.id is not null and u.reputation > 5"
  },
  {
    "id": 321,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "Which user have only one post history per post and having at least 1000 views?",
    "gold_sql": "select t2.userid from users as t1 inner join posthistory as t2 on t1.id = t2.userid inner join posts as t3 on t2.postid = t3.id where t3.viewcount >= 1000 group by t2.userid having count(distinct t2.posthistorytypeid) = 1",
    "pred_sql": "with post_history_counts as ( select postid, count(*) as count from posthistory group by postid ) select distinct u.displayname from users u join posts p on u.id = p.owneruserid join post_history_counts phc on p.id = phc.postid where phc.count = 1 and p.viewcount >= 1000"
  },
  {
    "id": 322,
    "db_id": "codebase_community",
    "difficulty": "challenging",
    "question": "What is the percentage difference of student badges given during 2010 and 2011?",
    "gold_sql": "select cast(sum(iif(strftime('%y', date) = '2010', 1, 0)) as real) * 100 / count(id) - cast(sum(iif(strftime('%y', date) = '2011', 1, 0)) as real) * 100 / count(id) from badges where name = 'student'",
    "pred_sql": "with badges_2010 as ( select count(*) as total_badges from badges where date between '2010-01-01' and '2010-12-31' ), badges_2011 as ( select count(*) as total_badges from badges where date between '2011-01-01' and '2011-12-31' ) select (badges_2011.total_badges"
  },
  {
    "id": 323,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "What is the average of the up votes and the average user age for users creating more than 10 posts?",
    "gold_sql": "select avg(t1.upvotes), avg(t1.age) from users as t1 inner join ( select owneruserid, count(*) as post_count from posts group by owneruserid having post_count > 10) as t2 on t1.id = t2.owneruserid",
    "pred_sql": "with user_post_counts as ( select userid, count(*) as postcount from posts group by userid ) select avg(u.upvotes) as averageupvotes, avg(u.age) as averageage from users u join user_post_counts p on u.id = p.userid where p.postcount > 10"
  },
  {
    "id": 324,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "Calculate the ratio of votes in 2010 and 2011.",
    "gold_sql": "select cast(sum(iif(strftime('%y', creationdate) = '2010', 1, 0)) as real) / sum(iif(strftime('%y', creationdate) = '2011', 1, 0)) from votes",
    "pred_sql": "with votes_in_2010 as ( select count(*) as votes_2010 from votes where creationdate >= '2010-01-01' and creationdate < '2011-01-01' ), votes_in_2011 as ( select count(*) as votes_2011 from votes where creationdate >= '2011-01-01' and creationdate < '2012-01-01' ) select (votes_201"
  },
  {
    "id": 325,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "Which post by slashnick has the most answers count? State the post ID.",
    "gold_sql": "select t2.postid from users as t1 inner join posthistory as t2 on t1.id = t2.userid inner join posts as t3 on t2.postid = t3.id where t1.displayname = 'slashnick' order by t3.answercount desc limit 1",
    "pred_sql": "select p.id from posts p join posts a on p.id = a.parentid where p.owneruserid = (select u.id from users u where u.displayname ='slashnick') and a.answercount = (select max(answercount) from posts where owneruserid = (select u.id from users u where u.displayname ='slashnick'))"
  },
  {
    "id": 326,
    "db_id": "codebase_community",
    "difficulty": "challenging",
    "question": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?",
    "gold_sql": "select t1.displayname from users as t1 inner join posthistory as t2 on t1.id = t2.userid inner join posts as t3 on t2.postid = t3.id where t1.displayname = 'harvey motulsky' or t1.displayname = 'noah snyder' group by t1.displayname order by sum(t3.viewcount) desc limit 1",
    "pred_sql": "with post_popularity as ( select p.id, p.viewcount, p.score from posts p where p.owneruserid in (select u.id from users u where u.displayname in ('harvey motulsky', 'noah snyder')) ) select p1.id, p1.viewcount, p1.score from post_popularity p1 where (p1.viewcount, p1.score) = ( select max(p2.viewcount, p2.score)"
  },
  {
    "id": 327,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "State all the tags used by Mark Meckes in his posts that doesn't have comments.",
    "gold_sql": "select t3.tags from users as t1 inner join posthistory as t2 on t1.id = t2.userid inner join posts as t3 on t3.id = t2.postid where t1.displayname = 'mark meckes' and t3.commentcount = 0",
    "pred_sql": "with tags_used as ( select p.id, t.tagname from posts p join posthistory ph on p.id = ph.postid join tags t on p.id = t.excerptpostid where p.owneruserid = 8 and p.commentcount = 0 ) select distinct tagname from tags_used"
  },
  {
    "id": 328,
    "db_id": "codebase_community",
    "difficulty": "challenging",
    "question": "Based on posts posted by Community, calculate the percentage of posts that use the R language.",
    "gold_sql": "select cast(sum(iif(t3.tagname = 'r', 1, 0)) as real) * 100 / count(t1.id) from users as t1 inner join posthistory as t2 on t1.id = t2.userid inner join tags as t3 on t3.excerptpostid = t2.postid where t1.displayname = 'community'",
    "pred_sql": "with post_language as ( select case when body like '%r%' then 1 else 0 end as uses_r from posts where owneruserid = -1 ) select sum(uses_r) / count(*) * 100 as percentage_of_posts_using_r from post_language"
  },
  {
    "id": 329,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "Calculate the difference in view count from post posted by Mornington and view count from posts posted by Amos.",
    "gold_sql": "select sum(iif(t1.displayname = 'mornington', t3.viewcount, 0)) - sum(iif(t1.displayname = 'amos', t3.viewcount, 0)) as diff from users as t1 inner join posthistory as t2 on t1.id = t2.userid inner join posts as t3 on t3.id = t2.postid",
    "pred_sql": "with morningtonposts as ( select id from posts where owneruserid in (select id from users where displayname = 'mornington') ), amosposts as ( select id from posts where owneruserid in (select id from users where displayname = 'amos') ) select avg(case when p.id in (select * from morningtonposts) then p.viewcount else 0 end) - avg(case when p.id in (select * from amosposts) then"
  },
  {
    "id": 330,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "What is the average monthly number of links created in 2010 for posts that have no more than 2 answers?",
    "gold_sql": "select cast(count(t1.id) as real) / 12 from postlinks as t1 inner join posts as t2 on t1.postid = t2.id where t2.answercount <= 2 and strftime('%y', t1.creationdate) = '2010'",
    "pred_sql": "with post_links as ( select postid, count(*) as link_count from postlinks where creationdate between '2010-01-01' and '2010-12-31' group by postid ), post_answers as ( select postid, count(*) as answer_count from posts where posttypeid = 1 group by postid ) select avg(link_count) from post_links join post_answers on post_links"
  },
  {
    "id": 331,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "When did 'chl' cast its first vote in a post?",
    "gold_sql": "select t2.creationdate from users as t1 inner join votes as t2 on t1.id = t2.userid where t1.displayname = 'chl' order by t2.creationdate limit 1",
    "pred_sql": "select min(creationdate) from votes where userid = (select id from users where displayname = 'chl')"
  },
  {
    "id": 332,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "gold_sql": "select t1.displayname from users as t1 inner join badges as t2 on t1.id = t2.userid where t2.`name` = 'autobiographer' order by t2.date limit 1",
    "pred_sql": "select u.displayname from badges b join posts p on b.postid = p.id where b.name = 'autobiographer' and p.owneruserid = b.userid order by b.id limit 1"
  },
  {
    "id": 333,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "Among the users located in United Kingdom, how many users whose post have a total favorite amount of 4 or more?",
    "gold_sql": "select count(t1.id) from users as t1 inner join posts as t2 on t1.id = t2.owneruserid where t1.location = 'united kingdom' and t2.favoritecount >= 4",
    "pred_sql": "select count(*) from users where location = 'united kingdom' and exists (select 1 from posts p join votes v on p.id = v.postid where p.owneruserid = users.id group by p.owneruserid having sum(v.bountyamount) >= 4)"
  },
  {
    "id": 334,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "Which post by Harvey Motulsky has the most views? Please give the id and title of this post.",
    "gold_sql": "select t2.id, t2.title from users as t1 inner join posts as t2 on t1.id = t2.owneruserid where t1.displayname = 'harvey motulsky' order by t2.viewcount desc limit 1",
    "pred_sql": "select p.id, p.title from posts p join votes v on p.id = v.postid where p.owneruserid = (select u.id from users u where u.displayname = 'harvey motulsky') order by v.viewcount desc limit 1"
  },
  {
    "id": 335,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "Which is the most valuable post in 2010? Please give its id and the owner's display name.",
    "gold_sql": "select t2.owneruserid, t1.displayname from users as t1 inner join posts as t2 on t1.id = t2.owneruserid where strftime('%y', t1.creationdate) = '2010' order by t2.favoritecount desc limit 1",
    "pred_sql": "with most_valuable_post as ( select p.id, p.owneruserid, p.score from posts p where p.creationdate >= '2010-01-01' and p.creationdate <= '2010-12-31' order by p.score desc limit 1 ) select mp.id, u.displayname from most_valuable_post mp join users u on mp.owneruserid = u.id"
  },
  {
    "id": 336,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "What is the percentage of posts whose owners had a reputation of over 1000 in 2011?",
    "gold_sql": "select cast(sum(iif(strftime('%y', t2.creaiondate) = '2011' and t1.reputation > 1000, 1, 0)) as real) * 100 / count(t1.id) from users as t1 inner join posts as t2 on t1.id = t2.owneruserid",
    "pred_sql": "with post_owners as ( select p.id, p.owneruserid, p.creationdate from posts p where p.creationdate between '2011-01-01' and '2011-12-31' ) select count(*) * 100.0 / (select count(*) from post_owners) as percentage from post_owners where (select u.reputation from users u where u.id = post_owners.owneruserid) > 100"
  },
  {
    "id": 337,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time.",
    "gold_sql": "select t2.viewcount, t3.displayname from posthistory as t1 inner join posts as t2 on t1.postid = t2.id inner join users as t3 on t2.lasteditoruserid = t3.id where t1.text = 'computer game datasets'",
    "pred_sql": "select sum(viewcount) as totalviews, ownerdisplayname as lastposter from posts where title = 'computer game datasets'"
  },
  {
    "id": 338,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "How many comments were added to the post with the highest score?",
    "gold_sql": "select count(t2.id) from posts as t1 inner join comments as t2 on t1.id = t2.postid group by t1.id order by t1.score desc limit 1",
    "pred_sql": "with highest_score_post as ( select id from posts where score = (select max(score) from posts) ) select count(*) from comments where postid in (select id from highest_score_post)"
  },
  {
    "id": 339,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "Provide the text of the latest 10 comments to the post with the title 'Analysing wind data with R' and the display name of the user who left it.",
    "gold_sql": "select t3.text, t1.displayname from users as t1 inner join posts as t2 on t1.id = t2.owneruserid inner join comments as t3 on t2.id = t3.postid where t2.title = 'analysing wind data with r' order by t1.creationdate desc limit 10",
    "pred_sql": "with latest_comments as ( select c.* from comments c join posts p on c.postid = p.id where p.title = 'analysing wind data with r' order by c.creationdate desc limit 10 ) select * from latest_comments"
  },
  {
    "id": 340,
    "db_id": "codebase_community",
    "difficulty": "challenging",
    "question": "Among all the posts posted by the most influential user, identify the percentage with a score above 50.",
    "gold_sql": "Failed sql select cast(sum(case when t2.score > 50 then 1 else 0 end) as real) * 100 / count(t1.id) from users t1 inner join posts t2 on t1.id = t2.owneruserid inner join ( select max(reputation) as max_reputation from users ) t3 on t1.reputation = t3.max_reputation",
    "pred_sql": "Failed sql"
  },
  {
    "id": 341,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "What is the excerpt post ID and wiki post ID of the tag named sample?",
    "gold_sql": "select excerptpostid, wikipostid from tags where tagname = 'sample'",
    "pred_sql": "select excerptpostid, wikipostid from tags where tagname = 'bayesian'"
  },
  {
    "id": 342,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "Give the user's reputation and up vote number of the user that commented \"fine, you win :)\".",
    "gold_sql": "select t2.reputation, t2.upvotes from comments as t1 inner join users as t2 on t1.userid = t2.id where t1.text = 'fine, you win :)'",
    "pred_sql": "select reputation, upvotes from users where displayname like '%fine, you win :)%'"
  },
  {
    "id": 343,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "Among the posts with views ranging from 100 to 150, what is the comment with the highest score?",
    "gold_sql": "select text from comments where postid in ( select id from posts where viewcount between 100 and 150 ) order by score desc limit 1",
    "pred_sql": "Failed sql"
  },
  {
    "id": 344,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "In posts with 1 comment, how many of the comments have 0 score?",
    "gold_sql": "select count(t1.id) from comments as t1 inner join posts as t2 on t1.postid = t2.id where t2.commentcount = 1 and t2.score = 0",
    "pred_sql": "select count(*) from comments where postid in (select id from posts where commentcount = 1) and score = 0"
  },
  {
    "id": 345,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "Among the comments with scores between 5 to 10, what is the percentage of the users with 0 up votes?",
    "gold_sql": "select cast(sum(iif(t1.upvotes = 0, 1, 0)) as real) * 100/ count(t1.id) as per from users as t1 inner join comments as t2 on t1.id = t2.userid where t2.score between 5 and 10",
    "pred_sql": "with comment_scores as ( select userid, score from comments where score between 5 and 10 ) select 100.0 * count(case when (select count(*) from votes where votes.userid = comment_scores.userid and votetypeid = 2) = 0 then 1 else null end) / count(*) as percentage from comment_scores"
  },
  {
    "id": 346,
    "db_id": "card_games",
    "difficulty": "simple",
    "question": "Which are the cards that have incredibly powerful foils.",
    "gold_sql": "select id from cards where cardkingdomfoilid is not null and cardkingdomid is not null",
    "pred_sql": "select * from cards where hasfoil = 1 and hasnonfoil = 0"
  },
  {
    "id": 347,
    "db_id": "card_games",
    "difficulty": "simple",
    "question": "What are the borderless cards available without powerful foils?",
    "gold_sql": "select id from cards where bordercolor = 'borderless' and (cardkingdomid is null or cardkingdomid is null)",
    "pred_sql": "select c.* from cards c where c.hasfoil = 0 and c.hasnonfoil = 1 and c.isfoil = 0 and c.isnonfoil = 1"
  },
  {
    "id": 348,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "List all the mythic rarity print cards banned in gladiator format.",
    "gold_sql": "select distinct t1.id from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid where t2.format = 'gladiator' and t2.status = 'banned' and t1.rarity = 'mythic'",
    "pred_sql": "select c.uuid, c.name, c.rarity from cards c join legalities l on c.uuid = l.uuid where l.format = 'gladiator' and c.rarity ='mythic'"
  },
  {
    "id": 349,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.",
    "gold_sql": "select distinct t2.status from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid where t1.type = 'artifact' and t2.format = 'vintage' and t1.side is null",
    "pred_sql": "with vintage_legal as ( select c.uuid, l.status from cards c join legalities l on c.uuid = l.uuid where c.type = 'artifact' and l.format = 'vintage' ) select * from vintage_legal"
  },
  {
    "id": 350,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "List all the card id and artist with unknown power which are legal for commander play format.",
    "gold_sql": "select t1.id, t1.artist from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid where t2.status = 'legal' and t2.format = 'commander' and (t1.power is null or t1.power = '*')",
    "pred_sql": "select c.id, c.artist from cards c join legalities l on c.uuid = l.uuid where c.power is null and l.format = 'commander'"
  },
  {
    "id": 351,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "Find all cards illustrated by Stephen Daniel and describe the text of the ruling of these cards. State if these cards have missing or degraded properties and values.",
    "gold_sql": "select t1.id, t2.text, t1.hascontentwarning from cards as t1 inner join rulings as t2 on t1.uuid = t2.uuid where t1.artist = 'stephen daniele'",
    "pred_sql": "with card_info as ( select * from cards where artist = 'stephen daniel' ) select ci.*, r.text as ruling_text, case when ci.hasalternativedecklimit = 0 then 'no' else 'yes' end as has_alternative_deck_limit, case when ci.hascontentwarning = 0 then 'no' else 'yes' end as has_content_warning, case when ci.hasfoil ="
  },
  {
    "id": 352,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "Name the card and artist with the most ruling information. Also state if the card is a promotional printing.",
    "gold_sql": "select t1.name, t1.artist, t1.ispromo from cards as t1 inner join rulings as t2 on t1.uuid = t2.uuid where t1.ispromo = 1 and t1.artist = (select artist from cards where ispromo = 1 group by artist having count(distinct uuid) = (select max(count_uuid) from ( select count(distinct uuid) as count_uuid from cards where ispromo = 1 group by artist ))) limit 1",
    "pred_sql": "select c.name, c.artist, count(r.id) as num_rulings, 'promo' as is_promo from cards c join rulings r on c.uuid = r.uuid group by c.name, c.artist order by num_rulings desc limit 1"
  },
  {
    "id": 353,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "Calculate the percentage of the cards availabe in Chinese Simplified.",
    "gold_sql": "select cast(sum(case when t2.language = 'chinese simplified' then 1 else 0 end) as real) * 100 / count(t1.id) from cards as t1 inner join foreign_data as t2 on t1.uuid = t2.uuid",
    "pred_sql": "select count(*) as total_cards, count(case when (select language from set_translations where setcode = cards.setcode and language = 'chinese simplified') is not null then 1 else null end) as chinese_cards, round(count(case when (select language from set_translations where setcode = cards.setcode and language = 'chinese simplified') is not null then 1 else null end) / count(*) * 100, 2) as chinese_percentage from"
  },
  {
    "id": 354,
    "db_id": "card_games",
    "difficulty": "simple",
    "question": "How many cards have infinite power?",
    "gold_sql": "select count(*) from cards where power = '*'",
    "pred_sql": "select count(*) from cards where power = '∞'"
  },
  {
    "id": 355,
    "db_id": "card_games",
    "difficulty": "simple",
    "question": "What is the border color of card \"Ancestor's Chosen\"?",
    "gold_sql": "select distinct bordercolor from cards where name = 'ancestor''s chosen'",
    "pred_sql": "select bordercolor from cards where name = 'ancestor''s chosen'"
  },
  {
    "id": 356,
    "db_id": "card_games",
    "difficulty": "simple",
    "question": "What is the rule of playing card \"Benalish Knight\"?",
    "gold_sql": "select t2.format from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid where t1.name = 'benalish knight'",
    "pred_sql": "select text from cards where name = 'benalish knight'"
  },
  {
    "id": 357,
    "db_id": "card_games",
    "difficulty": "simple",
    "question": "What is the percentage of borderless cards?",
    "gold_sql": "select cast(sum(case when bordercolor = 'borderless' then 1 else 0 end) as real) * 100 / count(id) from cards",
    "pred_sql": "select count(*) * 100.0 / (select count(*) from cards where bordercolor is null) as percentage from cards where bordercolor is null"
  },
  {
    "id": 358,
    "db_id": "card_games",
    "difficulty": "challenging",
    "question": "What is the percentage of cards whose language is French among the Story Spotlight cards?",
    "gold_sql": "select cast(sum(case when t2.language = 'french' then 1 else 0 end) as real) * 100 / count(t1.id) from cards as t1 inner join foreign_data as t2 on t1.uuid = t2.uuid where t1.isstoryspotlight = 1",
    "pred_sql": "select 100.0 * count(case when isstoryspotlight = 1 and language = 'french' then 1 else null end) / count(*) as percentage from cards"
  },
  {
    "id": 359,
    "db_id": "card_games",
    "difficulty": "simple",
    "question": "How many cards with original type of \"Summon - Angel\" have subtype other than \"Angel\"?",
    "gold_sql": "select count(id) from cards where originaltype = 'summon - angel' and subtypes != 'angel'",
    "pred_sql": "select count(*) from cards where originaltype = 'summon - angel' and subtype!= 'angel'"
  },
  {
    "id": 360,
    "db_id": "card_games",
    "difficulty": "simple",
    "question": "What are the cards belong to duel deck a? List the ID.",
    "gold_sql": "select id from cards where dueldeck = 'a'",
    "pred_sql": "select id from cards where dueldeck = 'duel'"
  },
  {
    "id": 361,
    "db_id": "card_games",
    "difficulty": "simple",
    "question": "How many of the banned cards are white border?",
    "gold_sql": "select count(t1.id) from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid where t2.status = 'banned' and t1.bordercolor = 'white'",
    "pred_sql": "select count(*) from cards where coloridentity like '%w%' and isbanned = 1"
  },
  {
    "id": 362,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "Among the Artifact cards, which are black color and comes with foreign languague translation?",
    "gold_sql": "select distinct t1.name from cards as t1 inner join foreign_data as t2 on t1.uuid = t2.uuid where t1.originaltype = 'artifact' and t1.colors = 'b'",
    "pred_sql": "select * from cards where color = 'black' and hasforeigndata = 1"
  },
  {
    "id": 363,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "What is the mana cost of cards with a normal layout, a 2003 frame version, with a black border color, and available in paper and mtgo?",
    "gold_sql": "select manacost from cards where availability = 'mtgo,paper' and bordercolor = 'black' and frameversion = 2003 and layout = 'normal'",
    "pred_sql": "select * from cards where layout = 'normal' and frameversion = '2003' and bordercolor = 'black' and availability in ('paper','mtgo')"
  },
  {
    "id": 364,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "What is the percentage of Story Spotlight cards that do not have a text box? List them by their ID.",
    "gold_sql": "select cast(sum(case when istextless = 0 and isstoryspotlight = 1 then 1 else 0 end) as real) * 100 / count(id) from cards",
    "pred_sql": "select id from cards where isstoryspotlight = 1 and text is null"
  },
  {
    "id": 365,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "How many Brazilian Portuguese translated sets are inside the Commander block?",
    "gold_sql": "select count(t1.id) from sets as t1 inner join set_translations as t2 on t1.code = t2.setcode where t2.language = 'portuguese (brazil)' and t1.block = 'commander'",
    "pred_sql": "select count(*) from sets join set_translations on sets.code = set_translations.setcode where set_translations.language = 'brazilian portuguese' and sets.block = 'commander'"
  },
  {
    "id": 366,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "Lists all types of cards in German.",
    "gold_sql": "select t1.subtypes, t1.supertypes from cards as t1 inner join foreign_data as t2 on t1.uuid = t2.uuid where t2.language = 'german' and t1.subtypes is not null and t1.supertypes is not null",
    "pred_sql": "select distinct type from cards where name in (select name from cards where asciiname like '%german%') and type not like 'land'"
  },
  {
    "id": 367,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "How many unknown power cards contain info about the triggered ability",
    "gold_sql": "select count(distinct t1.id) from cards as t1 inner join rulings as t2 on t1.uuid = t2.uuid where (t1.power is null or t1.power = '*') and t2.text like '%triggered ability%'",
    "pred_sql": "select count(*) from cards where type = 'creature' and text like '%when %enters the battlefield%'"
  },
  {
    "id": 368,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "Indicates the number of cards with pre-modern format, ruling text \"This is a triggered mana ability.\" that do not have multiple faces.",
    "gold_sql": "select count(t1.id) from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid inner join rulings as t3 on t1.uuid = t3.uuid where t2.format = 'premodern' and t3.text = 'this is a triggered mana ability.' and t1.side is null",
    "pred_sql": "select count(*) from cards where format = 'pre-modern' and ruling like '%this is a triggered mana ability%' and variations is null"
  },
  {
    "id": 369,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "What is the foreign name of the card in French of type Creature, normal layout and black border color, by artist Matthew D. Wilson?",
    "gold_sql": "select name from foreign_data where uuid in ( select uuid from cards where types = 'creature' and layout = 'normal' and bordercolor = 'black' and artist = 'matthew d. wilson' ) and language = 'french'",
    "pred_sql": "select f.text from foreign_data f, cards c where f.uuid = c.uuid and c.artist = 'matthew d. wilson' and c.layout = 'normal' and c.bordercolor = 'black' and c.type = 'creature'"
  },
  {
    "id": 370,
    "db_id": "card_games",
    "difficulty": "simple",
    "question": "What language is the set of 180 cards that belongs to the Ravnica block translated into?",
    "gold_sql": "select t2.language from sets as t1 inner join set_translations as t2 on t1.code = t2.setcode where t1.block = 'ravnica' and t1.basesetsize = 180",
    "pred_sql": "select language from set_translations where setcode in (select code from sets where block = 'ravnica')"
  },
  {
    "id": 371,
    "db_id": "card_games",
    "difficulty": "challenging",
    "question": "What percentage of cards with format commander and legal status do not have a content warning?",
    "gold_sql": "select cast(sum(case when t1.hascontentwarning = 0 then 1 else 0 end) as real) * 100 / count(t1.id) from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid where t2.format = 'commander' and t2.status = 'legal'",
    "pred_sql": "select count(*) from cards c join legalities l on c.uuid = l.uuid where l.format = 'commander' and l.status = 'legal' and c.hascontentwarning = 0"
  },
  {
    "id": 372,
    "db_id": "card_games",
    "difficulty": "challenging",
    "question": "What percentage of cards without power are in French?",
    "gold_sql": "select cast(sum(case when t2.language = 'french' then 1 else 0 end) as real) * 100 / count(t1.id) from cards as t1 inner join foreign_data as t2 on t1.uuid = t2.uuid where t1.power is null or t1.power = '*'",
    "pred_sql": "select count(*) * 100.0 / (select count(*) from cards where power is null) as percentage from cards where power is null and uuid in (select uuid from set_translations where language = 'french')"
  },
  {
    "id": 373,
    "db_id": "card_games",
    "difficulty": "simple",
    "question": "What is the language of the card with the multiverse number 149934?",
    "gold_sql": "select language from foreign_data where multiverseid = 149934",
    "pred_sql": "select language from foreign_data where multiverseid = 149934"
  },
  {
    "id": 374,
    "db_id": "card_games",
    "difficulty": "simple",
    "question": "What proportion of cards do not have a text box with a normal layout?",
    "gold_sql": "select cast(sum(case when istextless = 1 and layout = 'normal' then 1 else 0 end) as real) * 100 / count(*) from cards",
    "pred_sql": "select count(*) from cards where text is null or text = ''"
  },
  {
    "id": 375,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "What languages are available in the set known as Archenemy on the magic card market and having the code ARC?",
    "gold_sql": "select t2.language from sets as t1 inner join set_translations as t2 on t1.code = t2.setcode where t1.mcmname = 'archenemy' and t2.setcode = 'arc'",
    "pred_sql": "select language from set_translations where setcode = 'arc'"
  },
  {
    "id": 376,
    "db_id": "card_games",
    "difficulty": "simple",
    "question": "Which foreign language used by \"A Pedra Fellwar\"?",
    "gold_sql": "select distinct language from foreign_data where name = 'a pedra fellwar'",
    "pred_sql": "select ft.language from foreign_data fd join cards c on fd.uuid = c.uuid where c.name = 'a pedra fellwar'"
  },
  {
    "id": 377,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "Which card costs more converted mana, \"Serra Angel\" or \"Shrine Keeper\"?",
    "gold_sql": "select name from cards where name in ('serra angel', 'shrine keeper') order by convertedmanacost desc limit 1",
    "pred_sql": "select * from cards where name in ('serra angel', 'shrine keeper') and convertedmanacost > (select max(convertedmanacost) from cards where name in ('serra angel', 'shrine keeper'))"
  },
  {
    "id": 378,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "What's the Italian name of the set of cards with \"Ancestor's Chosen\" is in?",
    "gold_sql": "select translation from set_translations where setcode in ( select setcode from cards where name = 'ancestor''s chosen' ) and language = 'italian'",
    "pred_sql": "select st.translation from set_translations st join sets s on st.setcode = s.code where s.name = 'tenth edition' and exists (select 1 from cards c where c.name = 'ancestor''s chosen' and c.uuid = s.uuid)"
  },
  {
    "id": 379,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "For the set of cards with \"Ancestor's Chosen\" in it, is there a Korean version of it?",
    "gold_sql": "select iif(sum(case when t2.language = 'korean' and t2.translation is not null then 1 else 0 end) > 0, 'yes', 'no') from cards as t1 inner join set_translations as t2 on t2.setcode = t1.setcode where t1.name = 'ancestor''s chosen'",
    "pred_sql": "select * from set_translations where setcode in (select code from sets where name like '%ancestor%') and language = 'korean'"
  },
  {
    "id": 380,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "Among the cards in the set \"Hauptset Zehnte Edition\", how many of them are designed by Adam Rex?",
    "gold_sql": "select count(t1.id) from cards as t1 inner join set_translations as t2 on t2.setcode = t1.setcode where t2.translation = 'hauptset zehnte edition' and t1.artist = 'adam rex'",
    "pred_sql": "select count(*) from cards where setcode = '10e' and asciiname in (select asciiname from cards where artist = 'adam rex')"
  },
  {
    "id": 381,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "What is the Simplified Chinese translation of the name of the set \"Eighth Edition\"?",
    "gold_sql": "select t2.translation from sets as t1 inner join set_translations as t2 on t2.setcode = t1.code where t1.name = 'eighth edition' and t2.language = 'chinese simplified'",
    "pred_sql": "select translation from set_translations where language = 'chinese simplified' and setcode = '8ed'"
  },
  {
    "id": 382,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "gold_sql": "select iif(t2.mtgocode is not null, 'yes', 'no') from cards as t1 inner join sets as t2 on t2.code = t1.setcode where t1.name = 'angel of mercy'",
    "pred_sql": "select exists (select 1 from cards where name = 'angel of mercy' and exists (select 1 from sets where code in (select setcode from set_translations where language = 'english' and translation = 'online-only') and id in (select set_id from cards_sets where card_id = cards.id)))"
  },
  {
    "id": 383,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "Among the sets in the block \"Ice Age\", how many of them have an Italian translation?",
    "gold_sql": "select count(distinct t1.id) from sets as t1 inner join set_translations as t2 on t2.setcode = t1.code where t1.block = 'ice age' and t2.language = 'italian' and t2.translation is not null",
    "pred_sql": "select count(*) from set_translations where setcode in (select code from sets where block = 'ice age') and language = 'italian'"
  },
  {
    "id": 384,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "Is the set of cards with Adarkar Valkyrie only available outside the United States?",
    "gold_sql": "select iif(isforeignonly = 1, 'yes', 'no') from cards as t1 inner join sets as t2 on t2.code = t1.setcode where t1.name = 'adarkar valkyrie'",
    "pred_sql": "select * from cards where name = 'adarkar valkyrie' and (hasfoil = 0 or hasnonfoil = 0)"
  },
  {
    "id": 385,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "Among the sets of cards that have an Italian translation, how many of them have a base set number of under 100?",
    "gold_sql": "select count(t1.id) from sets as t1 inner join set_translations as t2 on t2.setcode = t1.code where t2.translation is not null and t1.basesetsize < 100 and t2.language = 'italian'",
    "pred_sql": "select count(*) from sets s join set_translations st on s.code = st.setcode where st.language = 'italian' and s.basesetsize < 100"
  },
  {
    "id": 386,
    "db_id": "card_games",
    "difficulty": "challenging",
    "question": "Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy?",
    "gold_sql": "select t1.artist from cards as t1 inner join sets as t2 on t2.code = t1.setcode where (t2.name = 'coldsnap' and t1.artist = 'chippy') or (t2.name = 'coldsnap' and t1.artist = 'aaron miller') or (t2.name = 'coldsnap' and t1.artist = 'jeremy jarvis') group by t1.artist",
    "pred_sql": "select * from cards where artist in ('jeremy jarvis', 'aaron miller', 'chippy') and setcode = 'coldsnap'"
  },
  {
    "id": 387,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "Among the cards with converted mana cost higher than 5 in the set Coldsnap, how many of them have unknown power?",
    "gold_sql": "select sum(case when t1.power = '*' or t1.power is null then 1 else 0 end) from cards as t1 inner join sets as t2 on t2.code = t1.setcode where t2.name = 'coldsnap' and t1.convertedmanacost > 5",
    "pred_sql": "select count(*) from cards where convertedmanacost > 5 and power is null and setcode = '2xm'"
  },
  {
    "id": 388,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "What is the Italian flavor text of the card \"Ancestor's Chosen\"?",
    "gold_sql": "select t2.flavortext from cards as t1 inner join foreign_data as t2 on t2.uuid = t1.uuid where t1.name = 'ancestor''s chosen' and t2.language = 'italian'",
    "pred_sql": "select ft.text from foreign_data ft, cards c where ft.uuid = c.uuid and c.name = 'ancestor''s chosen' and ft.language = 'italian'"
  },
  {
    "id": 389,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "Please list the Italian text ruling of all the cards in the set Coldsnap.",
    "gold_sql": "select distinct t1.text from foreign_data as t1 inner join cards as t2 on t2.uuid = t1.uuid inner join sets as t3 on t3.code = t2.setcode where t3.name = 'coldsnap' and t1.language = 'italian'",
    "pred_sql": "select r.text from cards c join rulings r on c.uuid = r.uuid join sets s on c.uuid = s.uuid where s.code = 'coldsnap' and r.language = 'italian'"
  },
  {
    "id": 390,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.",
    "gold_sql": "select t2.name from foreign_data as t1 inner join cards as t2 on t2.uuid = t1.uuid inner join sets as t3 on t3.code = t2.setcode where t3.name = 'coldsnap' and t1.language = 'italian' order by t2.convertedmanacost desc",
    "pred_sql": "select name from cards where setcode = 'coldsnap' and convertedmanacost = (select max(convertedmanacost) from cards where setcode = 'coldsnap') and name like '%italian%'"
  },
  {
    "id": 391,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "What is the percentage of the cards with a converted mana cost of 7 in the set Coldsnap?",
    "gold_sql": "select cast(sum(case when t1.convertedmanacost = 7 then 1 else 0 end) as real) * 100 / count(t1.id) from cards as t1 inner join sets as t2 on t2.code = t1.setcode where t2.name = 'coldsnap'",
    "pred_sql": "select count(*) / (select count(*) from cards where setcode = '2xm') * 100 as percentage from cards where setcode = '2xm' and convertedmanacost = 7"
  },
  {
    "id": 392,
    "db_id": "card_games",
    "difficulty": "challenging",
    "question": "What is the percentage of incredibly powerful cards in the set Coldsnap?",
    "gold_sql": "select cast(sum(case when t1.cardkingdomfoilid is not null and t1.cardkingdomid is not null then 1 else 0 end) as real) * 100 / count(t1.id) from cards as t1 inner join sets as t2 on t2.code = t1.setcode where t2.name = 'coldsnap'",
    "pred_sql": "with powerful_cards as ( select * from cards where convertedmanacost > 3 and power > 4 and toughness > 4 ) select (select count(*) from powerful_cards) / (select count(*) from cards) * 100 as percentage from dual"
  },
  {
    "id": 393,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "Which of the play format has the highest number of banned status? Indicate the play format and the names of all the card meet the condition.",
    "gold_sql": "with maxbanned as (select format, count(*) as count_banned from legalities where status = 'banned' group by format order by count(*) desc limit 1) select t2.format, t1.name from cards as t1 inner join legalities as t2 on t2.uuid = t1.uuid inner join maxbanned mb on mb.format = t2.format where t2.status = 'banned'",
    "pred_sql": "select format, name from legalities where status = 'banned' group by format, name order by count(*) desc limit 1"
  },
  {
    "id": 394,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "Which cards are ranked 1st on EDHRec? List all of the cards name and its banned play format.",
    "gold_sql": "select t1.name, t2.format from cards as t1 inner join legalities as t2 on t2.uuid = t1.uuid where t1.edhrecrank = 1 and t2.status = 'banned' group by t1.name, t2.format",
    "pred_sql": "select c.name, l.status from cards c join legalities l on c.uuid = l.uuid where l.format = 'commander' and l.status = 'banned'"
  },
  {
    "id": 395,
    "db_id": "card_games",
    "difficulty": "challenging",
    "question": "List the names of all the cards in the set Hour of Devastation and find the formats in which these cards are legal.",
    "gold_sql": "select distinct t2.name , case when t1.status = 'legal' then t1.format else null end from legalities as t1 inner join cards as t2 on t2.uuid = t1.uuid where t2.setcode in ( select code from sets where name = 'hour of devastation' )",
    "pred_sql": "select c.name, l.status from cards c join legalities l on c.uuid = l.uuid join sets s on c.setcode = s.code where s.code = 'hou'"
  },
  {
    "id": 396,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "Find and list the names of sets which doesn't have Japanese translation but have Korean translation.",
    "gold_sql": "select name from sets where code in ( select setcode from set_translations where language = 'korean' and language not like '%japanese%' )",
    "pred_sql": "select s.code from sets s where not exists (select 1 from set_translations st where st.setcode = s.code and st.language = 'japanese') and exists (select 1 from set_translations st where st.setcode = s.code and st.language = 'korean')"
  },
  {
    "id": 397,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
    "gold_sql": "select distinct t1.frameversion, t1.name , iif(t2.status = 'banned', t1.name, 'no') from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid where t1.artist = 'allen williams'",
    "pred_sql": "select distinct frameeffects from cards where artist = 'pete venters' or artist = 'volkan baǵa' or artist = 'justin sweet'"
  },
  {
    "id": 398,
    "db_id": "toxicology",
    "difficulty": "simple",
    "question": "What is the most common bond type?",
    "gold_sql": "select t.bond_type from ( select bond_type, count(bond_id) from bond group by bond_type order by count(bond_id) desc limit 1 ) as t",
    "pred_sql": "with bond_counts as ( select bond_type, count(*) as count from bond group by bond_type ) select bond_type from bond_counts order by count desc limit 1"
  },
  {
    "id": 399,
    "db_id": "toxicology",
    "difficulty": "moderate",
    "question": "Calculate the average number of oxygen atoms in single-bonded molecules.",
    "gold_sql": "select avg(oxygen_count) from (select t1.molecule_id, count(t1.element) as oxygen_count from atom as t1 inner join bond as t2 on t1.molecule_id = t2.molecule_id where t2.bond_type = '-' and t1.element = 'o' group by t1.molecule_id) as oxygen_counts",
    "pred_sql": "with single_bonded_molecules as ( select m.molecule_id, count(*) as num_atoms from connected c join atom a on c.atom_id = a.atom_id join atom a2 on c.atom_id2 = a2.atom_id join bond b on c.bond_id = b.bond_id join molecule m on a.molecule_id = m.molecule_id where b.bond_type = '-' group by m.m"
  },
  {
    "id": 400,
    "db_id": "toxicology",
    "difficulty": "challenging",
    "question": "On average how many carcinogenic molecules are single bonded?",
    "gold_sql": "select avg(single_bond_count) from (select t3.molecule_id, count(t1.bond_type) as single_bond_count from bond as t1 inner join atom as t2 on t1.molecule_id = t2.molecule_id inner join molecule as t3 on t3.molecule_id = t2.molecule_id where t1.bond_type = '-' and t3.label = '+' group by t3.molecule_id) as subquery",
    "pred_sql": "with single_bonded as ( select m.molecule_id, count(*) as num_atoms from connected c join atom a on c.atom_id = a.atom_id join atom a2 on c.atom_id2 = a2.atom_id join bond b on c.bond_id = b.bond_id join molecule m on a.molecule_id = m.molecule_id where b.bond_type = '-' group by m.molecule_id"
  },
  {
    "id": 401,
    "db_id": "toxicology",
    "difficulty": "simple",
    "question": "Find the triple-bonded molecules which are carcinogenic.",
    "gold_sql": "select distinct t2.molecule_id from bond as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t1.bond_type = '#' and t2.label = '+'",
    "pred_sql": "with carcinogenic_molecules as ( select m.molecule_id from molecule m where m.label like '%+' ) select c.atom_id, c.atom_id2, b.bond_type from connected c join bond b on c.bond_id = b.bond_id join atom a1 on c.atom_id = a1.atom_id join atom a2 on c.atom_id2 = a2.atom_id join carcinogenic_molecules cm on a1"
  },
  {
    "id": 402,
    "db_id": "toxicology",
    "difficulty": "moderate",
    "question": "What is the percentage of carbon in double-bond molecules?",
    "gold_sql": "select cast(count(distinct case when t1.element = 'c' then t1.atom_id else null end) as real) * 100 / count(distinct t1.atom_id) from atom as t1 inner join bond as t2 on t1.molecule_id = t2.molecule_id where t2.bond_type = '='",
    "pred_sql": "with double_bond_molecules as ( select m.molecule_id, count(*) as num_atoms from connected c join atom a on c.atom_id = a.atom_id join atom a2 on c.atom_id2 = a2.atom_id join bond b on c.bond_id = b.bond_id join molecule m on a.molecule_id = m.molecule_id where b.bond_type = '-' group by m.molecule"
  },
  {
    "id": 403,
    "db_id": "toxicology",
    "difficulty": "challenging",
    "question": "What elements are in the TR004_8_9 bond atoms?",
    "gold_sql": "select distinct t1.element from atom as t1 inner join connected as t2 on t1.atom_id = t2.atom_id where t2.bond_id = 'tr004_8_9'",
    "pred_sql": "select a.element from connected c join atom a on c.atom_id = a.atom_id join atom a2 on c.atom_id2 = a2.atom_id where c.bond_id = 'tr000_8_9'"
  },
  {
    "id": 404,
    "db_id": "toxicology",
    "difficulty": "challenging",
    "question": "What elements are in a double type bond?",
    "gold_sql": "select distinct t1.element from atom as t1 inner join bond as t2 on t1.molecule_id = t2.molecule_id inner join connected as t3 on t1.atom_id = t3.atom_id where t2.bond_type = '='",
    "pred_sql": "select distinct a.element from connected c join atom a on c.atom_id = a.atom_id join connected c2 on c.atom_id2 = c2.atom_id join atom a2 on c2.atom_id2 = a2.atom_id where c.bond_id = c2.bond_id and a.element = a2.element and c.bond_id in (select bond_id from bond where bond_type = '-')"
  },
  {
    "id": 405,
    "db_id": "toxicology",
    "difficulty": "moderate",
    "question": "Which type of label is the most numerous in atoms with hydrogen?",
    "gold_sql": "select t.label from ( select t2.label, count(t2.molecule_id) from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t1.element = 'h' group by t2.label order by count(t2.molecule_id) desc limit 1 ) t",
    "pred_sql": "select label from molecule, atom where atom.molecule_id = molecule.molecule_id and element = 'h' group by label order by count(*) desc limit 1"
  },
  {
    "id": 406,
    "db_id": "toxicology",
    "difficulty": "challenging",
    "question": "Which element is the least numerous in non-carcinogenic molecules?",
    "gold_sql": "select t.element from (select t1.element, count(distinct t1.molecule_id) from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t2.label = '-' group by t1.element order by count(distinct t1.molecule_id) asc limit 1) t",
    "pred_sql": "with non_carcinogenic as (select m.molecule_id from molecule m where m.label like '+') select element, count(*) as count from atom a join connected c on a.atom_id = c.atom_id join connected c2 on a.atom_id = c2.atom_id2 join bond b on c.bond_id = b.bond_id join non_carcinogenic m on c.molecule_id = m.molecule_id group by element order by count"
  },
  {
    "id": 407,
    "db_id": "toxicology",
    "difficulty": "moderate",
    "question": "What type of bond is there between the atoms TR004_8 and TR004_20?",
    "gold_sql": "select t1.bond_type from bond as t1 inner join connected as t2 on t1.bond_id = t2.bond_id where t2.atom_id = 'tr004_8' and t2.atom_id2 = 'tr004_20' or t2.atom_id2 = 'tr004_8' and t2.atom_id = 'tr004_20'",
    "pred_sql": "select bond_type from bond where molecule_id in (select molecule_id from atom where atom_id in ('tr004_8', 'tr004_20')) and (select count(*) from connected where atom_id in ('tr004_8', 'tr004_20')) = 2"
  },
  {
    "id": 408,
    "db_id": "toxicology",
    "difficulty": "challenging",
    "question": "How many atoms with iodine and with sulfur type elements are there in single bond molecules?",
    "gold_sql": "select count(distinct case when t1.element = 'i' then t1.atom_id else null end) as iodine_nums , count(distinct case when t1.element = 's' then t1.atom_id else null end) as sulfur_nums from atom as t1 inner join connected as t2 on t1.atom_id = t2.atom_id inner join bond as t3 on t2.bond_id = t3.bond_id where t3.bond_type = '-'",
    "pred_sql": "select count(*) from atom as a join connected as c on a.atom_id = c.atom_id join connected as c2 on a.atom_id = c2.atom_id2 join bond as b on c.bond_id = b.bond_id join molecule as m on a.molecule_id = m.molecule_id where a.element in ('i', 's') and b.bond_type = '-'"
  },
  {
    "id": 409,
    "db_id": "toxicology",
    "difficulty": "challenging",
    "question": "What percentage of carcinogenic-type molecules does not contain fluorine?",
    "gold_sql": "select cast(count(distinct case when t1.element <> 'f' then t2.molecule_id else null end) as real) * 100 / count(distinct t2.molecule_id) from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t2.label = '+'",
    "pred_sql": "with carcinogenic as ( select molecule_id from molecule where label like '%+' ) select count(*) * 100.0 / (select count(*) from molecule where label like '%+') as percentage from atom where element!= 'f' and molecule_id in (select molecule_id from carcinogenic)"
  },
  {
    "id": 410,
    "db_id": "toxicology",
    "difficulty": "challenging",
    "question": "What is the percentage of carcinogenic molecules in triple type bonds?",
    "gold_sql": "select cast(count(distinct case when t2.label = '+' then t2.molecule_id else null end) as real) * 100 / count(distinct t2.molecule_id) from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id inner join bond as t3 on t2.molecule_id = t3.molecule_id where t3.bond_type = '#'",
    "pred_sql": "with carcinogenic_molecules as ( select molecule_id from molecule where label like '%-' ) select count(*) * 100.0 / (select count(*) from molecule) as percentage from carcinogenic_molecules cm join connected c on cm.molecule_id = c.atom_id join bond b on c.bond_id = b.bond_id where b.bond_type = '-'"
  },
  {
    "id": 411,
    "db_id": "toxicology",
    "difficulty": "challenging",
    "question": "Please list top three elements of the toxicology of the molecule TR000 in alphabetical order.",
    "gold_sql": "select distinct t.element from atom as t where t.molecule_id = 'tr000' order by t.element limit 3",
    "pred_sql": "with toxic_elements as ( select distinct a.element from atom a join connected c on a.atom_id = c.atom_id join connected c2 on c.atom_id2 = c2.atom_id2 join atom a2 on c2.atom_id = a2.atom_id where a.molecule_id = 'tr000' and a2.molecule_id = 'tr000' and a.element!= a2.element ) select element from toxic_elements order"
  },
  {
    "id": 412,
    "db_id": "toxicology",
    "difficulty": "moderate",
    "question": "What is the percentage of double bonds in the molecule TR008? Please provide your answer as a percentage with five decimal places.",
    "gold_sql": "select round(cast(count(case when t.bond_type = '=' then t.bond_id else null end) as real) * 100 / count(t.bond_id),5) from bond as t where t.molecule_id = 'tr008'",
    "pred_sql": "with double_bonds as ( select count(*) as count from connected where bond_id in ( select bond_id from bond where bond_type = '-' ) and atom_id in ( select atom_id from atom where molecule_id = 'tr008' ) and atom_id2 in ( select atom_id from atom where molecule_id = 'tr008' ) ) select round"
  },
  {
    "id": 413,
    "db_id": "toxicology",
    "difficulty": "simple",
    "question": "What is the percentage of molecules that are carcinogenic? Please provide your answer as a percentage with three decimal places.",
    "gold_sql": "select round(cast(count(case when t.label = '+' then t.molecule_id else null end) as real) * 100 / count(t.molecule_id),3) from molecule t",
    "pred_sql": "select round(count(case when label = '-' then 1 else null end) * 100.0 / (select count(*) from molecule), 3) as percentage"
  },
  {
    "id": 414,
    "db_id": "toxicology",
    "difficulty": "moderate",
    "question": "How much of the hydrogen in molecule TR206 is accounted for? Please provide your answer as a percentage with four decimal places.",
    "gold_sql": "select round(cast(count(case when t.element = 'h' then t.atom_id else null end) as real) * 100 / count(t.atom_id),4) from atom as t where t.molecule_id = 'tr206'",
    "pred_sql": "select round(100.0 * (select count(*) from atom where molecule_id = 'tr206' and element = 'h') / (select count(*) from atom where molecule_id = 'tr206') * 100.0, 4)"
  },
  {
    "id": 415,
    "db_id": "toxicology",
    "difficulty": "challenging",
    "question": "What are the elements of the toxicology and label of molecule TR060?",
    "gold_sql": "select distinct t1.element, t2.label from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t2.molecule_id = 'tr060'",
    "pred_sql": "select a.element, m.label from connected c join atom a on c.atom_id = a.atom_id join molecule m on a.molecule_id = m.molecule_id where c.atom_id in (select atom_id2 from connected where atom_id in (select atom_id from atom where molecule_id = 'tr060')) and m.molecule_id = 'tr060'"
  },
  {
    "id": 416,
    "db_id": "toxicology",
    "difficulty": "challenging",
    "question": "Which bond type accounted for the majority of the bonds found in molecule TR010 and state whether or not this molecule is carcinogenic?",
    "gold_sql": "select t.bond_type from ( select t1.bond_type, count(t1.molecule_id) from bond as t1 where t1.molecule_id = 'tr010' group by t1.bond_type order by count(t1.molecule_id) desc limit 1 ) as t",
    "pred_sql": "with bond_counts as ( select molecule_id, bond_type, count(*) as count from bond group by molecule_id, bond_type ) select bond_type from bond_counts where molecule_id = 'tr010' order by count desc limit 1;"
  },
  {
    "id": 417,
    "db_id": "toxicology",
    "difficulty": "moderate",
    "question": "Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order.",
    "gold_sql": "select distinct t2.molecule_id from bond as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t1.bond_type = '-' and t2.label = '-' order by t2.molecule_id limit 3",
    "pred_sql": "with single_bonds as ( select m.molecule_id, m.label from molecule m join connected c on m.molecule_id = c.atom_id join connected c2 on m.molecule_id = c2.atom_id2 join bond b on c.bond_id = b.bond_id and c2.bond_id = b.bond_id where b.bond_type = '-' group by m.molecule_id, m.label h"
  },
  {
    "id": 418,
    "db_id": "toxicology",
    "difficulty": "moderate",
    "question": "How many bonds which involved atom 12 does molecule TR009 have?",
    "gold_sql": "select count(t2.bond_id) from bond as t1 inner join connected as t2 on t1.bond_id = t2.bond_id where t1.molecule_id = 'tr009' and t2.atom_id = t1.molecule_id || '_1' or t2.atom_id2 = t1.molecule_id || '_2'",
    "pred_sql": "select count(*) from connected where atom_id in (select atom_id from atom where molecule_id = 'tr009') and atom_id2 in (select atom_id from atom where molecule_id = 'tr009') and bond_id in (select bond_id from bond where molecule_id = 'tr009')"
  },
  {
    "id": 419,
    "db_id": "toxicology",
    "difficulty": "moderate",
    "question": "What are the bond type and the atoms of the bond ID of TR001_6_9?",
    "gold_sql": "select t1.bond_type, t2.atom_id, t2.atom_id2 from bond as t1 inner join connected as t2 on t1.bond_id = t2.bond_id where t2.bond_id = 'tr001_6_9'",
    "pred_sql": "select b.bond_type, a1.element, a2.element from connected c join atom a1 on c.atom_id = a1.atom_id join atom a2 on c.atom_id2 = a2.atom_id join bond b on c.bond_id = b.bond_id where c.atom_id in (select atom_id from atom where molecule_id = (select molecule_id from molecule where label = 'tr001')) and c.atom_id2 in (select atom_id"
  },
  {
    "id": 420,
    "db_id": "toxicology",
    "difficulty": "simple",
    "question": "How many connections does the atom 19 have?",
    "gold_sql": "select count(t.bond_id) from connected as t where substr(t.atom_id, -2) = '19'",
    "pred_sql": "select count(*) from connected where atom_id in (select atom_id from atom where atom_id like 'tr19%') or atom_id2 in (select atom_id from atom where atom_id like 'tr19%')"
  },
  {
    "id": 421,
    "db_id": "toxicology",
    "difficulty": "challenging",
    "question": "List all the elements of the toxicology of the molecule \"TR004\".",
    "gold_sql": "select distinct t.element from atom as t where t.molecule_id = 'tr004'",
    "pred_sql": "with elements as ( select a.element from atom a join connected c on a.atom_id = c.atom_id join connected c2 on c.atom_id2 = c2.atom_id2 join atom a2 on c2.atom_id = a2.atom_id where a.molecule_id = 'tr004' and a2.molecule_id = 'tr004' and c.bond_id is not null group by a.element"
  },
  {
    "id": 422,
    "db_id": "toxicology",
    "difficulty": "moderate",
    "question": "Among all the atoms from 21 to 25, list all the molecules that are carcinogenic.",
    "gold_sql": "select distinct t2.molecule_id from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where substr(t1.atom_id, -2) between '21' and '25' and t2.label = '+'",
    "pred_sql": "with carcinogenic_molecules as ( select molecule_id from molecule where label like '%-' ) select distinct m.molecule_id from molecule m join connected c on m.molecule_id = c.atom_id join atom a on c.atom_id = a.atom_id where a.atom_id between 'tr000_21' and 'tr000_25' and m.molecule_id in (select * from carcinogenic_molecules)"
  },
  {
    "id": 423,
    "db_id": "toxicology",
    "difficulty": "moderate",
    "question": "What are the bonds that have phosphorus and nitrogen as their atom elements?",
    "gold_sql": "select t2.bond_id from atom as t1 inner join connected as t2 on t1.atom_id = t2.atom_id where t2.bond_id in ( select t3.bond_id from connected as t3 inner join atom as t4 on t3.atom_id = t4.atom_id where t4.element = 'p' ) and t1.element = 'n'",
    "pred_sql": "select b.bond_id from connected c join atom a1 on c.atom_id = a1.atom_id join atom a2 on c.atom_id2 = a2.atom_id join bond b on c.bond_id = b.bond_id where a1.element = 'p' and a2.element = 'n'"
  },
  {
    "id": 424,
    "db_id": "toxicology",
    "difficulty": "moderate",
    "question": "Is the molecule with the most double bonds carcinogenic?",
    "gold_sql": "select t1.label from molecule as t1 inner join ( select t.molecule_id, count(t.bond_type) from bond as t where t.bond_type = '=' group by t.molecule_id order by count(t.bond_type) desc limit 1 ) as t2 on t1.molecule_id = t2.molecule_id",
    "pred_sql": "with double_bonds as ( select molecule_id, count(*) as num_double_bonds from connected join bond on connected.bond_id = bond.bond_id where bond.bond_type = '-' group by molecule_id ) select label from molecule join double_bonds on molecule.molecule_id = double_bonds.molecule_id where num_double_bonds = (select max(num_double_bonds) from double_bonds) and label like '+'"
  },
  {
    "id": 425,
    "db_id": "toxicology",
    "difficulty": "moderate",
    "question": "What is the average number of bonds the atoms with the element iodine have?",
    "gold_sql": "select cast(count(t2.bond_id) as real) / count(t1.atom_id) from atom as t1 inner join connected as t2 on t1.atom_id = t2.atom_id where t1.element = 'i'",
    "pred_sql": "select avg(count(bond_id)) from connected c join atom a on c.atom_id = a.atom_id join atom a2 on c.atom_id2 = a2.atom_id where a.element = 'i'"
  },
  {
    "id": 426,
    "db_id": "toxicology",
    "difficulty": "challenging",
    "question": "List all the elements of atoms that can not bond with any other atoms.",
    "gold_sql": "select distinct t.element from atom as t where t.element not in ( select distinct t1.element from atom as t1 inner join connected as t2 on t1.atom_id = t2.atom_id )",
    "pred_sql": "with no_bonded_atoms as ( select a.atom_id, a.element from atom a left join connected c on a.atom_id = c.atom_id where c.atom_id2 is null ) select element from no_bonded_atoms group by element having count(*) = (select count(*) from atom)"
  },
  {
    "id": 427,
    "db_id": "toxicology",
    "difficulty": "simple",
    "question": "What are the atoms of the triple bond with the molecule \"TR041\"?",
    "gold_sql": "select t2.atom_id, t2.atom_id2 from atom as t1 inner join connected as t2 on t1.atom_id = t2.atom_id inner join bond as t3 on t2.bond_id = t3.bond_id where t3.bond_type = '#' and t3.molecule_id = 'tr041'",
    "pred_sql": "select a.element from connected c join atom a on c.atom_id = a.atom_id join connected c2 on c.atom_id2 = c2.atom_id join atom a2 on c2.atom_id = a2.atom_id join bond b on c.bond_id = b.bond_id join bond b2 on c2.bond_id = b2.bond_id join molecule m on a.molecule_id = m.molecule_id where m.molecule_id"
  },
  {
    "id": 428,
    "db_id": "toxicology",
    "difficulty": "challenging",
    "question": "What are the elements of the atoms of TR144_8_19?",
    "gold_sql": "select t2.element from connected as t1 inner join atom as t2 on t1.atom_id = t2.atom_id where t1.bond_id = 'tr144_8_19'",
    "pred_sql": "select element from atom where atom_id = 'tr144_8_19'"
  },
  {
    "id": 429,
    "db_id": "toxicology",
    "difficulty": "challenging",
    "question": "List the elements of all the triple bonds.",
    "gold_sql": "select distinct t3.element from bond as t1 inner join connected as t2 on t1.bond_id = t2.bond_id inner join atom as t3 on t2.atom_id = t3.atom_id where t1.bond_type = '#'",
    "pred_sql": "select element from atom where atom_id in (select atom_id2 from connected join bond on connected.bond_id = bond.bond_id where bond_type ='')"
  },
  {
    "id": 430,
    "db_id": "toxicology",
    "difficulty": "moderate",
    "question": "What proportion of single bonds are carcinogenic? Please provide your answer as a percentage with five decimal places.",
    "gold_sql": "select round(cast(count(case when t2.label = '+' then t1.bond_id else null end) as real) * 100 / count(t1.bond_id),5) from bond as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t1.bond_type = '-'",
    "pred_sql": "with carcinogenic_molecules as ( select molecule_id from molecule where label = '-' ) select round(100.0 * count(*) / (select count(*) from bond where bond_type = '-'), 5) as proportion from connected join atom on connected.atom_id = atom.atom_id join atom as atom2 on connected.atom_id2 = atom2.atom_id join bond on connected.bond_id = bond.bond_id where atom.molecule_id = atom2.molecule_id"
  },
  {
    "id": 431,
    "db_id": "toxicology",
    "difficulty": "moderate",
    "question": "Calculate the total atoms with triple-bond molecules containing the element phosphorus or bromine.",
    "gold_sql": "select count(t1.atom_id) from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id inner join bond as t3 on t2.molecule_id = t3.molecule_id where t3.bond_type = '#' and t1.element in ('p', 'br')",
    "pred_sql": "with triple_bond_molecules as ( select molecule_id from molecule where label like '%%' ) select count(*) from atom where element in ('p', 'br') and molecule_id in (select molecule_id from triple_bond_molecules)"
  },
  {
    "id": 432,
    "db_id": "toxicology",
    "difficulty": "challenging",
    "question": "What is the composition of element chlorine in percentage among the single bond molecules?",
    "gold_sql": "select cast(count(case when t.element = 'cl' then t.atom_id else null end) as real) * 100 / count(t.atom_id) from ( select t1.atom_id, t1.element from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id inner join bond as t3 on t2.molecule_id = t3.molecule_id where t3.bond_type = '-' ) as t",
    "pred_sql": "with single_bond_molecules as ( select molecule_id from connected join atom on connected.atom_id = atom.atom_id join atom as atom2 on connected.atom_id2 = atom2.atom_id join bond on connected.bond_id = bond.bond_id where bond.bond_type = '-' ) select (count(*) * 100.0) / (select count(*) from single_bond_molecules) as chlorine_percentage from"
  },
  {
    "id": 433,
    "db_id": "toxicology",
    "difficulty": "challenging",
    "question": "What are the elements for bond id TR001_10_11?",
    "gold_sql": "select t2.element from connected as t1 inner join atom as t2 on t1.atom_id = t2.atom_id where t1.bond_id = 'tr001_10_11'",
    "pred_sql": "select element from atom where atom_id in (select atom_id from connected where bond_id='tr001_10_11')"
  },
  {
    "id": 434,
    "db_id": "toxicology",
    "difficulty": "moderate",
    "question": "What is the percentage of element chlorine in carcinogenic molecules?",
    "gold_sql": "select cast(count( case when t1.element = 'cl' then t1.element else null end) as real) * 100 / count(t1.element) from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t2.label = '+'",
    "pred_sql": "with carcinogenic_molecules as ( select molecule_id from molecule where label like '%-' ) select 100.0 * count(case when element = 'cl' then 1 else null end) / count(*) * 100 as percentage from atom where molecule_id in (select molecule_id from carcinogenic_molecules)"
  },
  {
    "id": 435,
    "db_id": "toxicology",
    "difficulty": "challenging",
    "question": "Tally the toxicology element of the 4th atom of each molecule that was carcinogenic.",
    "gold_sql": "select distinct t1.element from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t2.label = '+' and substr(t1.atom_id, -1) = '4' and length(t1.atom_id) = 7",
    "pred_sql": "with molecule_atoms as ( select molecule_id, atom_id, element from atom where atom_id in ( select atom_id from connected group by atom_id having count(*) = 4 ) ), carcinogenic_molecules as ( select molecule_id from molecule where label like '%-' ) select element from molecule_atoms where molecule_id in (select molecule_id from carcinogenic_molecules) order by"
  },
  {
    "id": 436,
    "db_id": "toxicology",
    "difficulty": "challenging",
    "question": "What is the ratio of Hydrogen elements in molecule ID TR006? List the ratio with its label.",
    "gold_sql": "with subquery as (select distinct t1.atom_id, t1.element, t1.molecule_id, t2.label from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t2.molecule_id = 'tr006') select cast(count(case when element = 'h' then atom_id else null end) as real) / (case when count(atom_id) = 0 then null else count(atom_id) end) as ratio, label from subquery group by label",
    "pred_sql": "with molecule_atoms as ( select m.molecule_id, a.element, count(*) as count from atom a join molecule m on a.molecule_id = m.molecule_id where m.molecule_id = 'tr006' group by m.molecule_id, a.element ) select 'tr006', element, count / (select count(*) from molecule_atoms where molecule_id = 'tr006' and element = 'h') as ratio from molecule_atoms"
  },
  {
    "id": 437,
    "db_id": "toxicology",
    "difficulty": "moderate",
    "question": "Which non-carcinogenic molecules consisted more than 5 atoms?",
    "gold_sql": "select t.molecule_id from ( select t1.molecule_id, count(t2.atom_id) from molecule as t1 inner join atom as t2 on t1.molecule_id = t2.molecule_id where t1.label = '-' group by t1.molecule_id having count(t2.atom_id) > 5 ) t",
    "pred_sql": "with molecule_atoms as ( select molecule_id, count(*) as num_atoms from atom group by molecule_id having count(*) > 5 ) select m.label from molecule_atoms ma join molecule m on ma.molecule_id = m.molecule_id"
  },
  {
    "id": 438,
    "db_id": "california_schools",
    "difficulty": "simple",
    "question": "How many schools with an average score in Math greater than 400 in the SAT test are exclusively virtual?",
    "gold_sql": "select count(distinct t2.school) from satscores as t1 inner join schools as t2 on t1.cds = t2.cdscode where t2.virtual = 'f' and t1.avgscrmath > 400",
    "pred_sql": "with virtual_schools as ( select s.cdscode, s.sname, s.dname, s.cname, s.enroll12, s.numtsttakr, s.avgscrmath from satscores s where s.avgscrmath > 400 and s.virtual = '1' ) select count(*) from virtual_schools"
  },
  {
    "id": 439,
    "db_id": "california_schools",
    "difficulty": "simple",
    "question": "Please list the codes of the schools with a total enrollment of over 500.",
    "gold_sql": "select t2.cdscode from schools as t1 inner join frpm as t2 on t1.cdscode = t2.cdscode where t2.`enrollment (k-12)` + t2.`enrollment (ages 5-17)` > 500",
    "pred_sql": "select cdscode from frpm where enrollment (k-12) > 500"
  },
  {
    "id": 440,
    "db_id": "california_schools",
    "difficulty": "moderate",
    "question": "Among the schools with an SAT excellence rate of over 0.3, what is the highest eligible free rate for students aged 5-17?",
    "gold_sql": "select max(cast(t1.`free meal count (ages 5-17)` as real) / t1.`enrollment (ages 5-17)`) from frpm as t1 inner join satscores as t2 on t1.cdscode = t2.cds where cast(t2.numge1500 as real) / t2.numtsttakr > 0.3",
    "pred_sql": "with eligible_free_rate as ( select frpm.cdscode, max(frpm.percent (%) eligible free (ages 5-17)) as highest_eligible_free_rate from frpm where frpm.percent (%) eligible free (ages 5-17) > 0.3 group by frpm.cdscode ) select highest_eligible_free_rate from eligible"
  },
  {
    "id": 441,
    "db_id": "california_schools",
    "difficulty": "simple",
    "question": "Rank schools by their average score in Writing where the score is greater than 499, showing their charter numbers.",
    "gold_sql": "select charternum, avgscrwrite, rank() over (order by avgscrwrite desc) as writingscorerank from schools as t1 inner join satscores as t2 on t1.cdscode = t2.cds where t2.avgscrwrite > 499 and charternum is not null",
    "pred_sql": "with ranked_schools as ( select s.cdscode, s.sname, s.dname, s.cname, avg(s.avgscrwrite) as avg_write_score from satscores s where s.avgscrwrite > 499 group by s.cdscode, s.sname, s.dname, s.cname order by avg_write_score desc ) select cdscode, sname, dname, cname, avg_write_score"
  },
  {
    "id": 442,
    "db_id": "california_schools",
    "difficulty": "moderate",
    "question": "List the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools.",
    "gold_sql": "select t1.school, t1.street from schools as t1 inner join frpm as t2 on t1.cdscode = t2.cdscode where t2.`enrollment (k-12)` - t2.`enrollment (ages 5-17)` > 30",
    "pred_sql": "with diff as ( select s.cdscode, s.street, abs(s.enrollment (k-12) - s.enrollment (ages 5-17)) as diff from frpm s where abs(s.enrollment (k-12) - s.enrollment (ages 5-17)) > 30 ) select cdscode, street from diff"
  },
  {
    "id": 443,
    "db_id": "california_schools",
    "difficulty": "moderate",
    "question": "Give the names of the schools with the percent eligible for free meals in K-12 is more than 0.1 and test takers whose test score is greater than or equal to 1500?",
    "gold_sql": "select t2.`school name` from satscores as t1 inner join frpm as t2 on t1.cds = t2.cdscode where cast(t2.`free meal count (k-12)` as real) / t2.`enrollment (k-12)` > 0.1 and t1.numge1500 > 0",
    "pred_sql": "with school_data as ( select s.cdscode, s.school, frpm.percent (%) eligible free (k-12) as percent_eligible_free_k12, satscores.avgscrread as avg_scr_read, satscores.avgscrmath as avg_scr_math, satscores.avgscrwrite as avg_scr_write from frpm join satscores on"
  },
  {
    "id": 444,
    "db_id": "california_schools",
    "difficulty": "moderate",
    "question": "Name schools in Riverside which the average of average math score for SAT is grater than 400, what is the funding type of these schools?",
    "gold_sql": "select t1.sname, t2.`charter funding type` from satscores as t1 inner join frpm as t2 on t1.cds = t2.cdscode where t2.`district name` like 'riverside%' group by t1.sname, t2.`charter funding type` having cast(sum(t1.avgscrmath) as real) / count(t1.cds) > 400",
    "pred_sql": "with avg_math_scores as ( select s.cdscode, avg(s.avgscrmath) as avg_math_score from satscores s group by s.cdscode ) select f.funding_type from schools s join avg_math_scores am on s.cdscode = am.cdscode where s.county = 'riverside' and am.avg_math_score > 400"
  },
  {
    "id": 445,
    "db_id": "california_schools",
    "difficulty": "moderate",
    "question": "State the names and full communication address of high schools in Monterey which has more than 800 free or reduced price meals for ages 15-17?",
    "gold_sql": "select t1.`school name`, t2.street, t2.city, t2.state, t2.zip from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.county = 'monterey' and t1.`free meal count (ages 5-17)` > 800 and t1.`school type` = 'high schools (public)'",
    "pred_sql": "with high_schools as ( select s.cdscode, s.school, s.street, s.city, s.zip, s.state, s.mailstreet, s.mailcity, s.mailzip, s.mailstate from schools s join frpm f on s.cdscode = f.cdscode where f.`county code` = '06' and f.`district code` = '10017' and f.`school type` = 'high schools ("
  },
  {
    "id": 446,
    "db_id": "california_schools",
    "difficulty": "moderate",
    "question": "What is the average score in writing for the schools that were opened after 1991 or closed before 2000? List the school names along with the score. Also, list the communication number of the schools if there is any.",
    "gold_sql": "select t2.school, t1.avgscrwrite, t2.phone from schools as t2 left join satscores as t1 on t2.cdscode = t1.cds where strftime('%y', t2.opendate) > '1991' or strftime('%y', t2.closeddate) < '2000'",
    "pred_sql": "with avg_scores as ( select sname, avgscrwrite, charter, phone from satscores s join schools sc on s.cds = sc.cdscode where sc.opendate > '1991-01-01' or sc.closeddate < '2000-01-01' ) select sname, avgscrwrite, phone from avg_scores where charter = 0"
  },
  {
    "id": 447,
    "db_id": "california_schools",
    "difficulty": "challenging",
    "question": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average.",
    "gold_sql": "select t2.school, t2.doc from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.fundingtype = 'locally funded' and (t1.`enrollment (k-12)` - t1.`enrollment (ages 5-17)`) > (select avg(t3.`enrollment (k-12)` - t3.`enrollment (ages 5-17)`) from frpm as t3 inner join schools as t4 on t3.cdscode = t4.cdscode where t4.fundingtype = 'locally funded')",
    "pred_sql": "with avg_diff as ( select avg(abs(enrollment_15_17 - enrollment_k12)) as avg_diff from ( select s.cdscode, s.enrollment_15_17, s.enrollment_k12, case when s.funding_type = 'directly funded' then 1 else 0 end as is_locally_funded from frpm s ) as subquery"
  },
  {
    "id": 448,
    "db_id": "california_schools",
    "difficulty": "moderate",
    "question": "What is the eligible free rate of the 10th and 11th schools with the highest enrolment for students in grades 1 through 12?",
    "gold_sql": "select cast(`free meal count (k-12)` as real) / `enrollment (k-12)` from frpm order by `enrollment (k-12)` desc limit 9, 2",
    "pred_sql": "with top_10_enrolled as ( select *, row_number() over (order by enrollment (k-12) desc) as row_num from frpm ) select percent (%) eligible free (k-12) as eligible_free_rate from top_10_enrolled where row_num <= 10 and low grade = '1' and high grade = '12'"
  },
  {
    "id": 449,
    "db_id": "california_schools",
    "difficulty": "moderate",
    "question": "What is the eligible free or reduced price meal rate for the top 5 schools in grades 1-12 with the highest free or reduced price meal count of the schools with the ownership code 66?",
    "gold_sql": "select cast(t1.`frpm count (k-12)` as real) / t1.`enrollment (k-12)` from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.soc = 66 order by t1.`frpm count (k-12)` desc limit 5",
    "pred_sql": "with top_5_schools as ( select *, round(sum(case when educationaloptiontype = 'k-12' then frpmcount(k-12) else 0 end) / sum(enrollment(k-12)) * 100, 2) as eligible_free_rate from frpm where districttype = 'public' and irc = 1 and educationaloptiontype = 'k-12' group by cdscode order by"
  },
  {
    "id": 450,
    "db_id": "california_schools",
    "difficulty": "moderate",
    "question": "What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State.",
    "gold_sql": "select t2.street, t2.city, t2.state, t2.zip from satscores as t1 inner join schools as t2 on t1.cds = t2.cdscode order by cast(t1.numge1500 as real) / t1.numtsttakr asc limit 1",
    "pred_sql": "select street, city, zip, state from schools where (avgscrread + avgscrmath + avgscrwrite) / 3 = (select min((avgscrread + avgscrmath + avgscrwrite) / 3) from satscores) and cdscode in (select cds from satscores)"
  },
  {
    "id": 451,
    "db_id": "california_schools",
    "difficulty": "challenging",
    "question": "Under whose administration is the school with the highest number of students scoring 1500 or more on the SAT? Indicate their full names.",
    "gold_sql": "select t2.admfname1, t2.admlname1, t2.admfname2, t2.admlname2, t2.admfname3, t2.admlname3 from satscores as t1 inner join schools as t2 on t1.cds = t2.cdscode order by t1.numge1500 desc limit 1",
    "pred_sql": "with school_admin as ( select s.cdscode, s.sname, s.dname, s.cname, count(*) as num_students, sum(s.numtsttakr) as total_tests_taken from satscores s where s.avgscrread >= 1500 or s.avgscrmath >= 1500 or s.avgscrwrite >= 1500 group by s.cds, s.sname, s.dname, s.cname"
  },
  {
    "id": 452,
    "db_id": "california_schools",
    "difficulty": "simple",
    "question": "What is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980?",
    "gold_sql": "select avg(t1.numtsttakr) from satscores as t1 inner join schools as t2 on t1.cds = t2.cdscode where strftime('%y', t2.opendate) = '1980' and t2.county = 'fresno'",
    "pred_sql": "select avg(numtsttakr) from satscores where cds in (select cdscode from schools where county='fresno' and opendate between '1980-01-01' and '1980-12-31')"
  },
  {
    "id": 453,
    "db_id": "california_schools",
    "difficulty": "moderate",
    "question": "What is the telephone number for the school with the lowest average score in reading in Fresno Unified?",
    "gold_sql": "select t2.phone from satscores as t1 inner join schools as t2 on t1.cds = t2.cdscode where t2.district = 'fresno unified' and t1.avgscrread is not null order by t1.avgscrread asc limit 1",
    "pred_sql": "select phone from schools where cdscode in (select cds from satscores where rtype = 'd' order by avgscrread limit 1)"
  },
  {
    "id": 454,
    "db_id": "california_schools",
    "difficulty": "simple",
    "question": "List the names of virtual schools that are among the top 5 in their respective counties based on average reading scores.",
    "gold_sql": "select school from (select t2.school,t1.avgscrread, rank() over (partition by t2.county order by t1.avgscrread desc) as rnk from satscores as t1 inner join schools as t2 on t1.cds = t2.cdscode where t2.virtual = 'f' ) ranked_schools where rnk <= 5",
    "pred_sql": "with top_virtual_schools as ( select s.cname, avg(s.avgscrread) as avg_reading_score from satscores s where s.rtype = 's' and s.virtual = 'yes' group by s.cname order by avg_reading_score desc limit 5 ) select distinct s.cname, s.sname from top_virtual_schools tv join schools s on tv.cname = s.cname where s"
  },
  {
    "id": 455,
    "db_id": "california_schools",
    "difficulty": "moderate",
    "question": "What is the average writing score of each of the schools managed by Ricci Ulrich? List the schools and the corresponding average writing scores.",
    "gold_sql": "select t2.school, t1.avgscrwrite from satscores as t1 inner join schools as t2 on t1.cds = t2.cdscode where t2.admfname1 = 'ricci' and t2.admlname1 = 'ulrich'",
    "pred_sql": "with ricci_ulrich_schools as ( select s.cdscode, avg(s.avgscrwrite) as avg_write_score from satscores s join schools sc on s.cds = sc.cdscode where sc.admfname1 = 'ricci' and sc.admlname1 = 'ulrich' group by s.cds ) select * from ricci_ulrich_schools"
  },
  {
    "id": 456,
    "db_id": "california_schools",
    "difficulty": "simple",
    "question": "Which state special schools have the highest number of enrollees from grades 1 through 12?",
    "gold_sql": "select t2.school from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.doc = 31 order by t1.`enrollment (k-12)` desc limit 1",
    "pred_sql": "with state_special_schools as ( select s.cname, count(*) as num_enrollees from frpm f join schools s on f.cdscode = s.cdscode where s.statustype = 'state special school' group by s.cname ) select cname, num_enrollees from state_special_schools order by num_enrollees desc limit 1"
  },
  {
    "id": 457,
    "db_id": "california_schools",
    "difficulty": "moderate",
    "question": "What is the monthly average number of schools that opened in Alameda County under the jurisdiction of the Elementary School District in 1980?",
    "gold_sql": "select cast(count(school) as real) / 12 from schools where doc = 52 and county = 'alameda' and strftime('%y', opendate) = '1980'",
    "pred_sql": "with opened_schools as ( select count(*) as num_opened from schools where county = 'alameda' and district = 'elementary school district' and opendate >= '1980-01-01' and opendate <= '1980-12-31' ) select avg(num_opened) as monthly_avg_opened from opened_schools"
  },
  {
    "id": 458,
    "db_id": "california_schools",
    "difficulty": "moderate",
    "question": "What is the ratio of merged Unified School District schools in Orange County to merged Elementary School District schools?",
    "gold_sql": "select cast(sum(case when doc = 54 then 1 else 0 end) as real) / sum(case when doc = 52 then 1 else 0 end) from schools where statustype = 'merged' and county = 'orange'",
    "pred_sql": "with merged_districts as ( select count(case when district type = 'unified' then 1 else null end) as unified_count, count(case when district type = 'elementary' then 1 else null end) as elementary_count from frpm where county code = '01' and district type in ('unified', 'elementary') ) select (unified_count / elementary_count) as ratio from merged_districts"
  },
  {
    "id": 459,
    "db_id": "california_schools",
    "difficulty": "simple",
    "question": "What is the postal street address for the school with the 7th highest Math average? Indicate the school's name.",
    "gold_sql": "select t2.mailstreet, t2.school from satscores as t1 inner join schools as t2 on t1.cds = t2.cdscode order by t1.avgscrmath desc limit 6, 1",
    "pred_sql": "with avg_math as ( select sname, avgscrmath from satscores order by avgscrmath desc limit 7, 1 ) select postal_street_address from schools where sname = (select sname from avg_math) and cdscode in ( select cds from satscores where sname = (select sname from avg_math) );"
  },
  {
    "id": 460,
    "db_id": "california_schools",
    "difficulty": "challenging",
    "question": "What is the total number of non-chartered schools in the county of Los Angeles with a percent (%) of eligible free meals for grades 1 through 12 that is less than 0.18%?",
    "gold_sql": "select count(t2.school) from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.county = 'los angeles' and t2.charter = 0 and cast(t1.`free meal count (k-12)` as real) * 100 / t1.`enrollment (k-12)` < 0.18",
    "pred_sql": "select count(*) from frpm where county code = '07' and charter school (y/n) = 0 and percent (%) eligible free (k-12) < 0.18"
  },
  {
    "id": 461,
    "db_id": "california_schools",
    "difficulty": "moderate",
    "question": "How many students from the ages of 5 to 17 are enrolled at the State Special School school in Fremont for the 2014-2015 academic year?",
    "gold_sql": "select t1.`enrollment (ages 5-17)` from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.edopscode = 'sss' and t2.city = 'fremont' and t1.`academic year` between 2014 and 2015",
    "pred_sql": "select sum(enrollment (ages 5-17)) from frpm where cdscode in (select cds from satscores where rtype = 's' and sname = 'state special school') and academic year = '2014-2015' and county code = '01' and district code = '10017' and school code = '01100170118489'"
  },
  {
    "id": 462,
    "db_id": "california_schools",
    "difficulty": "moderate",
    "question": "Which schools served a grade span of Kindergarten to 9th grade in the county of Los Angeles and what is its Percent (%) Eligible FRPM (Ages 5-17)?",
    "gold_sql": "select t2.school, t1.`frpm count (ages 5-17)` * 100 / t1.`enrollment (ages 5-17)` from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.county = 'los angeles' and t2.gsserved = 'k-9'",
    "pred_sql": "select s.cdscode, s.school, frpm.percent (%) eligible frpm (ages 5-17) from schools s join frpm on s.cdscode = frpm.cdscode where s.county = 'los angeles' and s.low grade = 'k' and s.high grade = '9'"
  },
  {
    "id": 463,
    "db_id": "california_schools",
    "difficulty": "moderate",
    "question": "Between San Diego and Santa Barbara, which county offers the most number of schools that does not offer physical building? Indicate the amount.",
    "gold_sql": "select county, count(virtual) from schools where (county = 'san diego' or county = 'santa barbara') and virtual = 'f' group by county order by count(virtual) desc limit 1",
    "pred_sql": "with schools_without_physical_building as ( select county, count(*) as num_schools from schools where virtual = 'y' group by county ) select county, num_schools from schools_without_physical_building where county between 'san diego' and 'santa barbara' order by num_schools desc limit 1"
  },
  {
    "id": 464,
    "db_id": "california_schools",
    "difficulty": "simple",
    "question": "What is the grade span offered in the school with the highest longitude?",
    "gold_sql": "select gsoffered from schools order by abs(longitude) desc limit 1",
    "pred_sql": "with max_long as (select max(longitude) as max_long from schools) select gsoffered from schools where longitude = (select max_long from max_long) and school = (select school from schools where longitude = (select max_long from max_long))"
  },
  {
    "id": 465,
    "db_id": "california_schools",
    "difficulty": "challenging",
    "question": "Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city.",
    "gold_sql": "select t2.city, count(t2.cdscode) from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.magnet = 1 and t2.gsoffered = 'k-8' and t1.`nslp provision status` = 'multiple provision types' group by t2.city",
    "pred_sql": "with magnet_schools as ( select s.cdscode, s.city, s.school, s.statustype, s.magnet from schools s where s.magnet = 1 and s.gsoffered like '%k-8%' ) select count(distinct m.city), m.city, count(*) as num_schools from magnet_schools m group by m.city"
  },
  {
    "id": 466,
    "db_id": "california_schools",
    "difficulty": "moderate",
    "question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school.",
    "gold_sql": "select t1.`free meal count (k-12)` * 100 / t1.`enrollment (k-12)`, t1.`district code` from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.admfname1 = 'alusine'",
    "pred_sql": "select district code from frpm where 'alusine' in (admfname1, admlname1, admfname2, admlname2, admfname3, admlname3) and percent (%) eligible free (k-12) is not null"
  },
  {
    "id": 467,
    "db_id": "california_schools",
    "difficulty": "challenging",
    "question": "What are the valid e-mail addresses of the administrator of the school located in the San Bernardino county, City of San Bernardino City Unified that opened between 1/1/2009 to 12/31/2010 whose school types are public Intermediate/Middle Schools and Unified Schools?",
    "gold_sql": "select t2.admemail1, t2.admemail2 from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.county = 'san bernardino' and t2.city = 'san bernardino' and t2.doc = 54 and strftime('%y', t2.opendate) between '2009' and '2010' and t2.soc = 62",
    "pred_sql": "select admemail1, admemail2, admemail3 from schools where county = 'san bernardino' and city = 'san bernardino' and district = 'san bernardino city unified' and opendate between '2009-01-01' and '2010-12-31' and schooltype in ('public intermediate/middle schools', 'unified schools')"
  },
  {
    "id": 468,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "How many accounts who choose issuance after transaction are staying in East Bohemia region?",
    "gold_sql": "select count(t2.account_id) from district as t1 inner join account as t2 on t1.district_id = t2.district_id where t1.a3 = 'east bohemia' and t2.frequency = 'poplatek po obratu'",
    "pred_sql": "select count(*) from account where frequency = 'poplatek mesicne' and district_id in (select district_id from district where a2 like '%východní čechy%')"
  },
  {
    "id": 469,
    "db_id": "financial",
    "difficulty": "simple",
    "question": "List out the no. of districts that have female average salary is more than 6000 but less than 10000?",
    "gold_sql": "select count(distinct t2.district_id) from client as t1 inner join district as t2 on t1.district_id = t2.district_id where t1.gender = 'f' and t2.a11 between 6000 and 10000",
    "pred_sql": "with district_avg_salary as ( select district_id, avg(a10) as avg_salary from district group by district_id ) select count(*) from district_avg_salary where avg_salary > 6000 and avg_salary < 10000"
  },
  {
    "id": 470,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "How many male customers who are living in North Bohemia have average salary greater than 8000?",
    "gold_sql": "select count(t1.client_id) from client as t1 inner join district as t2 on t1.district_id = t2.district_id where t1.gender = 'm' and t2.a3 = 'north bohemia' and t2.a11 > 8000",
    "pred_sql": "with client_avg_salary as ( select client_id, avg(a16) as avg_salary from client join district on client.district_id = district.district_id where district.a2 like 'north bohemia' and gender = 'm' group by client_id ) select count(*) from client_avg_salary where avg_salary > 800"
  },
  {
    "id": 471,
    "db_id": "financial",
    "difficulty": "challenging",
    "question": "List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary?",
    "gold_sql": "select t1.account_id , ( select max(a11) - min(a11) from district ) from account as t1 inner join district as t2 on t1.district_id = t2.district_id inner join disp as t3 on t1.account_id = t3.account_id inner join client as t4 on t3.client_id = t4.client_id where t2.district_id = ( select district_id from client where gender = 'f' order by birth_date asc limit 1 ) order by t2.a11 desc limit 1",
    "pred_sql": "with client_avg_salary as ( select client_id, avg(a16) as avg_salary from client group by client_id ) select account_id from client join client_avg_salary on client.client_id = client_avg_salary.client_id where gender = 'f' order by avg_salary asc limit 1"
  },
  {
    "id": 472,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "List out the account numbers of clients who are youngest and have highest average salary?",
    "gold_sql": "select t1.account_id from account as t1 inner join disp as t2 on t1.account_id = t2.account_id inner join client as t3 on t2.client_id = t3.client_id inner join district as t4 on t4.district_id = t1.district_id where t2.client_id = ( select client_id from client order by birth_date desc limit 1) group by t4.a11, t1.account_id",
    "pred_sql": "with client_avg_salary as ( select client_id, avg(a16) as avg_salary from client join district on client.district_id = district.district_id group by client_id ) select account_id from client join client_avg_salary on client.client_id = client_avg_salary.client_id where client.birth_date = (select min(birth_date) from client) order by client_avg_salary.avg_salary desc limit 1"
  },
  {
    "id": 473,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "Among the accounts who have approved loan date in 1997, list out the accounts that have the lowest approved amount and choose weekly issuance statement.",
    "gold_sql": "select t2.account_id from loan as t1 inner join account as t2 on t1.account_id = t2.account_id where strftime('%y', t1.date) = '1997' and t2.frequency = 'poplatek tydne' order by t1.amount limit 1",
    "pred_sql": "with lowest_approved_amount as ( select account_id, min(amount) as min_amount from loan where date like '1997-%' group by account_id ) select a.account_id, a.frequency, a.date from account a join lowest_approved_amount la on a.account_id = la.account_id where a.account_id in ( select account_id from loan where date like '1997-%' order by amount limit 1"
  },
  {
    "id": 474,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "Among the accounts who have loan validity more than 12 months, list out the accounts that have the highest approved amount and have account opening date in 1993.",
    "gold_sql": "select t1.account_id from loan as t1 inner join account as t2 on t1.account_id = t2.account_id where strftime('%y', t2.date) = '1993' and t1.duration > 12 order by t1.amount desc limit 1",
    "pred_sql": "with loaned_accounts as ( select account_id, sum(amount) as total_loan from loan where duration > 12 group by account_id ) select account_id from account join loaned_accounts on account.account_id = loaned_accounts.account_id where account.date like '1993-%' order by total_loan desc limit 1"
  },
  {
    "id": 475,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "Among the account opened, how many female customers who were born before 1950 and stayed in Sokolov?",
    "gold_sql": "select count(t2.client_id) from district as t1 inner join client as t2 on t1.district_id = t2.district_id where t2.gender = 'f' and strftime('%y', t2.birth_date) < '1950' and t1.a2 = 'sokolov'",
    "pred_sql": "select count(*) from client where gender = 'f' and birth_date < '1950-01-01' and district_id in (select district_id from district where a2 like '%sokolov%')"
  },
  {
    "id": 476,
    "db_id": "financial",
    "difficulty": "simple",
    "question": "For the female client who was born in 1976/1/29, which district did she opened her account?",
    "gold_sql": "select t1.a2 from district as t1 inner join client as t2 on t1.district_id = t2.district_id where t2.birth_date = '1976-01-29' and t2.gender = 'f'",
    "pred_sql": "select district_id from client where gender = 'f' and birth_date = '1970-12-13'"
  },
  {
    "id": 477,
    "db_id": "financial",
    "difficulty": "challenging",
    "question": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?",
    "gold_sql": "select cast(sum(t1.gender = 'm') as real) * 100 / count(t1.client_id) from client as t1 inner join district as t2 on t1.district_id = t2.district_id where t2.a3 = 'south bohemia' group by t2.a4 order by t2.a4 desc limit 1",
    "pred_sql": "with south_bohemia as ( select district_id, count(*) as count from client join district on client.district_id = district.district_id where a2 like '%jihočeský%' group by district_id order by count desc limit 1 ) select 100.0 * count(gender = 'm') / (select count from south_bohemia) as percentage from client join district on client"
  },
  {
    "id": 478,
    "db_id": "financial",
    "difficulty": "challenging",
    "question": "For the client whose loan was approved first in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27?",
    "gold_sql": "select cast((sum(iif(t3.date = '1998-12-27', t3.balance, 0)) - sum(iif(t3.date = '1993-03-22', t3.balance, 0))) as real) * 100 / sum(iif(t3.date = '1993-03-22', t3.balance, 0)) from loan as t1 inner join account as t2 on t1.account_id = t2.account_id inner join trans as t3 on t3.account_id = t2.account_id where t1.date = '1993-07-05'",
    "pred_sql": "with client_loan as ( select client_id, min(date) as min_date from loan where date like '1993-07-05%' group by client_id ) select (select balance from trans where account_id in ( select account_id from account where client_id = c.client_id and date between '1993-03-22' and '1998-12-27' ) order by"
  },
  {
    "id": 479,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "What is the percentage of loan amount that has been fully paid with no issue.",
    "gold_sql": "select (cast(sum(case when status = 'a' then amount else 0 end) as real) * 100) / sum(amount) from loan",
    "pred_sql": "select (sum(case when status = 'a' then amount else 0 end) / sum(amount)) * 100 as percentage from loan"
  },
  {
    "id": 480,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "For loan amount less than USD100,000, what is the percentage of accounts that is still running with no issue.",
    "gold_sql": "select cast(sum(status = 'c') as real) * 100 / count(account_id) from loan where amount < 100000",
    "pred_sql": "with running_loans as ( select account_id from loan where status = 'a' ) select (count(*) / (select count(*) from account)) * 100 as percentage from running_loans where amount < 100000"
  },
  {
    "id": 481,
    "db_id": "financial",
    "difficulty": "challenging",
    "question": "For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996.",
    "gold_sql": "select cast((t3.a13 - t3.a12) as real) * 100 / t3.a12 from loan as t1 inner join account as t2 on t1.account_id = t2.account_id inner join district as t3 on t2.district_id = t3.district_id where t1.status = 'd'",
    "pred_sql": "with running_loans as ( select l.account_id, l.date, l.amount, l.duration, l.status from loan l where l.status!= 'a' ) select d.a2, d.a13 from running_loans rl join account a on rl.account_id = a.account_id join client c on a.district_id = c.district_id join district d on c.district_id = d.district_id where rl.date between '1995"
  },
  {
    "id": 482,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "List the top nine districts, by descending order, from the highest to the lowest, the number of female account holders.",
    "gold_sql": "select t2.a2, count(t1.client_id) from client as t1 inner join district as t2 on t1.district_id = t2.district_id where t1.gender = 'f' group by t2.district_id, t2.a2 order by count(t1.client_id) desc limit 9",
    "pred_sql": "select district_id, count(*) as female_count from client where gender = 'f' group by district_id order by female_count desc limit 9"
  },
  {
    "id": 483,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "Between 1/1/1995 and 12/31/1997, how many loans in the amount of at least 250,000 per account that chose monthly statement issuance were approved?",
    "gold_sql": "select count(t1.account_id) from account as t1 inner join loan as t2 on t1.account_id = t2.account_id where t2.date between '1995-01-01' and '1997-12-31' and t1.frequency = 'poplatek mesicne' and t2.amount >= 250000",
    "pred_sql": "with loan_data as ( select account_id, count(*) as loan_count from loan where date between '1995-01-01' and '1997-12-31' and amount >= 250000 and frequency = 'poplatek mesicne' group by account_id ) select count(*) from loan_data where loan_count > 0"
  },
  {
    "id": 484,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "How many accounts have running contracts in Branch location 1?",
    "gold_sql": "select count(t1.account_id) from account as t1 inner join district as t2 on t1.district_id = t2.district_id inner join loan as t3 on t1.account_id = t3.account_id where t1.district_id = 1 and (t3.status = 'c' or t3.status = 'd')",
    "pred_sql": "select count(*) from account where district_id = 18 and frequency = 'poplatek mesicne'"
  },
  {
    "id": 485,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?",
    "gold_sql": "select count(t1.client_id) from client as t1 inner join district as t2 on t1.district_id = t2.district_id where t1.gender = 'm' and t2.a15 = (select t3.a15 from district as t3 order by t3.a15 desc limit 1, 1)",
    "pred_sql": "with district_crimes as ( select district_id, count(*) as crime_count from trans where date between '1995-01-01' and '1995-12-31' group by district_id order by crime_count desc limit 1 offset 1 ) select count(*) from client where district_id in (select district_id from district_crimes) and gender = 'm'"
  },
  {
    "id": 486,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "Which are the top ten withdrawals (non-credit card) by district names for the month of January 1996?",
    "gold_sql": "select distinct t1.a2 from district as t1 inner join account as t2 on t1.district_id = t2.district_id inner join trans as t3 on t2.account_id = t3.account_id where t3.type = 'vydaj' and t3.date like '1996-01%' order by a2 asc limit 10",
    "pred_sql": "with withdrawals as ( select d.a2, sum(t.amount) as total_withdrawal from trans t join account a on t.account_id = a.account_id join client c on a.district_id = c.district_id join district d on c.district_id = d.district_id where t.type = 'vydaj' and extract(mon"
  },
  {
    "id": 487,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "How many accounts have running contracts in Branch location 1?",
    "gold_sql": "select count(t1.account_id) from account as t1 inner join district as t2 on t1.district_id = t2.district_id inner join loan as t3 on t1.account_id = t3.account_id where t1.district_id = 1 and (t3.status = 'c' or t3.status = 'd')",
    "pred_sql": "select count(*) from account where district_id = 18 and frequency = 'poplatek mesicne'"
  },
  {
    "id": 488,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?",
    "gold_sql": "select count(t1.client_id) from client as t1 inner join district as t2 on t1.district_id = t2.district_id where t1.gender = 'm' and t2.a15 = (select t3.a15 from district as t3 order by t3.a15 desc limit 1, 1)",
    "pred_sql": "with district_crimes as ( select district_id, count(*) as crime_count from trans where date between '1995-01-01' and '1995-12-31' group by district_id order by crime_count desc limit 1 offset 1 ) select count(*) from client where district_id in (select district_id from district_crimes) and gender = 'm'"
  },
  {
    "id": 489,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "Who are the account holder identification numbers whose who have transactions on the credit card with the amount is less than the average, in 1998?",
    "gold_sql": "select t1.account_id from trans as t1 inner join account as t2 on t1.account_id = t2.account_id where strftime('%y', t1.date) = '1998' and t1.operation = 'vyber kartou' and t1.amount < (select avg(amount) from trans where strftime('%y', date) = '1998')",
    "pred_sql": "with avg_amount as ( select account_id, avg(amount) as avg_amount from trans where date between '1998-01-01' and '1998-12-31' and type = 'prijem' and account_id in (select card_id from card where type = 'gold') group by account_id ) select account_id from avg_amount where amount < (select avg(avg_amount) from avg_amount)"
  },
  {
    "id": 490,
    "db_id": "financial",
    "difficulty": "challenging",
    "question": "Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000.",
    "gold_sql": "select t3.type from district as t1 inner join account as t2 on t1.district_id = t2.district_id inner join disp as t3 on t2.account_id = t3.account_id where t3.type != 'owner' and t1.a11 between 8000 and 9000",
    "pred_sql": "with ineligible_accounts as ( select account_id from account where frequency not in ('poplatek mesicne', 'poplatek roční') ) select avg(a10) from district where a8 * a9 between 8000 and 9000 and district_id in ( select district_id from account where account_id in (select account_id from ineligible_accounts) )"
  },
  {
    "id": 491,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "What is the average number of crimes committed in 1995 in regions where the number exceeds 4000 and the region has accounts that are opened starting from the year 1997?",
    "gold_sql": "select avg(t1.a15) from district as t1 inner join account as t2 on t1.district_id = t2.district_id where strftime('%y', t2.date) >= '1997' and t1.a15 > 4000",
    "pred_sql": "with avg_crimes as ( select d.a2, avg(t.amount) as avg_crimes from district d join account a on d.district_id = a.district_id join trans t on a.account_id = t.account_id where d.a8 > 4000 and a.date >= '1997-01-01' group by d.a2 )"
  },
  {
    "id": 492,
    "db_id": "financial",
    "difficulty": "simple",
    "question": "List all the withdrawals in cash transactions that the client with the id 3356 makes.",
    "gold_sql": "select t4.trans_id from client as t1 inner join disp as t2 on t1.client_id = t2.client_id inner join account as t3 on t2.account_id = t3.account_id inner join trans as t4 on t3.account_id = t4.account_id where t1.client_id = 3356 and t4.operation = 'vyber'",
    "pred_sql": "select t.trans_id, t.date, t.type, t.operation, t.amount, t.balance, t.k_symbol, t.bank, t.account from trans t join account a on t.account_id = a.account_id join client c on a.client_id = c.client_id where c.client_id = 3356 and t.type = 'vydaj' and t.operation like '%peněžová transferová operace%'"
  },
  {
    "id": 493,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women?",
    "gold_sql": "select cast(sum(t2.gender = 'f') as real) * 100 / count(t2.client_id) from district as t1 inner join client as t2 on t1.district_id = t2.district_id where t1.a11 > 10000",
    "pred_sql": "with avg_salary as ( select district_id, avg(a10) as avg_salary from district group by district_id having avg(a10) > 10000 ) select (select count(*) from client where district_id in (select district_id from avg_salary) and gender = 'f') / (select count(*) from client where district_id in (select district_id from avg_salary)) *"
  },
  {
    "id": 494,
    "db_id": "financial",
    "difficulty": "challenging",
    "question": "What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997?",
    "gold_sql": "select cast((sum(case when strftime('%y', t1.date) = '1997' then t1.amount else 0 end) - sum(case when strftime('%y', t1.date) = '1996' then t1.amount else 0 end)) as real) * 100 / sum(case when strftime('%y', t1.date) = '1996' then t1.amount else 0 end) from loan as t1 inner join account as t2 on t1.account_id = t2.account_id inner join disp as t3 on t3.account_id = t2.account_id inner join client as t4 on t4.client_id = t3.client_id where t4.gender = 'm' and t3.type = 'owner'",
    "pred_sql": "with client_loans as ( select client_id, sum(amount) as total_loan from loan where extract(year from date) in (1996, 1997) and gender = 'm' group by client_id ) select (select sum(total_loan) from client_loans where extract(year from date) = 1997) - (select sum(total_loan) from client_loans where extract(year from date"
  },
  {
    "id": 495,
    "db_id": "financial",
    "difficulty": "challenging",
    "question": "How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total?",
    "gold_sql": "select t1.frequency, t2.k_symbol from account as t1 inner join (select account_id, k_symbol, sum(amount) as total_amount from `order` group by account_id, k_symbol) as t2 on t1.account_id = t2.account_id where t1.account_id = 3 and t2.total_amount = 3539",
    "pred_sql": "select count(*) from trans where account_id = 3 and type = 'debit'"
  },
  {
    "id": 496,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "What percentage of male clients request for weekly statements to be issued?",
    "gold_sql": "select cast(sum(t1.gender = 'm') as real) * 100 / count(t1.client_id) from client as t1 inner join district as t3 on t1.district_id = t3.district_id inner join account as t2 on t2.district_id = t3.district_id inner join disp as t4 on t1.client_id = t4.client_id and t2.account_id = t4.account_id where t2.frequency = 'poplatek tydne'",
    "pred_sql": "select (count(case when gender = 'm' then 1 else null end) / count(client_id)) * 100 as percentage from client"
  },
  {
    "id": 497,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "Name the account numbers of female clients who are oldest and have lowest average salary?",
    "gold_sql": "select t3.account_id from client as t1 inner join district as t2 on t1.district_id = t2.district_id inner join account as t3 on t2.district_id = t3.district_id inner join disp as t4 on t1.client_id = t4.client_id and t4.account_id = t3.account_id where t1.gender = 'f' order by t1.birth_date asc, t2.a11 asc limit 1",
    "pred_sql": "select account_id from client where gender = 'f' order by birth_date asc, (a8*a9*a10) desc limit 1"
  },
  {
    "id": 498,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "What is the average amount of loan which are still on running contract with statement issuance after each transaction?",
    "gold_sql": "select avg(t2.amount) from account as t1 inner join loan as t2 on t1.account_id = t2.account_id where t2.status in ('c', 'd') and t1.frequency = 'poplatek po obratu'",
    "pred_sql": "with running_loans as ( select account_id, sum(amount) as total_amount from loan where status = 'a' group by account_id ) select avg(total_amount) from running_loans"
  },
  {
    "id": 499,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "Provide the IDs and age of the client with high level credit card, which is eligible for loans.",
    "gold_sql": "select t1.client_id, strftime('%y', current_timestamp) - strftime('%y', t3.birth_date) from disp as t1 inner join card as t2 on t2.disp_id = t1.disp_id inner join client as t3 on t1.client_id = t3.client_id where t2.type = 'gold' and t1.type = 'owner'",
    "pred_sql": "with client_info as ( select client_id, (strftime('%y', 'now') - strftime('%y', birth_date)) as age from client ) select ci.client_id, ci.age from client_info ci join disp d on ci.client_id = d.client_id join card c on d.account_id = c.disp_id where c.type = 'gold' and d.type = 'owner'"
  }
]