[
  {
    "id": 0,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "What is the ratio of customers who pay in EUR against customers who pay in CZK?",
    "gold_sql": "select cast(sum(iif(currency = 'eur', 1, 0)) as float) / sum(iif(currency = 'czk', 1, 0)) as ratio from customers",
    "pred_sql": "select cast(sum(case when t2.currency = 'czk' then 1 else 0 end) as real) * 100 / count(*) from transactions_1k as t1 inner join customers as t2 on t1.customerid = t2.customerid",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 1,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "In 2012, who had the least consumption in LAM?",
    "gold_sql": "select t1.customerid from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where t1.segment = 'lam' and substr(t2.date, 1, 4) = '2012' group by t1.customerid order by sum(t2.consumption) asc limit 1",
    "pred_sql": "select customerid from yearmonth where date like '2012%' and segment = 'lam' group by customerid order by sum(consumption) limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.5
  },
  {
    "id": 2,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "What was the average monthly consumption of customers in SME for the year 2013?",
    "gold_sql": "select avg(t2.consumption) / 12 from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where substr(t2.date, 1, 4) = '2013' and t1.segment = 'sme'",
    "pred_sql": "select avg(consumption) from yearmonth where customerid in (select customerid from customers where segment = 'sme') and date like '2013%'e'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 3,
    "db_id": "debit_card_specializing",
    "difficulty": "challenging",
    "question": "What was the difference in gas consumption between CZK-paying customers and EUR-paying customers in 2012?",
    "gold_sql": "select sum(iif(t1.currency = 'czk', t2.consumption, 0)) - sum(iif(t1.currency = 'eur', t2.consumption, 0)) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where substr(t2.date, 1, 4) = '2012'",
    "pred_sql": "select customerid, sum(cid2.customerid from ( select customerid, sum(price * amount) as sum from transactions_1k as t1 join yearmonth as t2 on t1.customerid = t2.customerid where t2.date like '2012%' group by customerid ) as t1 join customers as t2 on t1.customerid = t2.customerid where t2.currency = 'czk' group",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 4,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "Which year recorded the most consumption of gas paid in CZK?",
    "gold_sql": "select substr(t2.date, 1, 4) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where t1.currency = 'czk' group by substr(t2.date, 1, 4) order by sum(t2.consumption) desc limit 1",
    "pred_sql": "select date, max(consumption) as maxconsumption from yearmonth where customerid in (select customerid from customers where currency = 'czk') group by date order by maxconsumption desc limit 1000",
    "ex": true,
    "sm": false,
    "cm": 0.16666666666666666
  },
  {
    "id": 5,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "What was the gas consumption peak month for SME customers in 2013?",
    "gold_sql": "select substr(t2.date, 5, 2) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where substr(t2.date, 1, 4) = '2013' and t1.segment = 'sme' group by substr(t2.date, 5, 2) order by sum(t2.consumption) desc limit 1",
    "pred_sql": "select date from yearmonth where customerid in (select customerid from customers where segment = 'sme') and date like '2013%table customers on yr.customerid = customers.customeridwhere customers.segment = '",
    "ex": true,
    "sm": false,
    "cm": 0.16666666666666666
  },
  {
    "id": 6,
    "db_id": "debit_card_specializing",
    "difficulty": "challenging",
    "question": "What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME?",
    "gold_sql": "select cast(sum(iif(t1.segment = 'sme', t2.consumption, 0)) as real) / count(t1.customerid) - cast(sum(iif(t1.segment = 'lam', t2.consumption, 0)) as real) / count(t1.customerid) , cast(sum(iif(t1.segment = 'lam', t2.consumption, 0)) as real) / count(t1.customerid) - cast(sum(iif(t1.segment = 'kam', t2.consumption, 0)) as real) / count(t1.customerid) , cast(sum(iif(t1.segment = 'kam', t2.consumption, 0)) as real) / count(t1.customerid) - cast(sum(iif(t1.segment = 'sme', t2.consumption, 0)) as real) / count(t1.customerid) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where t1.currency = 'czk' and t2.consumption = ( select min(consumption) from yearmonth ) and t2.date between 201301 and 201312",
    "pred_sql": "select avg(case when t2.segment = 'sme' then t1.consumption else 0 end) - avg(case when t2.segment = 'lam' then t1.consumption else 0 end) as sme_lam, avg(case when t2.segment = 'lam' then t1.consumption else 0 end) - avg(case when t2.segment = 'kam' then t1.consum",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 7,
    "db_id": "debit_card_specializing",
    "difficulty": "challenging",
    "question": "Which of the three segments—SME, LAM and KAM—has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013?",
    "gold_sql": "select cast((sum(iif(t1.segment = 'sme' and t2.date like '2013%', t2.consumption, 0)) - sum(iif(t1.segment = 'sme' and t2.date like '2012%', t2.consumption, 0))) as float) * 100 / sum(iif(t1.segment = 'sme' and t2.date like '2012%', t2.consumption, 0)), cast(sum(iif(t1.segment = 'lam' and t2.date like '2013%', t2.consumption, 0)) - sum(iif(t1.segment = 'lam' and t2.date like '2012%', t2.consumption, 0)) as float) * 100 / sum(iif(t1.segment = 'lam' and t2.date like '2012%', t2.consumption, 0)) , cast(sum(iif(t1.segment = 'kam' and t2.date like '2013%', t2.consumption, 0)) - sum(iif(t1.segment = 'kam' and t2.date like '2012%', t2.consumption, 0)) as float) * 100 / sum(iif(t1.segment = 'kam' and t2.date like '2012%', t2.consumption, 0)) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid",
    "pred_sql": "with segment_consumptional as percentageincrease'2013-2.date = consumption - t2.consumption1 consumption) / t2.consumption1 consumption) * 100) as percentageincrease from transactions_1k as t1 inner join (select customerid, date, customerid, yearmonth where date1 between '2012-01-01' and '2012-12-31' group by customerid",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 8,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "How much did customer 6 consume in total between August and November 2013?",
    "gold_sql": "select sum(consumption) from yearmonth where customerid = 6 and date between '201308' and '201311'",
    "pred_sql": "select sum(consumption) from yearmonth where customerid = 6 and date between '201308' and '201311' and",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 9,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "How many more \"discount\" gas stations does the Czech Republic have compared to Slovakia?",
    "gold_sql": "select sum(iif(country = 'cze', 1, 0)) - sum(iif(country = 'svk', 1, 0)) from gasstations where segment = 'discount'",
    "pred_sql": "select sum(case when t2.segment = 'discount' then 1 else 0 end) - sum(case when t1.segment = 'discount' then 1 else 0 end) as difference from gasstations as t1 join gasstations as t2 on t1.country = 'cze' and t2.country = 'sk' and t1.gasstationid = t2.gasstationid where t1.segment = 'value for money",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 10,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "Is it true that more SMEs pay in Czech koruna than in euros? If so, how many more?",
    "gold_sql": "select sum(currency = 'czk') - sum(currency = 'eur') from customers where segment = 'sme'",
    "pred_sql": "select sum(case when t2.currency = 'eur' then 1 else 0 end) - sum(case when t2.currency = 'czk' then 1 else 0 end) as difference from transactions_1k as t1 join customers as t2 on t1.customerid = t2.customerid where t2.segment = 'sme'",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 11,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "How many percent of LAM customer consumed more than 46.73?",
    "gold_sql": "select cast(sum(iif(t2.consumption > 46.73, 1, 0)) as float) * 100 / count(t1.customerid) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where t1.segment = 'lam'",
    "pred_sql": "select casted_consumption as t.customer10.0.customerid from yearmonth.consumption, transactions_1k yearmonth.customerid tconsumption > 4673 t as t0t as transactions.customerid = t4673.customerid and t0.date = t4673.date and t0.consumption > 46.73 t.customerid = 0 as tconsumption.consum as t0consumption as t0",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 12,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "In February 2012, what percentage of customers consumed more than 528.3?",
    "gold_sql": "select cast(sum(iif(consumption > 528.3, 1, 0)) as float) * 100 / count(customerid) from yearmonth where date = '201202'",
    "pred_sql": "select cast(sum(iif(t2.consumption > 528.3, 1, 0)) as real) * 100 / count(t2.customerid) from yearmonth as t1 inner join yearmonth120.customerid= case when strftime('%y-%m', t1.date) = '2012-02' then 1 else 0 end",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 13,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "What is the highest monthly consumption in the year 2012?",
    "gold_sql": "select sum(consumption) from yearmonth where substr(date, 1, 4) = '2012' group by substr(date, 5, 2) order by sum(consumption) desc limit 1",
    "pred_sql": "select daterange as ( select max(strftime('%y', '201` from customers",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 14,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "Please list the product description of the products consumed in September, 2013.",
    "gold_sql": "select t3.description from transactions_1k as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid inner join products as t3 on t1.productid = t3.productid where t2.date = '201309'",
    "pred_sql": "select t3.description from transactions_1k as t1 inner join products as t3 on t1.productid = t3.productid where t1.date between '2013-09-01' and '2013-09-30'",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 15,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "Please list the countries of the gas stations with transactions taken place in June, 2013.",
    "gold_sql": "select distinct t2.country from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid inner join yearmonth as t3 on t1.customerid = t3.customerid where t3.date = '201306'",
    "pred_sql": "select distinct t2.country from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t1.date between '2013-06-01' and '2013-06-30'",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 16,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "Among the customers who paid in euro, how many of them have a monthly consumption of over 1000?",
    "gold_sql": "select count(*) from yearmonth as t1 inner join customers as t2 on t1.customerid = t2.customerid where t2.currency = 'eur' and t1.consumption > 1000.00",
    "pred_sql": "select count(*) from customers where segment = 'lid' and customerid in (select customerid from yearmonth where consumption > 1000)",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 17,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "Please list the product descriptions of the transactions taken place in the gas stations in the Czech Republic.",
    "gold_sql": "select distinct t3.description from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid inner join products as t3 on t1.productid = t3.productid where t2.country = 'cze'",
    "pred_sql": "select t3.description from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid inner join products as t3 on t1.productid = t3.productid where t2.country = 'cze'",
    "ex": true,
    "sm": false,
    "cm": 1.0
  },
  {
    "id": 18,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "Please list the disparate time of the transactions taken place in the gas stations from chain no. 11.",
    "gold_sql": "select distinct t1.time from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t2.chainid = 11",
    "pred_sql": "select distinct t1.time from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t2.chainid = 11",
    "ex": true,
    "sm": true,
    "cm": 1.0
  },
  {
    "id": 19,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "Among the transactions made in the gas stations in the Czech Republic, how many of them are taken place after 2012/1/1?",
    "gold_sql": "select count(t1.transactionid) from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t2.country = 'cze' and strftime('%y', t1.date) >= '2012'",
    "pred_sql": "select count(*) from transactions_1k where gasstationid in (select gasstationid from gasstations where country = 'cze') and date > '2012-01-01'",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 20,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "What kind of currency did the customer paid at 16:25:00 in 2012/8/24?",
    "gold_sql": "select distinct t3.currency from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid inner join customers as t3 on t1.customerid = t3.customerid where t1.date = '2012-08-24' and t1.time = '16:25:00'",
    "pred_sql": "select t2.currency from transactions_1k as t1 inner join customers as t2 on t1.customerid = t2.customerid where t1.date = '2012-08-24' and t1.time = '16:25:00'",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 21,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "What segment did the customer have at 2012/8/23 21:20:00?",
    "gold_sql": "select t2.segment from transactions_1k as t1 inner join customers as t2 on t1.customerid = t2.customerid where t1.date = '2012-08-23' and t1.time = '21:20:00'",
    "pred_sql": "select t2.segment from transactions_1k as t1 join customers as t2 on t1.customerid = t2.customerid where t1.date = '2012-08-23' and t1.time = '21:20:00'",
    "ex": true,
    "sm": false,
    "cm": 1.0
  },
  {
    "id": 22,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "For all the transactions happened during 8:00-9:00 in 2012/8/26, how many happened in CZE?",
    "gold_sql": "select count(t1.transactionid) from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t1.date = '2012-08-26' and t1.time between '08:00:00' and '09:00:00' and t2.country = 'cze'",
    "pred_sql": "select count(*) from transactions_1k where date = '2012-08-26' and time >= '08:00:00' and time < '09:00:00' and gasstationid in (select gasstationid from gasstations where country = 'cze')",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 23,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "What's the nationality of the customer who spent 548.4 in 2012/8/24?",
    "gold_sql": "select t2.country from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t1.date = '2012-08-24' and t1.price = 548.4",
    "pred_sql": "select t2.country from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid inner join customers as t3 on t1.customerid = t3.customerid where t1.date = '2012-08-24' and t1.amount = 548 and t3.customerid = (select customerid from yearmonth where date = '20120824",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 24,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "What is the percentage of the customers who used EUR in 2012/8/25?",
    "gold_sql": "select cast(sum(iif(t2.currency = 'eur', 1, 0)) as float) * 100 / count(t1.customerid) from transactions_1k as t1 inner join customers as t2 on t1.customerid = t2.customerid where t1.date = '2012-08-25'",
    "pred_sql": "select cast(sum(case when t3.currency = 'eur' then 1 else 0 end) as real) * 100 / count(*) from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid inner join customers as t3 on t1.customerid = t3.customerid where t1.date = '2012-08-25'",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 25,
    "db_id": "debit_card_specializing",
    "difficulty": "challenging",
    "question": "For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013?",
    "gold_sql": "select cast(sum(iif(substring(date, 1, 4) = '2012', consumption, 0)) - sum(iif(substring(date, 1, 4) = '2013', consumption, 0)) as float) / sum(iif(substring(date, 1, 4) = '2012', consumption, 0)) from yearmonth where customerid = ( select t1.customerid from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t1.date = '2012-08-25' and t1.price = 1513.12 )",
    "pred_sql": "select (sum(case when t2.date like '2012%' then t1.amount else 0 end) - sum(case when t2.date like '2013%' then t1.amount else 0 end)) / sum(case when t2.date like '2012%' then t1.amount else 0 end) * 100 as consumptiondecreaserate (select consumption201 yearmonth join transactions_1k as t1 on",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 26,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "What is the percentage of \"premium\" against the overall segment in Country = \"SVK\"?",
    "gold_sql": "select cast(sum(iif(country = 'svk' and segment = 'premium', 1, 0)) as float) * 100 / sum(iif(country = 'svk', 1, 0)) from gasstations",
    "pred_sql": "select cast(sum(case when t2.segment = 'premium' then 1 else 0 end) as real) * 100 / count(*) from gasstations as t1 inner join ( t3.gasstationid = t1.gasstationid on t1.country = 'svk' and t2st.date = t1.date",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 27,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "What is the amount spent by customer \"38508\" at the gas stations? How much had the customer spent in January 2012?",
    "gold_sql": "select sum(t1.price ) , sum(iif(t3.date = '201201', t1.price, 0)) from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid inner join yearmonth as t3 on t1.customerid = t3.customerid where t1.customerid = '38508'",
    "pred_sql": "select sum(price) as totalspent from transactions_1k where customerid = 38508 and date between '2012-01%'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 28,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used?",
    "gold_sql": "select t2.customerid, sum(t2.price / t2.amount), t1.currency from customers as t1 inner join transactions_1k as t2 on t1.customerid = t2.customerid where t2.customerid = ( select customerid from yearmonth order by consumption desc limit 1 ) group by t2.customerid, t1.currency",
    "pred_sql": "select customerspending.customerid (select price from transactions_avg( ctransactions_1k where customerid = ( select customerid from_1k where customerspending group by customerid order by price( transactions_1k )_avg desc limit 1 ) group by segment, currency",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 29,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "For all the people who paid more than 29.00 per unit of product id No.5. Give their consumption status in the August of 2012.",
    "gold_sql": "select t2.consumption from transactions_1k as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where t1.price / t1.amount > 29.00 and t1.productid = 5 and t2.date = '201208'",
    "pred_sql": "select t2.consumption from transactions_1k as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where t1.price > 29 and t1.productid = 5 and t1.date = 201208 and t2.customerid = 5",
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 30,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "What's Angela Sanders's major?",
    "gold_sql": "select t2.major_name from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t1.first_name = 'angela' and t1.last_name = 'sanders'",
    "pred_sql": "select major_name from major where member on member.member_id = member.link_to_major where first_name = 'angela' and last_name = 'sanders'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 31,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Among the students from the Student_Club who attended the event \"Women's Soccer\", how many of them want a T-shirt that's in medium size?",
    "gold_sql": "select count(t1.event_id) from event as t1 inner join attendance as t2 on t1.event_id = t2.link_to_event inner join member as t3 on t2.link_to_member = t3.member_id where t1.event_name = 'women''s soccer' and t3.t_shirt_size = 'medium'",
    "pred_sql": "select count(*) from member where t_shirt_size = 'medium' and link_to_major in (select link_to_major from major where major_name = 'women''s soccer')",
    "ex": true,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 32,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Among the events attended by more than 10 members of the Student_Club, how many of them are meetings?",
    "gold_sql": "select t1.event_name from event as t1 inner join attendance as t2 on t1.event_id = t2.link_to_event group by t1.event_id having count(t2.link_to_event) > 10 except select t1.event_name from event as t1 where t1.type = 'meeting'",
    "pred_sql": "select count(*) from event where event_id in (select link_to_event from attendance group by link_to_event having count(link_to_member) > 10 and event_name like 'meeting%')",
    "ex": false,
    "sm": false,
    "cm": 0.25
  },
  {
    "id": 33,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "List all the names of events that had an attendance of over 20 students but were not fundraisers.",
    "gold_sql": "select t1.event_name from event as t1 inner join attendance as t2 on t1.event_id = t2.link_to_event group by t1.event_id having count(t2.link_to_event) > 20 except select t1.event_name from event as t1 where t1.type = 'fundraiser'",
    "pred_sql": "select event_name from event where event_id not in (select link_to_event from attendance where link_to_member in (select link_to_member from expense where expense_description like '20%')) and link_to_event in (select link_to_event from attendance) group by event_name having count(link_to_member) > 20",
    "ex": false,
    "sm": false,
    "cm": 0.25
  },
  {
    "id": 34,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "What is the amount of the funds that the Vice President received?",
    "gold_sql": "select t2.amount from member as t1 inner join income as t2 on t1.member_id = t2.link_to_member where t1.position = 'vice president'",
    "pred_sql": "select t1.amount from income as sum1 = (select amount inner join member on income_id where link_to_member = (select link_to_member from member as t =_id where first_name = 'grant' and last_name = 'gilmour') and source = 'dues' and notes = 'none'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 35,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "List the full name of the Student_Club members that grew up in Illinois state.",
    "gold_sql": "select t1.first_name, t1.last_name from member as t1 inner join zip_code as t2 on t1.zip = t2.zip_code where t2.state = 'illinois'",
    "pred_sql": "select first_name, last_name from member where zip in (select zip_code from zip_code where state = 'il')",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 36,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Was each expense in October Meeting on October 8, 2019 approved?",
    "gold_sql": "select t3.approved from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event inner join expense as t3 on t2.budget_id = t3.link_to_budget where t1.event_name = 'october meeting' and t1.event_date like '2019-10-08%'",
    "pred_sql": "select expense_id from expense where expense_date like '2019-10-08' and approved = 'true'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 37,
    "db_id": "student_club",
    "difficulty": "challenging",
    "question": "Calculate the total average cost that Elijah Allen spent in the events on September and October.",
    "gold_sql": "select avg(t2.cost) from member as t1 inner join expense as t2 on t1.member_id = t2.link_to_member where t1.last_name = 'allen' and t1.first_name = 'elijah' and (substr(t2.expense_date, 6, 2) = '09' or substr(t2.expense_date, 6, 2) = '10')",
    "pred_sql": "select avg(t2.cost) from member as t1 inner join expense as t2 on t1.member_id = t2.link_to_member where t1.first_name = 'elijah' and t1.last_name = 'allen' and t2.expense_date between '2019-09-01' and '2019-10-31'",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 38,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Calculate the difference of the total amount spent in all events by the Student_Club in year 2019 and 2020.",
    "gold_sql": "select sum(case when substr(t1.event_date, 1, 4) = '2019' then t2.spent else 0 end) - sum(case when substr(t1.event_date, 1, 4) = '2020' then t2.spent else 0 end) as num from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event",
    "pred_sql": "select sum(budget) as (select sum(cost_2019_2 select as (select budget_id from expense_id, sum(t2.spent) as (cost_2020) from budget) 't2' where t2.event_status = 'open' and t2.event_date like '2019%') and t2.event_date like '2020%' and as cost_2020) where t1.event_status = 'open",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 39,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "What was the notes of the fundraising on 2019/9/14?",
    "gold_sql": "select notes from income where source = 'fundraising' and date_received = '2019-09-14'",
    "pred_sql": "select t3.notes from expense as t1 join budget as t2 on t1.link_to_budget = t2.budget_id join attendance as t4 on t1.link_to_member = t4.link_to_member join member as t5 on t4.link_to_member = t5.member_id join zip_code as t6 on t5.zip = t6.zip_code where t1.expense_date = '2019-09-14' and t2.event_status = '",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 40,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "Tell the phone number of \"Carlo Jacobs\".",
    "gold_sql": "select phone from member where first_name = 'carlo' and last_name = 'jacobs'",
    "pred_sql": "select phone from member where last_name = 'jacobs' and first_name = 'carlo'",
    "ex": true,
    "sm": false,
    "cm": 1.0
  },
  {
    "id": 41,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "What is the status of the event which bought \"Post Cards, Posters\" on 2019/8/20?",
    "gold_sql": "select t1.event_status from budget as t1 inner join expense as t2 on t1.budget_id = t2.link_to_budget where t2.expense_description = 'post cards, posters' and t2.expense_date = '2019-08-20'",
    "pred_sql": "select t1.event as (select event where expense_date_approved on expense_date = '2019-08-20' join expense on event1_date.link_to_budget = event2_description.link_to_budget where event2_description.expense_description = 'post cards, posters'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 42,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "What was Brent Thomason's major?",
    "gold_sql": "select t2.major_name from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t1.first_name = 'brent' and t1.last_name = 'thomason'",
    "pred_sql": "select major_name from major where member_id = 'rec28orzgcm1dtqbz'first_name = 'luisa' and last_name = 'guidi'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 43,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "For all the club members from \"Business\" major, how many of them wear medium size t-shirt?",
    "gold_sql": "select count(t1.member_id) from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t2.major_name = 'business' and t1.t_shirt_size = 'medium'",
    "pred_sql": "select count(*) from member where link_to_major = 'rec09_to_to' and t_shirt_size = 'medium'",
    "ex": true,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 44,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "Which department was the President of the club in?",
    "gold_sql": "select t2.department from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t1.position = 'president'",
    "pred_sql": "select t as (select link_to_member, department from_member'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 45,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "State the date Connor Hilton paid his/her dues.",
    "gold_sql": "select t2.date_received from member as t1 inner join income as t2 on t1.member_id = t2.link_to_member where t1.first_name = 'connor' and t1.last_name = 'hilton' and t2.source = 'dues'",
    "pred_sql": "select date_received from income where link_to_member = 'rec28orzgcm1dtqbz' and source = 'dues' and first_name = 'connor' and last_name = 'hilton'",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 46,
    "db_id": "student_club",
    "difficulty": "challenging",
    "question": "How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"?",
    "gold_sql": "select cast(sum(case when t2.event_name = 'yearly kickoff' then t1.amount else 0 end) as real) / sum(case when t2.event_name = 'october meeting' then t1.amount else 0 end) from budget as t1 inner join event as t2 on t1.link_to_event = t2.event_id where t1.category = 'advertisement' and t2.type = 'meeting'",
    "pred_sql": "select sum(case when t2.event_name = 'yearly kickoff' then 1 else 0 end) - sum(case when t2.event_name = 'october meeting' then 1 else 0 end) as difference from budget as t1 join event as t2 on t1.link_to_event = t2.event_id where t1.category = 'advertisement'",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 47,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "What is the total cost of the pizzas for all the events?",
    "gold_sql": "select sum(cost) from expense where expense_description = 'pizza'",
    "pred_sql": "select sum(cost) from expense where expense_description like '%pizza%'",
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 48,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "How many cities are there in Orange County, Virginia?",
    "gold_sql": "select count(city) from zip_code where county = 'orange county' and state = 'virginia'",
    "pred_sql": "select count(distinct city) from zip_code where county = 'orange' and state = 'va'",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 49,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "What does the person with the phone number \"809-555-3360\" major in?",
    "gold_sql": "select t2.major_name from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t1.phone = '809-555-3360'",
    "pred_sql": "select major_name from major where major_id in (select link_to_major from member where phone = '809-555-3360')",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 50,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "How many members attended the \"Women's Soccer\" event?",
    "gold_sql": "select count(t2.link_to_member) from event as t1 inner join attendance as t2 on t1.event_id = t2.link_to_event where t1.event_name = 'women''s soccer'",
    "pred_sql": "select count(distinct link_to_member) from attendance where link_to_event in (select event_id from event where event_name = 'women''s soccer')",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 51,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "List all the members of the \"School of Applied Sciences, Technology and Education\" department.",
    "gold_sql": "select t1.first_name, t1.last_name from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t2.department = 'school of applied sciences, technology and education'",
    "pred_sql": "select m.first_name, m.last_name from member m join major j on m.link_to_major = j.major_id where j.department = 'school of applied sciences, technology and education'",
    "ex": true,
    "sm": false,
    "cm": 1.0
  },
  {
    "id": 52,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Among all the closed events, which event has the highest spend-to-budget ratio?",
    "gold_sql": "select t2.event_name from budget as t1 inner join event as t2 on t1.link_to_event = t2.event_id where t2.status = 'closed' order by t1.spent / t1.amount desc limit 1",
    "pred_sql": "select event_id, event_budget_id in (select link_to_event from expense_date, cost) from 'closed' as event_id = budget.link_to_event group by event_id order by sum(spent)/sum(remaining) desc limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 53,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "What is the highest amount of budget spend for an event?",
    "gold_sql": "select max(spent) from budget",
    "pred_sql": "select max(spent) from budget",
    "ex": true,
    "sm": true,
    "cm": 1.0
  },
  {
    "id": 54,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "What is the total amount of money spent for food?",
    "gold_sql": "select sum(spent) from budget where category = 'food'",
    "pred_sql": "select sum(spent) from budget where category = 'food'",
    "ex": true,
    "sm": true,
    "cm": 1.0
  },
  {
    "id": 55,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "List the name of students that have attended more than 7 events.",
    "gold_sql": "select t1.first_name, t1.last_name from member as t1 inner join attendance as t2 on t1.member_id = t2.link_to_member group by t2.link_to_member having count(t2.link_to_event) > 7",
    "pred_sql": "select first_name, last_name from member where member_id in (select link_to_member from attendance group by link_to_member having count(link_to_event) > 7)",
    "ex": true,
    "sm": false,
    "cm": 0.75
  },
  {
    "id": 56,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Which student has been entrusted to manage the budget for the Yearly Kickoff?",
    "gold_sql": "select t4.first_name, t4.last_name from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event inner join expense as t3 on t2.budget_id = t3.link_to_budget inner join member as t4 on t3.link_to_member = t4.member_id where t1.event_name = 'yearly kickoff'",
    "pred_sql": "select m.first_name, m.last_name from member m join budget b on m.member_id = b.link_to_member where b.event_status = 'open' and b.category = 'advertisement'",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 57,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "Which event has the lowest cost?",
    "gold_sql": "select t1.event_name from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event inner join expense as t3 on t2.budget_id = t3.link_to_budget order by t3.cost limit 1",
    "pred_sql": "select event_id, min(event_id from (select event_id, sum(cost) as cost from expense",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 58,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Based on the total cost for all event, what is the percentage of cost for Yearly Kickoff event?",
    "gold_sql": "select cast(sum(case when t1.event_name = 'yearly kickoff' then t3.cost else 0 end) as real) * 100 / sum(t3.cost) from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event inner join expense as t3 on t2.budget_id = t3.link_to_budget",
    "pred_sql": "select (select sum(cost) from expense where link_to_budget in (select budget_id from budget where event_status = 'open' and link_to_event = (select event_id from event where event_name = 'yearly kickoff'))) * 100 / (select sum(spent) from budget where event_status = 'open' and link_to_event = (select event_id from event where event_name = 'yearly kickoff')) from expense where link_to_budget in (select budget_id",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 59,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "Indicate the top source of funds received in September 2019 based on their amount.",
    "gold_sql": "select source from income where date_received between '2019-09-01' and '2019-09-30' order by source desc limit 1",
    "pred_sql": "select source from income where date_received like '2019-09%09' and '2019-0 aa%20",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 60,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "How many members of the Student_Club have major in 'Physics Teaching'?",
    "gold_sql": "select count(t2.member_id) from major as t1 inner join member as t2 on t1.major_id = t2.link_to_major where t1.major_name = 'physics teaching'",
    "pred_sql": "select count(*) from member where link_to_major in (select major_id from major where major_name = 'physics teaching')",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 61,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Name the event with the highest amount spent on advertisement.",
    "gold_sql": "select t2.event_name from budget as t1 inner join event as t2 on t1.link_to_event = t2.event_id where t1.category = 'advertisement' order by t1.spent desc limit 1",
    "pred_sql": "select t as ( select event_id in (select budget b inner join budget e on event_id order by sum(spent) desc limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 62,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Did Maya Mclean attend the 'Women's Soccer' event?",
    "gold_sql": "select case when t3.event_name = 'women''s soccer' then 'yes' end as result from member as t1 inner join attendance as t2 on t1.member_id = t2.link_to_member inner join event as t3 on t2.link_to_event = t3.event_id where t1.first_name = 'maya' and t1.last_name = 'mclean'",
    "pred_sql": "select t1.event_name from attendance join event on attendance.link_to_event = event.event_id where event_name = 'women'' from attendance where link_to_event = event2.link_to = 'maya mclean'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 63,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Indicate the cost of posters for 'September Speaker' event.",
    "gold_sql": "select t3.cost from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event inner join expense as t3 on t2.budget_id = t3.link_to_budget where t1.event_name = 'september speaker' and t3.expense_description = 'posters'",
    "pred_sql": "select t3.cost from expense as t1 inner join budget as t2 on t1.link_to_budget = t2.budget_id inner join event as t3 on t2.link_to_event = t3.event_id where t1.expense_description = 'post cards, posters' and t3.event_name = 'september speaker'",
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 64,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Indicate the name of the closed event whose cost has exceeded the budget the most.",
    "gold_sql": "select t2.event_name from budget as t1 inner join event as t2 on t2.event_id = t1.link_to_event where t1.event_status = 'closed' and t1.remaining < 0 order by t1.remaining limit 1",
    "pred_sql": "select event_id, sum(cost) as e from expense.link_to.expense_id expense where link_to_event in (select event_id from budget.budget_id where))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))&",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 65,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Identify the type of expenses and their total value approved for 'October Meeting' event.",
    "gold_sql": "select t1.type, sum(t3.cost) from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event inner join expense as t3 on t2.budget_id = t3.link_to_budget where t1.event_name = 'october meeting'",
    "pred_sql": "select e.type_expense as type_value from budget as (select expense_description from expense from budget = (event_id = 'octobermeeting where e.link_to_event = event.event_id and e.approved = 'true' group by e.expense_description",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 66,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.",
    "gold_sql": "select t2.category, sum(t2.amount) from event as t1 join budget as t2 on t1.event_id = t2.link_to_event where t1.event_name = 'april speaker' group by t2.category order by sum(t2.amount) asc",
    "pred_sql": "select category, sum(amount) as amount_budgeted from budget where link_to_event = 'rec0.event_id' and category like 'april speaker' group by category order by amount_budgeted asc",
    "ex": true,
    "sm": false,
    "cm": 0.4
  },
  {
    "id": 67,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "Mention the total expense used on 8/20/2019.",
    "gold_sql": "select sum(cost) from expense where expense_date = '2019-08-20'",
    "pred_sql": "select sum(cost) from expense where expense_date = '2019-08-20'",
    "ex": true,
    "sm": true,
    "cm": 1.0
  },
  {
    "id": 68,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "List out the full name and total cost that member id \"rec4BLdZHS2Blfp4v\" incurred?",
    "gold_sql": "select t1.first_name, t1.last_name, sum(t2.cost) from member as t1 inner join expense as t2 on t1.member_id = t2.link_to_member where t1.member_id = 'rec4bldzhs2blfp4v'",
    "pred_sql": "select t2.first_name, t2.last_name, sum(t1.cost) as total_cost from expense as t1 join member as t2 on t1.link_to_member = t2.member_id where t1.link_to_member = 'rec4bldzhs2blfp4v' group by t2.first_name, t2.last_name",
    "ex": false,
    "sm": false,
    "cm": 0.5
  },
  {
    "id": 69,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "State what kind of expenses that Sacha Harrison incurred?",
    "gold_sql": "select t2.expense_description from member as t1 inner join expense as t2 on t1.member_id = t2.link_to_member where t1.first_name = 'sacha' and t1.last_name = 'harrison'",
    "pred_sql": "select expense_description from expense where link_to_member = 'rec28orzgcm1dtqbz'",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 70,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "State the category of events were held at MU 215.",
    "gold_sql": "select distinct t2.category from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event where t1.location = 'mu 215'",
    "pred_sql": "select category from budget where link_to_event in (select event_id from event where location = 'mu 215')",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 71,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "List the last name of members with a major in environmental engineering and include its department and college name.",
    "gold_sql": "select t2.last_name, t1.department, t1.college from major as t1 inner join member as t2 on t1.major_id = t2.link_to_major where t2.position = 'member' and t1.major_name = 'environmental engineering'",
    "pred_sql": "select t2.last_name, t3.department, t3.college from member as t1 join major m on m.major_id on t1.link_to_major = t2_id.major_id inner join major as t3 on t2_id.department = t3.department where t2_id.major_name = 'environmental engineering'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 72,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "What are the budget category of the events located at MU 215 and a guest speaker type with a 0 budget spent?",
    "gold_sql": "select distinct t2.category, t1.type from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event where t1.location = 'mu 215' and t2.spent = 0 and t1.type = 'guest speaker'",
    "pred_sql": "select t1.category from budget as t join event as e on t.link_to_event = e.event_id where e.location = 'mu 215' and t.spent = 0 and t.category like '%guest speaker%'",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 73,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Among the members with t-shirt size of medium, what is the percentage of the amount 50 received by the Student_Club?",
    "gold_sql": "select cast(sum(case when t2.amount = 50 then 1.0 else 0 end) as real) * 100 / count(t2.income_id) from member as t1 inner join income as t2 on t1.member_id = t2.link_to_member where t1.position = 'member' and t1.t_shirt_size = 'medium'",
    "pred_sql": "select sum(case when t2.source = 'dues' then t1.amount else 0 end) / sum(t1.amount) * 100 as percentage from income as t1 join member as t3 on * from income on case when t2.t_shirt_size = 'medium' then 1 else 0 end = 1 and t1.link_to_member = t2.member_id",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 74,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "List the names of closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020.",
    "gold_sql": "select distinct event_name from event where type = 'game' and date(substr(event_date, 1, 10)) between '2019-03-15' and '2020-03-20' and status = 'closed'",
    "pred_sql": "select event_name from event where status = 'closed' and event_name like '%game%' and event_date between '2019-03-15' and '2020-03-20'",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 75,
    "db_id": "student_club",
    "difficulty": "challenging",
    "question": "Give the full name and contact number of members who had to spend more than average on each expense.",
    "gold_sql": "select distinct t3.first_name, t3.last_name, t3.phone from expense as t1 inner join budget as t2 on t1.link_to_budget = t2.budget_id inner join member as t3 on t3.member_id = t1.link_to_member where t1.cost > ( select avg(t1.cost) from expense as t1 inner join budget as t2 on t1.link_to_budget = t2.budget_id inner join member as t3 on t3.member_id = t1.link_to_member )",
    "pred_sql": "select t1.first_name , t1.last_name , t1.phone from member on m2.member_id = m.member_id where member as t3 where t1.cost > (select avg(cost) from expense) and t1.link_to_member = t2.member_id and t2.member_id = t3.member_id",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 76,
    "db_id": "student_club",
    "difficulty": "challenging",
    "question": "Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it.",
    "gold_sql": "select t2.first_name, t2.last_name, t1.cost from expense as t1 inner join member as t2 on t1.link_to_member = t2.member_id where t1.expense_description = 'water, veggie tray, supplies'",
    "pred_sql": "select t3.first_name, t3.last_name, sum(t2.cost) as total_spent from expense as t2 join member as t3 on t2.link_to_member = t3.member_id join budget as t1 on t2.link_to_budget = t1.budget_id where t2.expense_description like '%water, cookies%' or t2.expense_description like '%veggie tray%' or t2.expense_description like '%supplies%' group by t2.link_to",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 77,
    "db_id": "student_club",
    "difficulty": "challenging",
    "question": "Write the full names of students who received funds on the date of 9/9/2019 and include the amount received.",
    "gold_sql": "select distinct t3.first_name, t3.last_name, t4.amount from event as t1 inner join attendance as t2 on t1.event_id = t2.link_to_event inner join member as t3 on t3.member_id = t2.link_to_member inner join income as t4 on t4.link_to_member = t3.member_id where t4.date_received = '2019-09-09'",
    "pred_sql": "select t3.first_name, t3.last_name, t4.amount from expense as t1 join income as t4 on t1.link_to_member = t4.link_to_member join member as t2 on t1.link_to_member = t2.member_id join member as t3 on t4.link_to_member = t3.member_id where t1.expense_date = '2019-09-09' and t4.date_received = '2019-0",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 78,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "Are there more in-patient or outpatient who were male? What is the deviation in percentage?",
    "gold_sql": "select cast(sum(case when admission = '+' then 1 else 0 end) as real) * 100 / sum(case when admission = '-' then 1 else 0 end) from patient where sex = 'm'",
    "pred_sql": "select abs((count) - (ount)) * 100 / (count + (count)) as deviationpercentage from (select count(*) as (ount= 'males assex = 'm' and admission is not null) , count(count) from patient) patient sent 'fsex = 'm') on 1 = count(sex",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 79,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "What is the percentage of female patient were born after 1930?",
    "gold_sql": "select cast(sum(case when strftime('%y', birthday) > '1930' then 1 else 0 end) as real) * 100 / count(*) from patient where sex = 'f'",
    "pred_sql": "select cast(sum(case when t2.sex = 'f' then 1 else 0 end) as real) * 100 / count(*) as ( select count(*) from patient where 'sex as t2 on t1.id = t2.id where year(t2.birthday) > 1930",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 80,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "What is the ratio of outpatient to inpatient followed up treatment among all the 'SLE' diagnosed patient?",
    "gold_sql": "select sum(case when admission = '+' then 1.0 else 0 end) / sum(case when admission = '-' then 1 else 0 end) from patient where diagnosis = 'sle'",
    "pred_sql": "select cast(sum(case when admission = '+' then 1 else 0 end) as real) * 100 / count(*) from patient where diagnosis = 'sle'",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 81,
    "db_id": "thrombosis_prediction",
    "difficulty": "simple",
    "question": "What is the disease patient '30609' diagnosed with. List all the date of laboratory tests done for this patient.",
    "gold_sql": "select t1.diagnosis, t2.date from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.id = 30609",
    "pred_sql": "select diagnosisdates.date from (select date, date from patient as t astest select laboratory.date, id = 30609",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 82,
    "db_id": "thrombosis_prediction",
    "difficulty": "simple",
    "question": "List the patient ID, sex and birthday of patient with LDH beyond normal range.",
    "gold_sql": "select distinct t1.id, t1.sex, t1.birthday from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.ldh > 500",
    "pred_sql": "select id, sex, birthday from patient where id in (select id from laboratory where ldh > (select avg(ldh) from laboratory))",
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 83,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "State the ID and age of patient with positive degree of coagulation.",
    "gold_sql": "select distinct t1.id, strftime('%y', current_timestamp) - strftime('%y', t1.birthday) from patient as t1 inner join examination as t2 on t1.id = t2.id where t2.rvvt = '+'",
    "pred_sql": "select e.id, datediff(current_date, p.birthday) / select id, timestampdiff(p.id, p patient on p.id = t-birthday order by e.id, p.id) and e.thrombosis = 1inner join patient p on e.id = p.id",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 84,
    "db_id": "thrombosis_prediction",
    "difficulty": "simple",
    "question": "For patients with severe degree of thrombosis, list their ID, sex and disease the patient is diagnosed with.",
    "gold_sql": "select distinct t1.id, t1.sex, t1.diagnosis from patient as t1 inner join examination as t2 on t1.id = t2.id where t2.thrombosis = 2",
    "pred_sql": "select id, sex, diagnosis from patient where diagnosis in (select diagnosis from examination where thrombosis = 1)",
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 85,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "How many female patients who came at the hospital in 1997 was immediately followed at the outpatient clinic?",
    "gold_sql": "select count(*) from patient where strftime('%y', description) = '1997' and sex = 'f' and admission = '-'",
    "pred_sql": "select count(*) from patient as p join examination as e on p.id = e.id where p.sex = 'f' and etc as t20( = 1997",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 86,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "How many of the patients with the most serious thrombosis cases examined in 1997 are women?",
    "gold_sql": "select count(*) from patient as t1 inner join examination as t2 on t1.id = t2.id where t1.sex = 'f' and strftime('%y', t2.`examination date`) = '1997' and t2.thrombosis = 1",
    "pred_sql": "select count(*) from examination inner join patient on examination.id = patient.id where examination.thrombosis = (select max(thrombosis) from examination where year(examination date, \"diagnosis)` and patient.sex = 'f' and year(examination.`ex date`) = 1997",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 87,
    "db_id": "thrombosis_prediction",
    "difficulty": "simple",
    "question": "What are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis.",
    "gold_sql": "select t2.symptoms, t1.diagnosis from patient as t1 inner join examination as t2 on t1.id = t2.id where t2.symptoms is not null order by t1.birthday desc limit 1",
    "pred_sql": "select t1.symptoms, t1.diagnosis from examination as t1 join patient as t2 on t1.id = t2.id where strftime('%y', description) date desc limit 1 diagnosis , diagnosis",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 88,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?",
    "gold_sql": "select t1.date, strftime('%y', t2.`first date`) - strftime('%y', t2.birthday),t2.birthday from laboratory as t1 inner join patient as t2 on t1.id = t2.id where t2.diagnosis = 'sjs' and t2.birthday is not null order by t2.birthday asc limit 1",
    "pred_sql": "select t2.date, datediff(t1.first_date, t2.birthday) from examinationdate, l2 inner join patient as t on t12.id = t2.id where t12.sm = 'sjs' order by t2.date asc limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.2
  },
  {
    "id": 89,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "What is the ratio of male to female patients among all those with abnormal uric acid counts?",
    "gold_sql": "select cast(sum(case when t2.ua <= 8.0 and t1.sex = 'm' then 1 else 0 end) as real) / sum(case when t2.ua <= 6.5 and t1.sex = 'f' then 1 else 0 end) from patient as t1 inner join laboratory as t2 on t1.id = t2.id",
    "pred_sql": "select cast(sum(case when sex = 'f' then 1 else 0 end) as real) / sum(case when sex = 'm' then 1 else 0 end) from patient where tp > 200",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 90,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "How many underage patients were examined during the course of the three-year period from 1990 to 1993?",
    "gold_sql": "select count(t1.id) from patient as t1 inner join examination as t2 on t1.id = t2.id where strftime('%y', t2.`examination date`) between '1990' and '1993' and strftime('%y', t2.`examination date`) - strftime('%y', t1.birthday) < 18",
    "pred_sql": "select count(*) from patient as e.id on patient.id = e.id where patient.birthday > t '1 date` < '1990-01-01' or `first date` > '1993-12-31')",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 91,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis?",
    "gold_sql": "select strftime('%y', t2.date) - strftime('%y', t1.birthday), t1.diagnosis from patient as t1 inner join laboratory as t2 on t1.id = t2.id order by t2.hgb desc limit 1",
    "pred_sql": "with maxhemoglobin as ( select id, max(hgb) as maxhemhemoglobin) from laboratory where hgb (select from laboratory where t.id = laboratory.id group by t.id ) select p.diagnosis from patient p join examination e on p.id = e.id join maxhemoglobin mh on p.id = mh.id where mhgbhem order by2(temfrom t limit 2(temam) 2(temhgb) 2",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 92,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "For the patient who was diagnosed with SLE on 1994/2/19, what was his/her anti-Cardiolipin antibody concentration status on 1993/11/12?",
    "gold_sql": "select `acl iga`, `acl igg`, `acl igm` from examination where id in ( select id from patient where diagnosis = 'sle' and description = '1994-02-19' ) and `examination date` = '1993-11-12'",
    "pred_sql": "select t19401 cardiolipin igm from laboratory.if- examination as t1 inner join laboratory.dateas l)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))&",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 93,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981?",
    "gold_sql": "select cast((sum(case when t2.date like '1981-11-%' then t2.`t-cho` else 0 end) - sum(case when t2.date like '1981-12-%' then t2.`t-cho` else 0 end)) as real) / sum(case when t2.date like '1981-12-%' then t2.`t-cho` else 0 end) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.birthday = '1959-02-18'",
    "pred_sql": "select cast(sum as nullable as (select as (select id from = '1959-02-18' and between '1981-11' and '1981-12' group by id having count(*) = 1",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 94,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "How many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID.",
    "gold_sql": "select distinct id from laboratory where date between '1987-07-06' and '1996-01-31' and gpt > 30 and alb < 4",
    "pred_sql": "select id from patient where id in (select p.id from patient p join examination e on p.id = e.id join laboratory l on p.id = l.id where l.date between '1987-07-06' and '1996-01-31' and l.gpt > 30 and l.alb < 4)",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 95,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average?",
    "gold_sql": "select count(*) from examination where thrombosis = 2 and `ana pattern` = 's' and `acl igm` > (select avg(`acl igm`) * 1.2 from examination where thrombosis = 2 and `ana pattern` = 's')",
    "pred_sql": "select count(t2 as ( select avg(acl (select avg(a00 from examination, laboratory where t.id = 12 where t1.id = laboratory.id and t2.id = t.id group by examination.id having (select avg(acl igm` -))))))))))))))))))))))))))))))))))))))))&",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 96,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range.",
    "gold_sql": "select distinct t1.id from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.admission = '-' and t2.`t-bil` < 2.0 and t2.date like '1991-10-%'",
    "pred_sql": "select distinct p.id from patient p from laboratory l on p.id = l.id where l.date between '1991-10-01' and '1 between 0 and 1.2 and p.admission = 'outpatient clinic'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 97,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE?",
    "gold_sql": "select avg(t2.alb) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.plt > 400 and t1.diagnosis = 'sle' and t1.sex = 'f'",
    "pred_sql": "select avg(alb.alb) from laboratory as tb join patient as p on tb.id = p.id where p.sex = 'f' and tb.plt > 400 and p.diagnosis = 'sle'",
    "ex": false,
    "sm": false,
    "cm": 1.0
  },
  {
    "id": 98,
    "db_id": "thrombosis_prediction",
    "difficulty": "simple",
    "question": "How many female patients were given an APS diagnosis?",
    "gold_sql": "select count(id) from patient where sex = 'f' and diagnosis = 'aps'",
    "pred_sql": "select count(*) from patient where sex = 'f' and diagnosis = 'aps'",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 99,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "What percentage of patients who were born in 1980 and were diagnosed with RA are women?",
    "gold_sql": "select cast(sum(case when sex = 'f' then 1 else 0 end) as real) * 100 / count(id) from patient where diagnosis = 'ra' and strftime('%y', birthday) = '1980'",
    "pred_sql": "select cast(sum(case when t2.sex = 'f' then 1 else 0 end) as real) * 100 / count(t1.id) from patient as t1 inner join examination as t34 on t1.id = t24.id inner join laboratory as t31 on t1.id = t21.id where t1.birthday like '1980-%' and t24.diagnosis = 'ra' and t2",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 100,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "Was the patient with the number 57266's uric acid within a normal range?",
    "gold_sql": "select case when (t1.sex = 'f' and t2.ua > 6.5) or (t1.sex = 'm' and t2.ua > 8.0) then true else false end from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.id = 57266",
    "pred_sql": "select avg(tu-pro) > 0.4 or avg(tu-pro) < 0.2 as is_u_pro u-pro = 'normal select case27 u_pro between 0.2 and 0.4 group by id",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 101,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "Provide IDs for male patients with ALT glutamic pylvic transaminase (GPT) that have history of ALT glutamic pylvic transaminase (GPT) exceed the normal range.",
    "gold_sql": "select distinct t1.id from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.sex = 'm' and t2.gpt >= 60",
    "pred_sql": "select id from laboratory where gpt > 34 and sex = 'f' group by id",
    "ex": false,
    "sm": false,
    "cm": 0.25
  },
  {
    "id": 102,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "Please provide the diagnosis of patients with ALT glutamic pylvic transaminase beyond the normal range by ascending order of their date of birth.",
    "gold_sql": "select distinct t1.diagnosis from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.gpt > 60 order by t1.birthday asc",
    "pred_sql": "select distinct p.id, p.diagnosis from patient p join laboratory l on p.id = l.id where l.gpt > 30 order by p.birthday asc",
    "ex": false,
    "sm": false,
    "cm": 0.5
  },
  {
    "id": 103,
    "db_id": "thrombosis_prediction",
    "difficulty": "simple",
    "question": "Provide all ID, sex and birthday of patients whose urea nitrogen (UN) just within the borderline of passing?",
    "gold_sql": "select distinct t1.id, t1.sex, t1.birthday from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.un = 29",
    "pred_sql": "select id, sex, birthday from patient where un = 3.4",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 104,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "List and group all patients by sex for total bilirubin (T-BIL) level not within the normal range.",
    "gold_sql": "select t1.id,t1.sex from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.`t-bil` >= 2.0 group by t1.sex,t1.id",
    "pred_sql": "select p.sex, l.t-bil from laboratory ()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))&",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 105,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "What is the average age of the male patient with high cholesterol?",
    "gold_sql": "select avg(strftime('%y', date('now')) - strftime('%y', t1.birthday)) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.`t-cho` >= 250 and t1.sex = 'm'",
    "pred_sql": "select avg(datediff(curdate(), birthday)/365 from patient where sex = 'm' and tp > 200",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 106,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "For all patients with triglyceride (TG) level beyond the normal range, how many are age more than 50 years?",
    "gold_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.tg >= 200 and strftime('%y', current_timestamp) - strftime('%y', t1.birthday) > 50",
    "pred_sql": "select count(*) from patient as p join laboratory as l on p.id = l.id where l.tg > 1.5 and p.birthday < '1963-01-01'",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 107,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "For patient born between 1936-1956, how many male patients have creatinine phosphokinase beyond the normal range?",
    "gold_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where strftime('%y', t1.birthday) between '1936' and '1956' and t1.sex = 'm' and t2.cpk >= 250",
    "pred_sql": "select count(*) from patient as p join examination as e on p.id = e.id where p.sex = 'm' and e.cre (a.cre)",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 108,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "Provide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range.",
    "gold_sql": "select distinct t1.id, t1.sex , strftime('%y', current_timestamp) - strftime('%y', t1.birthday) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.glu >= 180 and t2.`t-cho` < 250",
    "pred_sql": "select p.id, p.sex, datediff(curdate(), p.birthday) as age from patient as p join laboratory as l on p.id = l.id where l.glu > 200 or t-cho = 'normal range and.t-cho between 1 and 3",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 109,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "What are the patient's diagnosis for those who has lower red blood blood cell? State their ID and age.",
    "gold_sql": "select distinct t1.diagnosis, t1.id , strftime('%y', current_timestamp) -strftime('%y', t1.birthday) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.rbc < 3.5",
    "pred_sql": "select p.id, timestampdiff(yearlier when t2.hct as real then floor((julianday(t1900-examination.examination date)) - julianday(to_date(p.birthday))) / 365) end as t2 as age from patient p))))))))))))))))))))))))))))))&",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 110,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "Among the patients who were diagnosed with SLE, who is the oldest with normal hemoglobin level. Provide the ID and sex.",
    "gold_sql": "select t1.id, t1.sex from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.diagnosis = 'sle' and t2.hgb > 10 and t2.hgb < 17 order by t1.birthday asc limit 1",
    "pred_sql": "select id, sex from patient where diagnosis = 'sle' and hgb = 14.0 order by birthday asc, sex asc and hgb = 14.0",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 111,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "Name the ID and age of patient with two or more laboratory examinations which show their hematoclit level exceeded the normal range.",
    "gold_sql": "select distinct t1.id, strftime('%y', current_timestamp) - strftime('%y', t1.birthday) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.id in ( select id from laboratory where hct >= 52 group by id having count(id) >= 2 )",
    "pred_sql": "select p.id, timestampdiff(year, p.birthday, l.date) as age desc having count(l.id) over (partition by p.id) as lab_count, id.hct > 1 and l.hct > 0.42 group by p.id",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 112,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range?",
    "gold_sql": "select sum(case when t2.plt <= 100 then 1 else 0 end) - sum(case when t2.plt >= 400 then 1 else 0 end) from patient as t1 inner join laboratory as t2 on t1.id = t2.id",
    "pred_sql": "select sum(case when plt < (caselet where laboratory.c in (select plt' then 1 else 0 end) as below_normal, sum(case when plt >= laboratory laboratory.c where laboratory.ct = ' plt' then 1 else 0 end )",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 113,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level.",
    "gold_sql": "select distinct t1.id from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.plt between 100 and 400 and strftime('%y', t2.date) - strftime('%y', t1.birthday) < 50 and strftime('%y', t2.date) = '1984'",
    "pred_sql": "select distinct p.id from patient p join laboratory l on p.id = l.id where l.date between '1984-01-01' and '1984-12-31' and p.plt between 150 and strftime('%y', p.birthday) > ' strftime('%y') - 50 > 0",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 114,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)?",
    "gold_sql": "select cast(sum(case when t2.pt >= 14 and t1.sex = 'f' then 1 else 0 end) as real) * 100 / count(case when t2.pt >= 14 then 1 else 0 end) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where strftime('%y', current_timestamp) - strftime('%y', t1.birthday) > 55",
    "pred_sql": "select cast(sum(case when t2.sex = 'f' then 1 else 0 end) as real) * 100 / count(t1.id) from examination as t1 inner join patient as t2 on t1.id = t2.id where t2.birthday < date('now','-55 year(date) > 5555.0",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 115,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level?",
    "gold_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.fg <= 150 or t2.fg >= 450 and t2.wbc > 3.5 and t2.wbc < 9.0 and t1.sex = 'm'",
    "pred_sql": "select count(*) from patient as p.sex = 'm' and p.id in (select id from examination where thrombosis = 0) 4.7 and e.id from laboratory as l where l.id = p.id and l.fg is not null",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 116,
    "db_id": "thrombosis_prediction",
    "difficulty": "simple",
    "question": "How many patients with an Ig G higher than normal?",
    "gold_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id inner join examination as t3 on t3.id = t2.id where t2.igg >= 2000",
    "pred_sql": "select count(*) from laboratory where igg > 1.igg",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 117,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "Among the patients with a normal Ig G level, how many of them have symptoms?",
    "gold_sql": "select count(t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id inner join examination as t3 on t3.id = t2.id where t2.igg between 900 and 2000 and t3.symptoms is not null",
    "pred_sql": "select count(*) from patient where id in (select p.id from patient p join examination e on p.id = e.id where e.acl ig g = 0)",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 118,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "How many patients with a normal Ig A level came to the hospital after 1990/1/1?",
    "gold_sql": "select count(t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.iga between 80 and 500 and strftime('%y', t1.`first date`) > '1990'",
    "pred_sql": "select count(*) from patient where id in (select id from laboratory where iga = 0 and id in (select id from examination where examination 19000/1'0')) and e.id = 'examination date' > '1990-01-01' 200",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 119,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "For the patients with an abnormal Ig M level, what is the most common disease they are diagnosed with?",
    "gold_sql": "select t1.diagnosis from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.igm not between 40 and 400 group by t1.diagnosis order by count(t1.diagnosis) desc limit 1",
    "pred_sql": "with abnormalpatients.diagnosis as ( select distinct id from laboratory where id = examination.id group by diagnosis order by count(diagnosis = (ex.id where id = examination.id group by diagnosis order by count(*) desc limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 120,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "How many patients with a abnormal C-reactive protein don't have their data recorded?",
    "gold_sql": "select count(t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where (t2.crp = '+' ) and t1.description is null",
    "pred_sql": "select count(*) from laboratory where crp is not null and crp != 'none'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 121,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "Among the patients whose creatinine level is abnormal, how many of them aren't 70 yet?",
    "gold_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.cre >= 1.5 and strftime('%y', date('now')) - strftime('%y', t1.birthday) < 70",
    "pred_sql": "select count(*) from patient where id in (select p.id from examination e join laboratory l on e.id = l.id where l.cre > 1.5 or l.cre < 0.5 or laboratory)",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 122,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital?",
    "gold_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.rnp = 'negative' or t2.rnp = '0' and t1.admission = '+'",
    "pred_sql": "select count(*) from patient where schema from patient ( with antiribonuclearprotein as ( select id from laboratory where rnp = 'negative' ) select id from patient where id in ( select id from examination where id in ( select id from antiribonuclearprotein) select count(*)",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 123,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "Among the patients with normal anti-SM, how many of them does not have thrombosis?",
    "gold_sql": "select count(t1.id) from examination as t1 inner join laboratory as t2 on t1.id = t2.id where t2.sm in ('negative','0') and t1.thrombosis = 0",
    "pred_sql": "select count(*) from patient where sc170 = 'negative' and id in (select id from examination where thrombosis = 0)",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 124,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "Among the patients who has a normal anti-scl70, how many of them are female and does not have any symptom?",
    "gold_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id inner join examination as t3 on t3.id = t2.id where (t2.sc170 = 'negative' or t2.sc170 = '0') and t1.sex = 'f' and t3.symptoms is null",
    "pred_sql": "select count(*) from patient as p join examination as e on p.id = e.id where p.sex = 'f' and e.symptoms is null and p.id",
    "ex": true,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 125,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male?",
    "gold_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.centromea in ('negative', '0') and t2.ssb in ('negative', '0') and t1.sex = 'm'",
    "pred_sql": "select count(*) from patient where sex = 'm' and sc170 anticentromere, 'negative' and centromea = 'negative'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 126,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "Among the patients who have an abnormal level of glutamic oxaloacetic transaminase, when was the youngest of them born?",
    "gold_sql": "select t1.birthday from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.got >= 60 order by t1.birthday desc limit 1",
    "pred_sql": "select min(date) from laboratory where gpt > 30 group by id",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 127,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "For the patients with a normal range of creatinine phosphokinase, how many of them have a positive measure of degree of coagulation?",
    "gold_sql": "select count(t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id inner join examination as t3 on t1.id = t3.id where t2.cpk < 250 and (t3.kct = '+' or t3.rvvt = '+' or t3.lac = '+')",
    "pred_sql": "select count(*) from patientid, laboratory where examinationid.id = laboratory.id and examinationid.cpk < 200 and laboratory.crp = 'normal'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 128,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Give the name of the league had the most goals in the 2016 season?",
    "gold_sql": "select t2.name from match as t1 inner join league as t2 on t1.league_id = t2.id where t1.season = '2015/2016' group by t2.name order by sum(t1.home_team_goal + t1.away_team_goal) desc limit 1",
    "pred_sql": "select league.name from match.season, m.season = '2016 group by league_id order by sum(home_team_goal) + sum(away_team_goal) desc limit 1)",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 129,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "In Scotland Premier League, which away team won the most during the 2010 season?",
    "gold_sql": "select teaminfo.team_long_name from league as leaguedata inner join match as matchdata on leaguedata.id = matchdata.league_id inner join team as teaminfo on matchdata.away_team_api_id = teaminfo.team_api_id where leaguedata.name = 'scotland premier league' and matchdata.season = '2009/2010' and matchdata.away_team_goal - matchdata.home_team_goal > 0 group by matchdata.away_team_api_id order by count(*) desc limit 1",
    "pred_sql": "select away_team_api_id from match where season = '2010' and away_team_goal > home_team_goal group by away_team_api_id order by count(*) desc limit 1",
    "ex": true,
    "sm": false,
    "cm": 0.5
  },
  {
    "id": 130,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "What are the speed in which attacks are put together of the top 4 teams with the highest build Up Play Speed?",
    "gold_sql": "select t1.buildupplayspeed from team_attributes as t1 inner join team as t2 on t1.team_api_id = t2.team_api_id order by t1.buildupplayspeed asc limit 4",
    "pred_sql": "select t.team_long_name, ta.team_fifa_api_id, t.team_fifa as team_attributes order by buildupplayspeed desc limit 4fpa on t.team_api_id = t4fpa.team_api_id join (buildupplayspeedbuildup on t.team_api_id = tbuildup.team_api_id where tbuildup.buildupplayspeed = (select max(buildupplayspeed) from team_attributes)",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 131,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Give the name of the league had the most matches end as draw in the 2016 season?",
    "gold_sql": "select t2.name from match as t1 inner join league as t2 on t1.league_id = t2.id where t1.season = '2015/2016' and t1.home_team_goal = t1.away_team_goal group by t2.name order by count(t1.id) desc limit 1",
    "pred_sql": "select l.name from (select league l join match m where season = '2016' and goal = 'd' group by league_id order by count(*) desc limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 132,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015.",
    "gold_sql": "select distinct datetime() - t2.birthday age from player_attributes as t1 inner join player as t2 on t1.player_api_id = t2.player_api_id where strftime('%y',t1.`date`) >= '2013' and strftime('%y',t1.`date`) <= '2015' and t1.sprint_speed >= 97",
    "pred_sql": "select t2.player_name from player as t1 join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t2 on inner_table inner_condition_ and t1.birthday like '%-%03' and 200 between 2013 and 2015",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 133,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Give the name of the league with the highest matches of all time and how many matches were played in the said league.",
    "gold_sql": "select t2.name, t1.max_count from league as t2 join (select league_id, max(cnt) as max_count from (select league_id, count(id) as cnt from match group by league_id) as subquery) as t1 on t1.league_id = t2.id",
    "pred_sql": "select name , count as (select league_id league on match.league_id = league.id group by name order by count(*) desc limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 134,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "Give the team_fifa_api_id of teams with more than 50 but less than 60 build-up play speed.",
    "gold_sql": "select distinct team_fifa_api_id from team_attributes where buildupplayspeed > 50 and buildupplayspeed < 60",
    "pred_sql": "select team_fifa_api_id from team_attributes where buildupplayspeed between 50 and 60 group by team_fifa_api_id having count(*) > 50",
    "ex": false,
    "sm": false,
    "cm": 0.5
  },
  {
    "id": 135,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "List the long name of teams with above-average build-up play passing in 2012.",
    "gold_sql": "select distinct t4.team_long_name from team_attributes as t3 inner join team as t4 on t3.team_api_id = t4.team_api_id where substr(t3.`date`, 1, 4) = '2012' and t3.buildupplaypassing > ( select cast(sum(t2.buildupplaypassing) as real) / count(t1.id) from team as t1 inner join team_attributes as t2 on t1.team_api_id = t2.team_api_id where strftime('%y',t2.`date`) = '2012')",
    "pred_sql": "select t2.team_long_name from team_attributes as t1 join team as t2 on t1.team_api_id = t2.team_api_id where t1.buildup like '2012%' and t1.buildupplaypassing > (select avg(buildupplaypassing) from team_attributes)",
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 136,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992.",
    "gold_sql": "select cast(count(case when t2.preferred_foot = 'left' then t1.id else null end) as real) * 100 / count(t1.id) percent from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where substr(t1.birthday, 1, 4) between '1987' and '1992'",
    "pred_sql": "select cast(sum(case when t2.preferred_foot = 'left' then 1 else 0 end) as real) * 100 / count(t1.player_api_id) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.birthday between '1987-01-01' and '1992-12-31'",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 137,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "Find the average number of long-shot done by Ahmed Samir Farag.",
    "gold_sql": "select cast(sum(t2.long_shots) as real) / count(t2.`date`) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.player_name = 'ahmed samir farag'",
    "pred_sql": "select avg(t2) as (select player_api_id as t join team_attributes as ta on t.team_api_id = ta.team_api_id join player as p on p.player_api_id = ta.player_api_id where p.player_name = 'ahmed samir farag'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 138,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy.",
    "gold_sql": "select t1.player_name from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.height > 180 group by t1.id order by cast(sum(t2.heading_accuracy) as real) / count(t2.`player_fifa_api_id`) desc limit 10",
    "pred_sql": "select t2.player_name from player as t1 join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.height > 180 group by t2.player_api_id order by avg(t2.heading_accuracy) desc limit 10",
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 139,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season.",
    "gold_sql": "select t1.name from league as t1 inner join match as t2 on t1.id = t2.league_id where t2.season = '2009/2010' group by t1.name having (cast(sum(t2.home_team_goal) as real) / count(distinct t2.id)) - (cast(sum(t2.away_team_goal) as real) / count(distinct t2.id)) > 0",
    "pred_sql": "select t2.name from match as m join league as t2 on m.league_id = t2.id where m.season = '2009/2010' and m.home_team_goal > m.away_team_goal group by t2.name",
    "ex": true,
    "sm": false,
    "cm": 1.0
  },
  {
    "id": 140,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "List the football players with a birthyear of 1970 and a birthmonth of October.",
    "gold_sql": "select player_name from player where substr(birthday, 1, 7) = '1970-10'",
    "pred_sql": "select player_name from player where birthday like '1970-10%'",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 141,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "What is the overall rating of the football player Gabriel Tamas in year 2011?",
    "gold_sql": "select t2.overall_rating from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.player_name = 'gabriel tamas' and strftime('%y', t2.date) = '2011'",
    "pred_sql": "select overall_rating from player_attributes where player_api_id = (select player_api_id from player where player_name = 'gabriel tamas') and date like '2011%'t.player_name",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 142,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Calculate the average home team goal in the 2010/2011 season in the country of Poland.",
    "gold_sql": "select cast(sum(t2.home_team_goal) as real) / count(t2.id) from country as t1 inner join match as t2 on t1.id = t2.country_id where t1.name = 'poland' and t2.season = '2010/2011'",
    "pred_sql": "select avg(home_team_goal) from match where season='2010/2011' and country_id in(select id from country where name='poland'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 143,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "Who has the highest average finishing rate between the highest and shortest football player?",
    "gold_sql": "select a from ( select avg(finishing) result, 'max' a from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.height = ( select max(height) from player ) union select avg(finishing) result, 'min' a from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.height = ( select min(height) from player ) ) order by result desc limit 1",
    "pred_sql": "select avg(t2.finishing) from player_attributes as t1 inner join player on player.player_api_id = t1.player_api_id order by t2.height limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.4
  },
  {
    "id": 144,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "From 2010 to 2015, what was the average overall rating of players who are higher than 170?",
    "gold_sql": "select cast(sum(t2.overall_rating) as real) / count(t2.id) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.height > 170 and strftime('%y',t2.`date`) >= '2010' and strftime('%y',t2.`date`) <= '2015'",
    "pred_sql": "select avg(overall_rating) from player_attributes where player_api_id in (select player_api_id from player where height > 170 and date between '2010-01-01' and '2015-12-31')",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 145,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye\n?",
    "gold_sql": "select cast(sum(case when t1.player_name = 'abdou diallo' then t2.ball_control else 0 end) as real) / count(case when t1.player_name = 'abdou diallo' then t2.id else null end) - cast(sum(case when t1.player_name = 'aaron appindangoye' then t2.ball_control else 0 end) as real) / count(case when t1.player_name = 'aaron appindangoye' then t2.id else null end) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id",
    "pred_sql": "with player_attdial as avg_ball_control from player_attributes where player_api_id in (select player_api_id from player where player_name in ('abdou diallo', 'aaron appindangoye'))",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 146,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "Which player is older, Aaron Lennon or Abdelaziz Barrada?",
    "gold_sql": "select player_name from player where player_name in ('aaron lennon', 'abdelaziz barrada') order by birthday asc limit 1",
    "pred_sql": "select player_name from player where player_api_id as (select player_api_id from player where player_name = 'aaron lennon'), min_abdel \";\"",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 147,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "Which player is the tallest?",
    "gold_sql": "select player_name from player order by height desc limit 1",
    "pred_sql": "select player_name, player_name from (select max(height) as max(player_height)",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 148,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Among the players whose preferred foot was the left foot when attacking, how many of them would remain in his position when the team attacked?",
    "gold_sql": "select count(player_api_id) from player_attributes where preferred_foot = 'left' and attacking_work_rate = 'low'",
    "pred_sql": "select count(*) from player_attributes where preferred_foot = 'left'",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 149,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "Among the players born before the year 1986, how many of them would remain in his position and defense while the team attacked?",
    "gold_sql": "select count(distinct t1.player_name) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where strftime('%y',t1.birthday) < '1986' and t2.defensive_work_rate = 'high'",
    "pred_sql": "select count(*) from player_attributes pa join player p on pa.player_api_id = p.player_api_id join team_attributes ta on pa.player_fifa_api_id and p.player_fifa_api_id where p.birthday < '1986-01-01' and pa.player_api_id = p.player_api_id and p.birthday < '1 = 1-19-198500:00:00' and ta.buildupplayspeed",
    "ex": true,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 150,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Please list the names of the players whose volley score and dribbling score are over 70.",
    "gold_sql": "select distinct t1.player_name from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t2.volleys > 70 and t2.dribbling > 70",
    "pred_sql": "select t2.player_name from player_attributes as t1 join player as t2 on t1.player_api_id = t2.player_api_id where t1.volley_score 70_d_score70_dribbling 100.player_api_id from player_attributes as select0 where volley > 70 intersect select t1.volley from player_attributes as t1 join player as t2 on t1.player_api_id = t2.player_api_id where t1.drib",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 151,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "How many matches were held in the Belgium Jupiler League in April, 2009?",
    "gold_sql": "select count(t2.id) from league as t1 inner join match as t2 on t1.id = t2.league_id where t1.name = 'belgium jupiler league' and substr(t2.`date`, 1, 7) = '2009-04'",
    "pred_sql": "select count(*) from match join match on datepartition by '2('2009-04-01', '2009-04-30') and country_id = (select id from country where name = 'belgium') and league_id = (select id from league where name = 'belgium jupiler league')",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 152,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "Give the name of the league had the most matches in the 2008/2009 season?",
    "gold_sql": "select t1.name from league as t1 join match as t2 on t1.id = t2.league_id where t2.season = '2008/2009' group by t1.name having count(t2.id) = (select max(match_count) from (select count(t2.id) as match_count from match as t2 where t2.season = '2008/2009' group by t2.league_id))",
    "pred_sql": "select league_id, count(*) as match_count from match where season = '2008/2009' group by league_id order by match_count desc limit 1;)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))&",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 153,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel?",
    "gold_sql": "select (sum(case when t1.player_name = 'ariel borysiuk' then t2.overall_rating else 0 end) * 1.0 - sum(case when t1.player_name = 'paulin puel' then t2.overall_rating else 0 end)) * 100 / sum(case when t1.player_name = 'paulin puel' then t2.overall_rating else 0 end) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id",
    "pred_sql": "select (67 - paulin.overall as (select sum(case when t2.player_api_id = 1.player_api_id then overall_rating else 0 end) - sum(case when where1.player_api_id = player.player_api_id then overall_rating else 0 end) as overall from player.player_api_id 1))))))))))))))))))))))))))))))))&",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 154,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Calculate the average overall rating of Pietro Marino.",
    "gold_sql": "select cast(sum(t2.overall_rating) as real) / count(t2.id) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.player_name = 'pietro marino'",
    "pred_sql": "select avg(overall_rating) from player_attributes where player_api_id = (select player_api_id from player where player_name = 'pietro marino')",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 155,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "What is Ajax's highest chance creation passing score and what is it classified as?",
    "gold_sql": "select t2.chancecreationpassing, t2.chancecreationpassingclass from team as t1 inner join team_attributes as t2 on t1.team_api_id = t2.team_api_id where t1.team_long_name = 'ajax' order by t2.chancecreationpassing desc limit 1",
    "pred_sql": "select max(chancecreationpassing), max(chancecreationpassingclass) from team_attributes where team_api_id = (select team_api_id from team where name = 'ajax')",
    "ex": false,
    "sm": false,
    "cm": 0.2
  },
  {
    "id": 156,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "For the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player.",
    "gold_sql": "select t1.player_name from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where substr(t2.`date`, 1, 10) = '2016-06-23' and t2.overall_rating = 77 order by t1.birthday asc limit 1",
    "pred_sql": "select t.player as (select t2.player_name from player as t1 join player_attributes as t1 join player t1 on t2 on t1.player_api_id = t2.player_api_id where overall_rating = 77 and date = '2016-06-23' group by player_api_id) player11 join player player12 on player11.player_api_id = player12.player_api_id order by player12.birthday asc limit",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 157,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "What was the overall rating for Aaron Mooy on 2016/2/4?",
    "gold_sql": "select t2.overall_rating from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where substr(t2.`date`, 1, 10) = '2016-02-04' and t1.player_name = 'aaron mooy'",
    "pred_sql": "select overall_rating from player_attributes where player_api_id = (select player_api_id from player where player_name = 'aaron mooy') and date = '2016-02-04 00:00:00'",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 158,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "How was Francesco Migliore's attacking work rate on 2015/5/1?",
    "gold_sql": "select t2.attacking_work_rate from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t2.`date` like '2015-05-01%' and t1.player_name = 'francesco migliore'",
    "pred_sql": "select attacking_work_rate from player_attributes where player_api_id = (select player_api_id from player where player_name = 'francesco migliore') and date = '2015-05-01'",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 159,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "When was the first time did Kevin Constant have his highest crossing score? Give the date.",
    "gold_sql": "select `date` from ( select t2.crossing, t2.`date` from player as t1 inner join player_attributes as t2 on t1.player_fifa_api_id = t2.player_fifa_api_id where t1.player_name = 'kevin constant' order by t2.crossing desc) order by date desc limit 1",
    "pred_sql": "select t2.date from player as t1 join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.player_name = 'kevin constant' order by t2.crossing desc limit 1",
    "ex": true,
    "sm": false,
    "cm": 0.8
  },
  {
    "id": 160,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Tell the build Up play passing class for \"FC Lorient\" on 2010/2/22.",
    "gold_sql": "select t2.buildupplaypassingclass from team as t1 inner join team_attributes as t2 on t1.team_api_id = t2.team_api_id where t1.team_long_name = 'fc lorient' and t2.`date` like '2010-02-22%'",
    "pred_sql": "select buildupplaypassingclass from team_attributes where team_api_id from team where name = 'fc ldate l lorient 2010-02-22 000:00'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 161,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "For the team \"Hannover 96\", what was its defence aggression class on 2015/9/10?",
    "gold_sql": "select t2.defenceaggressionclass from team as t1 inner join team_attributes as t2 on t1.team_api_id = t2.team_api_id where t1.team_long_name = 'hannover 96' and t2.`date` like '2015-09-10%'",
    "pred_sql": "select defenceaggressionclass from team_attributes where team_api_id in (select team_api_id from team where team_long_name like 'hannover 96') and date like '2015/9/10'",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 162,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21?",
    "gold_sql": "select cast(sum(t2.overall_rating) as real) / count(t2.id) from player as t1 inner join player_attributes as t2 on t1.player_fifa_api_id = t2.player_fifa_api_id where t1.player_name = 'marko arnautovic' and substr(t2.`date`, 1, 10) between '2007-02-22' and '2016-04-21'",
    "pred_sql": "select avg(overall_rating) from player_attributes where player_api_id = (select player_api_id from player where player_name = 'marko arnautovic') and date between '2007-02-22' and '2016-04-21'",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 163,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12?",
    "gold_sql": "select (sum(case when t1.player_name = 'landon donovan' then t2.overall_rating else 0 end) * 1.0 - sum(case when t1.player_name = 'jordan bowery' then t2.overall_rating else 0 end)) * 100 / sum(case when t1.player_name = 'landon donovan' then t2.overall_rating else 0 end) lvsj_percent from player as t1 inner join player_attributes as t2 on t1.player_fifa_api_id = t2.player_fifa_api_id where substr(t2.`date`, 1, 10) = '2013-07-12'",
    "pred_sql": "select cast((select overall_rating from player_attributes where player_api_id = (select player_api_id from player where player_name = 'landon donovan') and date = '2013-07-12') as '2013_7_ name = 'player_attributes') as real) / (select overall_rating from player_attributes where player_api_id = (select player_api_id from player where player_name = 'jordan bowery') and date = '2",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 164,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "List down most tallest players' name.",
    "gold_sql": "select player_name from (select player_name, height, dense_rank() over (order by height desc) as rank from player) where rank = 1",
    "pred_sql": "with tallest_players as ( select player_name from player where height in player.height from player table to be adjusted based on requirement) order by clause needed for the height desc limit",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 165,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "State the name of the most strongest player.",
    "gold_sql": "select distinct t1.player_name from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t2.overall_rating = (select max(overall_rating) from player_attributes)",
    "pred_sql": "select player_name from player where overall_rating = (select max(overall_rating) from player_attributes join player on player_attributes.player_api_id = player.player_api_id)",
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 166,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Who are the players that tend to be attacking when their mates were doing attack moves? List down their name.",
    "gold_sql": "select distinct t1.player_name from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t2.attacking_work_rate = 'high'",
    "pred_sql": "select t2.player_name from team_attributes as t1 join player as t2 on t1.team_fifa_api_id = t2.player_fifa_api_id where t1.buildupplayspeedclass = 'balanced' and t1.buildupplaydribblingclass = 'little'",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 167,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "What are the short name of team who played safe while creating chance of passing?",
    "gold_sql": "select distinct t1.team_short_name from team as t1 inner join team_attributes as t2 on t1.team_api_id = t2.team_api_id where t2.chancecreationpassingclass = 'safe'",
    "pred_sql": "select t2.team_short_name from team_attributes as t1 join team as t2 on t1.team_api_id = t2.team_api_id where t1.defenceteamwidth = 1 = 'cover' and t1.chancecreationpassingclass = 'normal'",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 168,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "How many football players born after the 1990s have the first name \"Aaron\"?",
    "gold_sql": "select count(id) from player where birthday > '1990' and player_name like 'aaron%'",
    "pred_sql": "select count(*) from player where player_name like 'aaron%' and strftime('%y', birthday) > '1990'",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 169,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "What is the difference between players 6 and 23's jumping scores?",
    "gold_sql": "select sum(case when t1.id = 6 then t1.jumping else 0 end) - sum(case when t1.id = 23 then t1.jumping else 0 end) from player_attributes as t1",
    "pred_sql": "with player_scores as1.overall_players_jumping_score = ( player join player_attributes.player_api_id) on player_attributes.player_api_id and player_api_id = 23 and player_jumping = 6 from player_attributes join player6, select overall_rating from player where player_api_id = 23 player_attributes order by player23 ))))))))))))))))))))&",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 170,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Please provide top four football players' IDs who are among the lowest potential players and prefer to use the right foot when attacking.",
    "gold_sql": "select id from player_attributes where preferred_foot = 'right' order by potential asc limit 4",
    "pred_sql": "select player_api_id from player where preferred_foot = 'right' and attacking_work_rate = 'medium' order by potential asc limit 4",
    "ex": false,
    "sm": false,
    "cm": 0.4
  },
  {
    "id": 171,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "How many players had the highest potential score for crossing that preferred to use their left foots while attacking?",
    "gold_sql": "select count(t1.id) from player_attributes as t1 where t1.preferred_foot = 'left' and t1.crossing = ( select max(crossing) from player_attributes)",
    "pred_sql": "select count(t.player_api_id, p.player_api_id) from player as p join player_attributes as pa on p.player_api_id = pa.player_api_id join team_attributes as ta on p.player_api_id = ta.team_fifa_api_id where pa.preferred_foot = 'left' and pa.attacking_work_rate = 'high' and pa.crossing = (select max(crossing) from player_attributes where preferred_foot = 'left' and attacking_work_rate = 'high')",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 172,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "What was the final score for the match on September 24, 2008, in the Belgian Jupiler League between the home team and the away team?",
    "gold_sql": "select t2.home_team_goal, t2.away_team_goal from league as t1 inner join match as t2 on t1.id = t2.league_id where t1.name = 'belgium jupiler league' and t2.`date` like '2008-09-24%'",
    "pred_sql": "select home_team_goal, away_team_goal from match where date=\"2008-09-24 00:00:00\" and league_id=1 and season=\"2008/2009\" and stage=1",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 173,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Does the KSV Cercle Brugge team have a slow, balanced or fast speed class?",
    "gold_sql": "select distinct t1.buildupplayspeedclass from team_attributes as t1 inner join team as t2 on t1.team_api_id = t2.team_api_id where t2.team_long_name = 'ksv cercle brugge'",
    "pred_sql": "select t2.buildupplayspeedclass from team as t1 inner join team_attributes as t2 on t1.team_api_id = t2.team_api_id where t1.team_long_name = 'ksv cercle brugge'",
    "ex": true,
    "sm": false,
    "cm": 1.0
  },
  {
    "id": 174,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "Please state the finishing rate and curve score of the player who has the heaviest weight.",
    "gold_sql": "select id, finishing, curve from player_attributes where player_api_id = ( select player_api_id from player order by weight desc limit 1 ) limit 1",
    "pred_sql": "select t3 as player_api_id , t3.finishing , t4 asurveyn,t sum1.weight t1 join player as t2 on t1.player_api_id = t2.player_api_id join team as t5.overall_rating on player.weight order by t2.weight desc limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 175,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "Which top 4 leagues had the most games in the 2015-2016 season?",
    "gold_sql": "select t1.name from league as t1 inner join match as t2 on t1.id = t2.league_id where t2.season = '2015/2016' group by t1.name order by count(t2.id) desc limit 4",
    "pred_sql": "select league_id, count(*) as game_count from match where season = '2015/2016' group by league_id order by game_count desc limit 4",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 176,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Please provide the full name of the away team that scored the most goals.",
    "gold_sql": "select t2.team_long_name from match as t1 inner join team as t2 on t1.away_team_api_id = t2.team_api_id order by t1.away_team_goal desc limit 1",
    "pred_sql": "select t2.team_long_name from match as m join team as t2 on m.away_team_api_id = t2.team_api_id group by t2.team_long_name order by count(*)",
    "ex": false,
    "sm": false,
    "cm": 0.4
  },
  {
    "id": 177,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "Please name one player whose overall strength is the greatest.",
    "gold_sql": "select distinct t1.player_name from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t2.overall_rating = ( select max(overall_rating) from player_attributes)",
    "pred_sql": "select player_name from player where player_api_id = (select player_api_id from player_attributes where overall_rating = (select max(overall_rating) from player_attributes))",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 178,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "What is the percentage of players that are under 180 cm who have an overall strength of more than 70?",
    "gold_sql": "select cast(count(case when t2.overall_rating > 70 and t1.height < 180 then t1.id else null end) as real) * 100 / count(t1.id) percent from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id",
    "pred_sql": "select cast(sum(case when t2.height < 180 then 1 else 0 end) as real) * 100 / count(*) from player as t1 join player on player_api_id = 18 on t1.player_api_id = 0 8333333 join player join player_attributes as t2 on t1.player_api_id = t 2_attributes as t10 join player join player attributes as t where player",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 179,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "Please list the reference names of the drivers who are eliminated in the first period in race number 20.",
    "gold_sql": "select t2.driverref from qualifying as t1 inner join drivers as t2 on t2.driverid = t1.driverid where t1.raceid = 20 order by t1.q1 desc limit 5",
    "pred_sql": "select t2.driverref from results as t1 join drivers as t2 on t1.driverid = t2.driverid where t1.raceid = 20 and t1.position > 20 and t1.positionorder = 1",
    "ex": false,
    "sm": false,
    "cm": 0.2
  },
  {
    "id": 180,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "What is the surname of the driver with the best lap time in race number 19 in the second qualifying period?",
    "gold_sql": "select t2.surname from qualifying as t1 inner join drivers as t2 on t2.driverid = t1.driverid where t1.raceid = 19 order by t1.q2 asc limit 1",
    "pred_sql": "select t3.surname from qualifying as t1 join drivers as t3 on t1.driverid = t3.driverid join races as t2 on t1.raceid = t2.raceid where t1.number = 2 and t2.round = 19 order by t1.q2 asc limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.6
  },
  {
    "id": 181,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "Please give the name of the race held on the circuits in Germany.",
    "gold_sql": "select distinct t2.name from circuits as t1 inner join races as t2 on t2.circuitid = t1.circuitid where t1.country = 'germany'",
    "pred_sql": "select t2.name from circuits as t1 join races as t2 on t1.circuitid = t2.circuitid where t1.country = 'germany'",
    "ex": true,
    "sm": false,
    "cm": 1.0
  },
  {
    "id": 182,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "What is the coordinates location of the circuits for Australian grand prix?",
    "gold_sql": "select distinct t1.lat, t1.lng from circuits as t1 inner join races as t2 on t2.circuitid = t1.circuitid where t2.name = 'australian grand prix'",
    "pred_sql": "select t1.location, t1.lat, t1.lng from circuits as t1 join races as t2 on t1.circuitid = t2.circuitid where t2.name = 'australian grand prix'",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 183,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "Give the coordinate position for Abu Dhabi Grand Prix.",
    "gold_sql": "select distinct t1.lat, t1.lng from circuits as t1 inner join races as t2 on t2.circuitid = t1.circuitid where t2.name = 'abu dhabi grand prix'",
    "pred_sql": "select lat, lng from circuits where name = 'abu dhabi grand prix'",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 184,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "What's Bruno Senna's Q1 result in the qualifying race No. 354?",
    "gold_sql": "select t1.q1 from qualifying as t1 inner join drivers as t2 on t2.driverid = t1.driverid where t1.raceid = 354 and t2.forename = 'bruno' and t2.surname = 'senna'",
    "pred_sql": "select q1 from qualifying where raceid = 354 and driverid = (select driverid from drivers where forename = 'bruno' and surname = 'senna')",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 185,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "What is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903?",
    "gold_sql": "select t2.number from qualifying as t1 inner join drivers as t2 on t2.driverid = t1.driverid where t1.raceid = 903 and t1.q3 like '1:54%'",
    "pred_sql": "select t2.number from qualifying as t1 join drivers as t2 on t1.driverid = t2.driverid where t1.qualifyid = 903 and t1.position = 3 and t1.q3 = '01:54.000'",
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 186,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",
    "gold_sql": "select count(t3.driverid) from races as t1 inner join results as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t1.year = 2007 and t1.name = 'bahrain grand prix' and t2.time is null",
    "pred_sql": "select count(*) from results where raceid in (select raceid from races where name = 'bahrain grand prix' and year = 2007 and statusid = 2)",
    "ex": true,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 187,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "For all the drivers who finished the game in race No. 592, who is the oldest?",
    "gold_sql": "select t1.forename, t1.surname from drivers as t1 inner join results as t2 on t2.driverid = t1.driverid where t2.raceid = 592 and t2.time is not null and t1.dob is not null order by t1.dob asc limit 1",
    "pred_sql": "select min(surname) from drivers where driverid in (select driverid from results where resultid in (select resultid from races.url))",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 188,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "Who was the player that got the lap time of 0:01:27 in the race No. 161? Show his introduction website.",
    "gold_sql": "select distinct t2.forename, t2.surname, t2.url from laptimes as t1 inner join drivers as t2 on t2.driverid = t1.driverid where t1.raceid = 161 and t1.time like '1:27%'",
    "pred_sql": "select url from drivers where driverid = (select driverid from laptimes where raceid = 161 and time = '0:01:27')",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 189,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "Where is Malaysian Grand Prix held? Give the location coordinates.",
    "gold_sql": "select distinct t1.lat, t1.lng from circuits as t1 inner join races as t2 on t2.circuitid = t1.circuitid where t2.name = 'malaysian grand prix'",
    "pred_sql": "select location, lat, lng from circuits where name = 'malaysian grand prix'",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 190,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "For the constructor which got the highest point in the race No. 9 , what is its introduction website?",
    "gold_sql": "select t2.url from constructorresults as t1 inner join constructors as t2 on t2.constructorid = t1.constructorid where t1.raceid = 9 order by t1.points desc limit 1",
    "pred_sql": "select url from constructors where constructorid = (select constructorid from constructorresults where raceid = 9 order by points desc limit 1)",
    "ex": true,
    "sm": false,
    "cm": 0.8
  },
  {
    "id": 191,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?",
    "gold_sql": "select t2.code from qualifying as t1 inner join drivers as t2 on t2.driverid = t1.driverid where t1.raceid = 45 and t1.q3 like '1:33%'",
    "pred_sql": "select t2.code from qualifying as t1 join drivers as t2 on t1.driverid = t2.driverid where t1.raceid = 45 and t1.q3 = '0:01:33' limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.5
  },
  {
    "id": 192,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "Show me the season page of year when the race No. 901 took place.",
    "gold_sql": "select t2.url from races as t1 inner join seasons as t2 on t2.year = t1.year where t1.raceid = 901",
    "pred_sql": "select url from seasons where year = (select year) raceid from races where raceid = 901id = 901 ';'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 193,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "For all the drivers who finished the game in race No. 872, who is the youngest?",
    "gold_sql": "select t1.forename, t1.surname from drivers as t1 inner join results as t2 on t2.driverid = t1.driverid where t2.raceid = 872 and t2.time is not null order by t1.dob desc limit 1",
    "pred_sql": "select min(surname) from drivers where driverid in (select driverid from results where raceid = 872 and position in (1,2,3))",
    "ex": false,
    "sm": false,
    "cm": 0.2
  },
  {
    "id": 194,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "For the driver who set the fastest lap speed, what is his nationality?",
    "gold_sql": "select t1.nationality from drivers as t1 inner join results as t2 on t2.driverid = t1.driverid order by t2.fastestlapspeed desc limit 1",
    "pred_sql": "select nationality from drivers where driverid = (select driverid from results where statusid = (select statusid from status where status = 'finished') order by fastestlapspeed desc limit 1)",
    "ex": false,
    "sm": false,
    "cm": 0.6
  },
  {
    "id": 195,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed?",
    "gold_sql": "select (sum(iif(t2.raceid = 853, t2.fastestlapspeed, 0)) - sum(iif(t2.raceid = 854, t2.fastestlapspeed, 0))) * 100 / sum(iif(t2.raceid = 853, t2.fastestlapspeed, 0)) from drivers as t1 inner join results as t2 on t2.driverid = t1.driverid where t1.forename = 'paul' and t1.surname = 'di resta'",
    "pred_sql": "select cast((select fastestlapspeed from results where resultid = (select max(resultid) from results where raceid = (select raceid from results where resultid = (select max(resultid) from results where raceid = (select raceid from results where driverid = (select driverid from drivers where driverref = 'diresta') and number = 853) and statusid = (select min(id) from results where raceid = (select raceid",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 196,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "For the drivers who took part in the race in 1983/7/16, what's their race completion rate?",
    "gold_sql": "select cast(count(case when t2.time is not null then t2.driverid end) as real) * 100 / count(t2.driverid) from races as t1 inner join results as t2 on t2.raceid = t1.raceid where t1.date = '1983-07-16'",
    "pred_sql": "select cast(s.driverid as real) * 100 / count(distinct raceid) from (select raceid, count(distinct case when position in (1, 2, 3) then driverid end",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 197,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "List the names of all races that occurred in the earliest recorded year and month.",
    "gold_sql": "select name from races where strftime('%y', date) = ( select strftime('%y', date) from races order by date asc limit 1 ) and strftime('%m', date) = ( select strftime('%m', date) from races order by date asc limit 1 )",
    "pred_sql": "select name from races where year, min(minstr(date,' ')%-1) as earliest_year_month",
    "ex": false,
    "sm": false,
    "cm": 0.2
  },
  {
    "id": 198,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "State the driver with the most points scored. Find his full name with that points.",
    "gold_sql": "select t3.forename, t3.surname, t2.points from races as t1 inner join driverstandings as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid order by t2.points desc limit 1",
    "pred_sql": "select t3.forename , t3.surname from drivers as t3 inner join results on t.driverstandings as t1 on t3.driverid = t1.driverid where t1.points = ( select max(points) from driverstandings )",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 199,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "What is the best lap time recorded? List the driver and race with such recorded lap time.",
    "gold_sql": "select t2.milliseconds, t1.forename, t1.surname, t3.name from drivers as t1 inner join laptimes as t2 on t1.driverid = t2.driverid inner join races as t3 on t2.raceid = t3.raceid order by t2.milliseconds asc limit 1",
    "pred_sql": "select t1.driverid, t1.raceid, min(t1.time) from laptimes as t1 join races as t2 on t1.raceid = t2.raceid where t1.time = (select min(time) from laptimes) group by t1.driverid, t1.raceid",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 200,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "What is the average lap time for Lewis Hamilton in the 2009 Malaysian Grand Prix?",
    "gold_sql": "select avg(t2.milliseconds) from races as t1 inner join laptimes as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t3.forename = 'lewis' and t3.surname = 'hamilton' and t1.year = 2009 and t1.name = 'malaysian grand prix'",
    "pred_sql": "select avg(milliseconds) from laptimes where raceid = (select raceid from races where name = 'malaysian grand prix' and year = 2009) and driverid = (select driverid from drivers where forename = 'lewis' and surname = 'hamilton')",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 201,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010.",
    "gold_sql": "select cast(count(case when t2.position <> 1 then t2.position end) as real) * 100 / count(t2.driverstandingsid) from races as t1 inner join driverstandings as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t3.surname = 'hamilton' and t1.year >= 2010",
    "pred_sql": "select cast(sum(case when t2.position = 1 then 1 else 0 end) as real) * 100 / count(*) from races as t1 inner join results as t2 on t1.raceid = t2.raceid where t2.driverid = (select driverid from drivers where forename = 'lewis' and surname = 'hamilton') and t1.year >= 2010",
    "ex": true,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 202,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "Name the driver with the most winning. Mention his nationality and what is his maximum point scores.",
    "gold_sql": "select t1.forename, t1.surname, t1.nationality, max(t2.points) from drivers as t1 inner join driverstandings as t2 on t2.driverid = t1.driverid where t2.wins >= 1 group by t1.forename, t1.surname, t1.nationality order by count(t2.wins) desc limit 1",
    "pred_sql": "select t3.nationality, max(t1.points) from driverstandings as t1 join drivers as t3 on t1.driverid = t3.driverid where t1.position = 1 group by t3.nationality",
    "ex": false,
    "sm": false,
    "cm": 0.16666666666666666
  },
  {
    "id": 203,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "How old is the youngest Japanese driver? What is his name?",
    "gold_sql": "select strftime('%y', current_timestamp) - strftime('%y', dob), forename , surname from drivers where nationality = 'japanese' order by dob desc limit 1",
    "pred_sql": "select min(dob), surname from drivers where nationality = 'japanese'",
    "ex": false,
    "sm": false,
    "cm": 0.4
  },
  {
    "id": 204,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "Name the races along with its circuit name and location for f1 races hosted in September 2005.",
    "gold_sql": "select distinct t2.name, t1.name, t1.location from circuits as t1 inner join races as t2 on t2.circuitid = t1.circuitid where t2.year = 2005 and strftime('%m', t2.date) = '09'",
    "pred_sql": "select t1.name, t1.location from races as t1 join circuits as t2 on t1.circuitid = t2.circuitid where t1.year = 2005 and month(t1.date) = 9",
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 205,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "Which race was Alex Yoong in when he was in track number less than 20?",
    "gold_sql": "select t1.name from races as t1 inner join driverstandings as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t3.forename = 'alex' and t3.surname = 'yoong' and t2.position < 20",
    "pred_sql": "select t20.driverid, t1.driverid = (select t.raceid from results t where t.driverid = (select d.driverid from drivers d where d.forename = 'alex' and d.surname = 'yoong'))",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 206,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "State the race and year of race in which Michael Schumacher had his fastest lap.",
    "gold_sql": "select t1.name, t1.year from races as t1 inner join laptimes as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t3.forename = 'michael' and t3.surname = 'schumacher' order by t2.milliseconds asc limit 1",
    "pred_sql": "select t2.year from drivers as t1 join results as t2 on t1.driverid = t2.driverid where t1.forename = 'michael' and t1.surname = 'schumacher' and t2.fastestlap = 1",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 207,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "Which was Lewis Hamilton first race? What was his points recorded for his first race event?",
    "gold_sql": "select t1.name, t2.points from races as t1 inner join driverstandings as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t3.forename = 'lewis' and t3.surname = 'hamilton' order by t1.year asc limit 1",
    "pred_sql": "select t2.positiontext from driverstandings as points_for where race.driverid = points_for.driverstandings as t1 join races as t2 on t1.raceid = t2.raceid join drivers as t3 on t1.driverid = t3.driverid where t3.forename = 'lewis' and t3.surname = 'hamilton' order by t2.year asc limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.0
  }
]