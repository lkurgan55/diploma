[
  {
    "id": 0,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "What is the ratio of customers who pay in EUR against customers who pay in CZK?",
    "gold_sql": "select cast(sum(iif(currency = 'eur', 1, 0)) as float) / sum(iif(currency = 'czk', 1, 0)) as ratio from customers",
    "pred_sql": "select cast(sum(case when t2.currency = 'czk' then 1 else 0 end) as real) * 100 / count(*) from transactions_1k as t1 inner join customers as t2 on t1.customerid = t2.customerid",
    "exec_time": 78.61,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 1,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "In 2012, who had the least consumption in LAM?",
    "gold_sql": "select t1.customerid from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where t1.segment = 'lam' and substr(t2.date, 1, 4) = '2012' group by t1.customerid order by sum(t2.consumption) asc limit 1",
    "pred_sql": "select customerid from yearmonth where date like '2012%' and segment = 'lam' group by customerid order by sum(consumption) limit 1",
    "exec_time": 64.46,
    "ex": false,
    "sm": false,
    "cm": 0.5,
    "ast": 0.37254901960784315
  },
  {
    "id": 2,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "What was the average monthly consumption of customers in SME for the year 2013?",
    "gold_sql": "select avg(t2.consumption) / 12 from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where substr(t2.date, 1, 4) = '2013' and t1.segment = 'sme'",
    "pred_sql": "select avg(consumption) from yearmonth where customerid in (select customerid from customers where segment = 'sme') and date like '2013%'",
    "exec_time": 67.16,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 3,
    "db_id": "debit_card_specializing",
    "difficulty": "challenging",
    "question": "What was the difference in gas consumption between CZK-paying customers and EUR-paying customers in 2012?",
    "gold_sql": "select sum(iif(t1.currency = 'czk', t2.consumption, 0)) - sum(iif(t1.currency = 'eur', t2.consumption, 0)) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where substr(t2.date, 1, 4) = '2012'",
    "pred_sql": "select sum(case when t2.currency = 'eur' then t1.consumption else 0 end) - sum(case when t2.currency = 'czk' then t1.consumption else 0 end) as difference from yearmonth t1 join customers t2 on t1.customerid = t2.customerid where t1.date like '2012%'",
    "exec_time": 93.59,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.5094339622641509
  },
  {
    "id": 4,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "Which year recorded the most consumption of gas paid in CZK?",
    "gold_sql": "select substr(t2.date, 1, 4) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where t1.currency = 'czk' group by substr(t2.date, 1, 4) order by sum(t2.consumption) desc limit 1",
    "pred_sql": "select date, consumption from yearmonth where customerid in (select customerid from customers where currency = 'czk') group by date, consumption order by sum(consumption) desc limit 1",
    "exec_time": 67.45,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 5,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "What was the gas consumption peak month for SME customers in 2013?",
    "gold_sql": "select substr(t2.date, 5, 2) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where substr(t2.date, 1, 4) = '2013' and t1.segment = 'sme' group by substr(t2.date, 5, 2) order by sum(t2.consumption) desc limit 1",
    "pred_sql": "select date from yearmonth where customerid in (select customerid from customers where segment = 'sme') and date like '2013%' group by date order by sum(consumption) desc limit 1",
    "exec_time": 75.43,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 6,
    "db_id": "debit_card_specializing",
    "difficulty": "challenging",
    "question": "What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME?",
    "gold_sql": "select cast(sum(iif(t1.segment = 'sme', t2.consumption, 0)) as real) / count(t1.customerid) - cast(sum(iif(t1.segment = 'lam', t2.consumption, 0)) as real) / count(t1.customerid) , cast(sum(iif(t1.segment = 'lam', t2.consumption, 0)) as real) / count(t1.customerid) - cast(sum(iif(t1.segment = 'kam', t2.consumption, 0)) as real) / count(t1.customerid) , cast(sum(iif(t1.segment = 'kam', t2.consumption, 0)) as real) / count(t1.customerid) - cast(sum(iif(t1.segment = 'sme', t2.consumption, 0)) as real) / count(t1.customerid) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where t1.currency = 'czk' and t2.consumption = ( select min(consumption) from yearmonth ) and t2.date between 201301 and 201312",
    "pred_sql": "select avg(case when t2.segment = 'sme' then t1.consumption else 0 end) - avg(case when t2.segment = 'lam' then t1.consumption else 0 end) as sme_lam, avg(case when t2.segment = 'lam' then t1.consumption else 0 end) - avg(case when t2.segment = 'kam' then t1.consum",
    "exec_time": 105.97,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 7,
    "db_id": "debit_card_specializing",
    "difficulty": "challenging",
    "question": "Which of the three segments—SME, LAM and KAM—has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013?",
    "gold_sql": "select cast((sum(iif(t1.segment = 'sme' and t2.date like '2013%', t2.consumption, 0)) - sum(iif(t1.segment = 'sme' and t2.date like '2012%', t2.consumption, 0))) as float) * 100 / sum(iif(t1.segment = 'sme' and t2.date like '2012%', t2.consumption, 0)), cast(sum(iif(t1.segment = 'lam' and t2.date like '2013%', t2.consumption, 0)) - sum(iif(t1.segment = 'lam' and t2.date like '2012%', t2.consumption, 0)) as float) * 100 / sum(iif(t1.segment = 'lam' and t2.date like '2012%', t2.consumption, 0)) , cast(sum(iif(t1.segment = 'kam' and t2.date like '2013%', t2.consumption, 0)) - sum(iif(t1.segment = 'kam' and t2.date like '2012%', t2.consumption, 0)) as float) * 100 / sum(iif(t1.segment = 'kam' and t2.date like '2012%', t2.consumption, 0)) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid",
    "pred_sql": "with segment_consumption as ( select t2.segment, sum(t1.consumption) as totalconsumption from yearmonth as t1 join customers as t2 on t1.customerid = t2.customerid where t1.date >= '2012-01-01' and t1.date < '2013-01-01' group by t2.segment union all select t2.segment, sum(t",
    "exec_time": 105.86,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 8,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "How much did customer 6 consume in total between August and November 2013?",
    "gold_sql": "select sum(consumption) from yearmonth where customerid = 6 and date between '201308' and '201311'",
    "pred_sql": "select sum(consumption) from yearmonth where customerid = 6 and date between '201308' and '201311'",
    "exec_time": 65.62,
    "ex": true,
    "sm": true,
    "cm": 1.0,
    "ast": 1.0
  },
  {
    "id": 9,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "How many more \"discount\" gas stations does the Czech Republic have compared to Slovakia?",
    "gold_sql": "select sum(iif(country = 'cze', 1, 0)) - sum(iif(country = 'svk', 1, 0)) from gasstations where segment = 'discount'",
    "pred_sql": "select sum(case when t2.segment = 'discount' then 1 else 0 end) - sum(case when t1.segment = 'discount' then 1 else 0 end) as difference from gasstations as t1 join gasstations as t2 on t2.country = 'sk' where t1.country = 'cze' and t2.country = 'sk'",
    "exec_time": 93.85,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 10,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "Is it true that more SMEs pay in Czech koruna than in euros? If so, how many more?",
    "gold_sql": "select sum(currency = 'czk') - sum(currency = 'eur') from customers where segment = 'sme'",
    "pred_sql": "select sum(case when t2.currency = 'eur' then 1 else 0 end) - sum(case when t2.currency = 'czk' then 1 else 0 end) as difference from transactions_1k as t1 join customers as t2 on t1.customerid = t2.customerid where t2.segment = 'sme'",
    "exec_time": 92.44,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 11,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "How many percent of LAM customer consumed more than 46.73?",
    "gold_sql": "select cast(sum(iif(t2.consumption > 46.73, 1, 0)) as float) * 100 / count(t1.customerid) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where t1.segment = 'lam'",
    "pred_sql": "select cast(sum(iif(t2.consumption > 46.73, 1, 0)) as real) * 100 / count(t2.customerid) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where t1.segment = 'lam'",
    "exec_time": 94.25,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.9555555555555556
  },
  {
    "id": 12,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "In February 2012, what percentage of customers consumed more than 528.3?",
    "gold_sql": "select cast(sum(iif(consumption > 528.3, 1, 0)) as float) * 100 / count(customerid) from yearmonth where date = '201202'",
    "pred_sql": "select cast(sum(iif(t2.consumption > 528.3, 1, 0)) as real) * 100 / count(t2.customerid) from transactions_1k as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where t2.date = '201202'",
    "exec_time": 93.75,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.3939393939393939
  },
  {
    "id": 13,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "What is the highest monthly consumption in the year 2012?",
    "gold_sql": "select sum(consumption) from yearmonth where substr(date, 1, 4) = '2012' group by substr(date, 5, 2) order by sum(consumption) desc limit 1",
    "pred_sql": "select max(consumption) from yearmonth where date like '2012%'",
    "exec_time": 58.49,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.3142857142857143
  },
  {
    "id": 14,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "Please list the product description of the products consumed in September, 2013.",
    "gold_sql": "select t3.description from transactions_1k as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid inner join products as t3 on t1.productid = t3.productid where t2.date = '201309'",
    "pred_sql": "select t3.description from transactions_1k as t1 inner join products as t3 on t1.productid = t3.productid where t1.date between '2013-09-01' and '2013-09-30'",
    "exec_time": 78.28,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.6190476190476191
  },
  {
    "id": 15,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "Please list the countries of the gas stations with transactions taken place in June, 2013.",
    "gold_sql": "select distinct t2.country from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid inner join yearmonth as t3 on t1.customerid = t3.customerid where t3.date = '201306'",
    "pred_sql": "select distinct t2.country from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t1.date between '2013-06-01' and '2013-06-30'",
    "exec_time": 83.86,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.627906976744186
  },
  {
    "id": 16,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "Among the customers who paid in euro, how many of them have a monthly consumption of over 1000?",
    "gold_sql": "select count(*) from yearmonth as t1 inner join customers as t2 on t1.customerid = t2.customerid where t2.currency = 'eur' and t1.consumption > 1000.00",
    "pred_sql": "select count(customerid) from yearmonth where customerid in (select customerid from customers where currency = 'eur') and consumption > 1000",
    "exec_time": 75.8,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 17,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "Please list the product descriptions of the transactions taken place in the gas stations in the Czech Republic.",
    "gold_sql": "select distinct t3.description from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid inner join products as t3 on t1.productid = t3.productid where t2.country = 'cze'",
    "pred_sql": "select t3.description from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid inner join products as t3 on t1.productid = t3.productid where t2.country = 'cze'",
    "exec_time": 79.66,
    "ex": true,
    "sm": false,
    "cm": 1.0,
    "ast": 0.9767441860465116
  },
  {
    "id": 18,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "Please list the disparate time of the transactions taken place in the gas stations from chain no. 11.",
    "gold_sql": "select distinct t1.time from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t2.chainid = 11",
    "pred_sql": "select distinct time from transactions_1k where gasstationid in (select gasstationid from gasstations where chainid = 11)",
    "exec_time": 63.44,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.0
  },
  {
    "id": 19,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "Among the transactions made in the gas stations in the Czech Republic, how many of them are taken place after 2012/1/1?",
    "gold_sql": "select count(t1.transactionid) from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t2.country = 'cze' and strftime('%y', t1.date) >= '2012'",
    "pred_sql": "select count(*) from transactions_1k where gasstationid in (select gasstationid from gasstations where country = 'cze') and date > '2012-01-01'",
    "exec_time": 69.51,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 20,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "What kind of currency did the customer paid at 16:25:00 in 2012/8/24?",
    "gold_sql": "select distinct t3.currency from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid inner join customers as t3 on t1.customerid = t3.customerid where t1.date = '2012-08-24' and t1.time = '16:25:00'",
    "pred_sql": "select t2.currency from transactions_1k as t1 inner join customers as t2 on t1.customerid = t2.customerid where t1.date = '2012-08-24' and t1.time = '16:25:00'",
    "exec_time": 84.29,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.7551020408163265
  },
  {
    "id": 21,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "What segment did the customer have at 2012/8/23 21:20:00?",
    "gold_sql": "select t2.segment from transactions_1k as t1 inner join customers as t2 on t1.customerid = t2.customerid where t1.date = '2012-08-23' and t1.time = '21:20:00'",
    "pred_sql": "select t2.segment from transactions_1k as t1 join customers as t2 on t1.customerid = t2.customerid where t1.date = '2012-08-23' and t1.time = '21:20:00'",
    "exec_time": 81.94,
    "ex": true,
    "sm": false,
    "cm": 1.0,
    "ast": 1.0
  },
  {
    "id": 22,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "For all the transactions happened during 8:00-9:00 in 2012/8/26, how many happened in CZE?",
    "gold_sql": "select count(t1.transactionid) from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t1.date = '2012-08-26' and t1.time between '08:00:00' and '09:00:00' and t2.country = 'cze'",
    "pred_sql": "select count(*) from transactions_1k where date = '2012-08-26' and time >= '08:00:00' and time < '09:00:00' and gasstationid in (select gasstationid from gasstations where country = 'cze')",
    "exec_time": 90.04,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 23,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "What's the nationality of the customer who spent 548.4 in 2012/8/24?",
    "gold_sql": "select t2.country from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t1.date = '2012-08-24' and t1.price = 548.4",
    "pred_sql": "select t2.country from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid inner join customers as t3 on t1.customerid = t3.customerid where t1.date = '2012-08-24' and t1.amount = 548 and t3.customerid = (select customerid from yearmonth where date = '20120824",
    "exec_time": 103.3,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 24,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "What is the percentage of the customers who used EUR in 2012/8/25?",
    "gold_sql": "select cast(sum(iif(t2.currency = 'eur', 1, 0)) as float) * 100 / count(t1.customerid) from transactions_1k as t1 inner join customers as t2 on t1.customerid = t2.customerid where t1.date = '2012-08-25'",
    "pred_sql": "select cast(sum(case when t3.currency = 'eur' then 1 else 0 end) as real) * 100 / count(*) from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid inner join customers as t3 on t1.customerid = t3.customerid where t1.date = '2012-08-25'",
    "exec_time": 102.11,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.6444444444444444
  },
  {
    "id": 25,
    "db_id": "debit_card_specializing",
    "difficulty": "challenging",
    "question": "For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013?",
    "gold_sql": "select cast(sum(iif(substring(date, 1, 4) = '2012', consumption, 0)) - sum(iif(substring(date, 1, 4) = '2013', consumption, 0)) as float) / sum(iif(substring(date, 1, 4) = '2012', consumption, 0)) from yearmonth where customerid = ( select t1.customerid from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t1.date = '2012-08-25' and t1.price = 1513.12 )",
    "pred_sql": "select (t2.consumption - t1.consumption) / t1.consumption * 100 as decreaserate from yearmonth as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid and t1.date = '2012-08-01' and t2.date = '2013-08-01' where t1.customerid = (select customerid from transactions_1",
    "exec_time": 104.58,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 26,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "What is the percentage of \"premium\" against the overall segment in Country = \"SVK\"?",
    "gold_sql": "select cast(sum(iif(country = 'svk' and segment = 'premium', 1, 0)) as float) * 100 / sum(iif(country = 'svk', 1, 0)) from gasstations",
    "pred_sql": "select cast(sum(case when t2.segment = 'premium' then 1 else 0 end) as real) * 100 / count(t1.customerid) from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t2.country = 'svk'",
    "exec_time": 92.42,
    "ex": true,
    "sm": false,
    "cm": 0.0,
    "ast": 0.052631578947368474
  },
  {
    "id": 27,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "What is the amount spent by customer \"38508\" at the gas stations? How much had the customer spent in January 2012?",
    "gold_sql": "select sum(t1.price ) , sum(iif(t3.date = '201201', t1.price, 0)) from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid inner join yearmonth as t3 on t1.customerid = t3.customerid where t1.customerid = '38508'",
    "pred_sql": "select sum(t1.amount) from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid inner join customers as t3 on t1.customerid = t3.customerid where t3.customerid = 38508 and year(t1.date) = 2012 and month(t1.date) = 1",
    "exec_time": 97.81,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.5
  },
  {
    "id": 28,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used?",
    "gold_sql": "select t2.customerid, sum(t2.price / t2.amount), t1.currency from customers as t1 inner join transactions_1k as t2 on t1.customerid = t2.customerid where t2.customerid = ( select customerid from yearmonth order by consumption desc limit 1 ) group by t2.customerid, t1.currency",
    "pred_sql": "select segment, avg(price) as averageprice, currency from transactions_1k join customers on transactions_1k.customerid = customers.customerid where customerid = (select customerid from transactions_1k group by customerid order by sum(amount) desc limit 1) group by segment, currency",
    "exec_time": 102.63,
    "ex": false,
    "sm": false,
    "cm": 0.16666666666666666,
    "ast": 0.0
  },
  {
    "id": 29,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "For all the people who paid more than 29.00 per unit of product id No.5. Give their consumption status in the August of 2012.",
    "gold_sql": "select t2.consumption from transactions_1k as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where t1.price / t1.amount > 29.00 and t1.productid = 5 and t2.date = '201208'",
    "pred_sql": "select t3.customerid, t4.consumption from transactions_1k as t1 inner join products as t2 on t1.productid = t2.productid inner join customers as t3 on t1.customerid = t3.customerid inner join yearmonth as t4 on t3.customerid = t4.customerid and t1.date = t4.date where t1.price > 29.00 and t4.date = '2012-08",
    "exec_time": 107.22,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 30,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "What's Angela Sanders's major?",
    "gold_sql": "select t2.major_name from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t1.first_name = 'angela' and t1.last_name = 'sanders'",
    "pred_sql": "select major_name from major where member_id in (select link_to_member from member where first_name = 'angela' and last_name = 'sanders')",
    "exec_time": 118.32,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.0
  },
  {
    "id": 31,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Among the students from the Student_Club who attended the event \"Women's Soccer\", how many of them want a T-shirt that's in medium size?",
    "gold_sql": "select count(t1.event_id) from event as t1 inner join attendance as t2 on t1.event_id = t2.link_to_event inner join member as t3 on t2.link_to_member = t3.member_id where t1.event_name = 'women''s soccer' and t3.t_shirt_size = 'medium'",
    "pred_sql": "select count(*) from member where t_shirt_size = 'medium' and link_to_major in (select link_to_major from major where major_name = 'women''s soccer') and link_to_member in (select link_to_member from attendance where link_to_event = (select event_id from event where event_name = 'women''s soccer'))",
    "exec_time": 146.75,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 32,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Among the events attended by more than 10 members of the Student_Club, how many of them are meetings?",
    "gold_sql": "select t1.event_name from event as t1 inner join attendance as t2 on t1.event_id = t2.link_to_event group by t1.event_id having count(t2.link_to_event) > 10 except select t1.event_name from event as t1 where t1.type = 'meeting'",
    "pred_sql": "select count(*) from event where event_id in (select link_to_event from attendance group by link_to_event having count(link_to_member) > 10 and event_name like 'meeting%')",
    "exec_time": 121.71,
    "ex": false,
    "sm": false,
    "cm": 0.25,
    "ast": 0.0
  },
  {
    "id": 33,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "List all the names of events that had an attendance of over 20 students but were not fundraisers.",
    "gold_sql": "select t1.event_name from event as t1 inner join attendance as t2 on t1.event_id = t2.link_to_event group by t1.event_id having count(t2.link_to_event) > 20 except select t1.event_name from event as t1 where t1.type = 'fundraiser'",
    "pred_sql": "select event_name from event where event_id in (select link_to_event from attendance group by link_to_event having count(link_to_member) > 20) and event_id not in (select link_to_event from budget where event_status = 'fundraiser')",
    "exec_time": 148.28,
    "ex": true,
    "sm": false,
    "cm": 0.25,
    "ast": 0.0
  },
  {
    "id": 34,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "What is the amount of the funds that the Vice President received?",
    "gold_sql": "select t2.amount from member as t1 inner join income as t2 on t1.member_id = t2.link_to_member where t1.position = 'vice president'",
    "pred_sql": "select amount from income where link_to_member in (select link_to_member from member where position = 'vice president')",
    "exec_time": 129.02,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.0
  },
  {
    "id": 35,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "List the full name of the Student_Club members that grew up in Illinois state.",
    "gold_sql": "select t1.first_name, t1.last_name from member as t1 inner join zip_code as t2 on t1.zip = t2.zip_code where t2.state = 'illinois'",
    "pred_sql": "select first_name, last_name from member where zip in (select zip_code from zip_code where state = 'il')",
    "exec_time": 117.98,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.0
  },
  {
    "id": 36,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Was each expense in October Meeting on October 8, 2019 approved?",
    "gold_sql": "select t3.approved from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event inner join expense as t3 on t2.budget_id = t3.link_to_budget where t1.event_name = 'october meeting' and t1.event_date like '2019-10-08%'",
    "pred_sql": "select expense_id from expense where expense_date like '2019-10-08' and approved = 'true'",
    "exec_time": 135.35,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.25
  },
  {
    "id": 37,
    "db_id": "student_club",
    "difficulty": "challenging",
    "question": "Calculate the total average cost that Elijah Allen spent in the events on September and October.",
    "gold_sql": "select avg(t2.cost) from member as t1 inner join expense as t2 on t1.member_id = t2.link_to_member where t1.last_name = 'allen' and t1.first_name = 'elijah' and (substr(t2.expense_date, 6, 2) = '09' or substr(t2.expense_date, 6, 2) = '10')",
    "pred_sql": "select avg(t2.cost) from member as t1 inner join expense as t2 on t1.member_id = t2.link_to_member where t1.first_name = 'elijah' and t1.last_name = 'allen' and t2.expense_date between '2019-09-01' and '2019-10-31'",
    "exec_time": 151.64,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.5535714285714286
  },
  {
    "id": 38,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Calculate the difference of the total amount spent in all events by the Student_Club in year 2019 and 2020.",
    "gold_sql": "select sum(case when substr(t1.event_date, 1, 4) = '2019' then t2.spent else 0 end) - sum(case when substr(t1.event_date, 1, 4) = '2020' then t2.spent else 0 end) as num from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event",
    "pred_sql": "select sum(case when t2.event_date like '2019%' then t1.amount else 0 end) - sum(case when t2.event_date like '2020%' then t1.amount else 0 end) as difference from expense as t1 join budget as t2 on t1.link_to_budget = t2.budget_id",
    "exec_time": 149.17,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.46153846153846156
  },
  {
    "id": 39,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "What was the notes of the fundraising on 2019/9/14?",
    "gold_sql": "select notes from income where source = 'fundraising' and date_received = '2019-09-14'",
    "pred_sql": "select t3.notes from expense as t1 join income as t2 on t1.link_to_member = t2.link_to_member join budget as t4 on t1.link_to_budget = t4.budget_id join event as t5 on t4.link_to_event = t5.event_id where t1.expense_date = '2019-09-14' and t2.date_received = '2019-09-14'",
    "exec_time": 165.39,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 40,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "Tell the phone number of \"Carlo Jacobs\".",
    "gold_sql": "select phone from member where first_name = 'carlo' and last_name = 'jacobs'",
    "pred_sql": "select phone from member where last_name = 'jacobs' and first_name = 'carlo'",
    "exec_time": 106.1,
    "ex": true,
    "sm": false,
    "cm": 1.0,
    "ast": 1.0
  },
  {
    "id": 41,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "What is the status of the event which bought \"Post Cards, Posters\" on 2019/8/20?",
    "gold_sql": "select t1.event_status from budget as t1 inner join expense as t2 on t1.budget_id = t2.link_to_budget where t2.expense_description = 'post cards, posters' and t2.expense_date = '2019-08-20'",
    "pred_sql": "select t3.status from expense as t1 join budget as t2 on t1.link_to_budget = t2.budget_id join event as t3 on t2.link_to_event = t3.event_id where t1.expense_description = 'post cards, posters' and t1.expense_date = '2019-08-20'",
    "exec_time": 147.26,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.4444444444444444
  },
  {
    "id": 42,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "What was Brent Thomason's major?",
    "gold_sql": "select t2.major_name from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t1.first_name = 'brent' and t1.last_name = 'thomason'",
    "pred_sql": "select major_name from major join member on major.major_id = member.link_to_major where first_name = 'brent' and last_name = 'thomason'",
    "exec_time": 116.09,
    "ex": true,
    "sm": false,
    "cm": 1.0,
    "ast": 0.0
  },
  {
    "id": 43,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "For all the club members from \"Business\" major, how many of them wear medium size t-shirt?",
    "gold_sql": "select count(t1.member_id) from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t2.major_name = 'business' and t1.t_shirt_size = 'medium'",
    "pred_sql": "select count(*) from member where link_to_major = (select major_id from major where major_name = 'business') and t_shirt_size = 'medium'",
    "exec_time": 117.42,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.4054054054054054
  },
  {
    "id": 44,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "Which department was the President of the club in?",
    "gold_sql": "select t2.department from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t1.position = 'president'",
    "pred_sql": "select department from major where major_name = 'president'",
    "exec_time": 109.67,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.30000000000000004
  },
  {
    "id": 45,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "State the date Connor Hilton paid his/her dues.",
    "gold_sql": "select t2.date_received from member as t1 inner join income as t2 on t1.member_id = t2.link_to_member where t1.first_name = 'connor' and t1.last_name = 'hilton' and t2.source = 'dues'",
    "pred_sql": "select date_received from income where link_to_member = 'rec28orzgcm1dtqbz' and source = 'dues'",
    "exec_time": 117.53,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.33333333333333337
  },
  {
    "id": 46,
    "db_id": "student_club",
    "difficulty": "challenging",
    "question": "How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"?",
    "gold_sql": "select cast(sum(case when t2.event_name = 'yearly kickoff' then t1.amount else 0 end) as real) / sum(case when t2.event_name = 'october meeting' then t1.amount else 0 end) from budget as t1 inner join event as t2 on t1.link_to_event = t2.event_id where t1.category = 'advertisement' and t2.type = 'meeting'",
    "pred_sql": "select sum(case when t2.event_name = 'yearly kickoff' then 1 else 0 end) - sum(case when t2.event_name = 'october meeting' then 1 else 0 end) as difference from budget as t1 join event as t2 on t1.link_to_event = t2.event_id where t1.category = 'advertisement'",
    "exec_time": 153.44,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.75
  },
  {
    "id": 47,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "What is the total cost of the pizzas for all the events?",
    "gold_sql": "select sum(cost) from expense where expense_description = 'pizza'",
    "pred_sql": "select sum(cost) from expense where expense_description like '%pizza%'",
    "exec_time": 103.86,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.736842105263158
  },
  {
    "id": 48,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "How many cities are there in Orange County, Virginia?",
    "gold_sql": "select count(city) from zip_code where county = 'orange county' and state = 'virginia'",
    "pred_sql": "select count(distinct city) from zip_code where state = 'va' and county = 'orange county'",
    "exec_time": 105.72,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.8
  },
  {
    "id": 49,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "What does the person with the phone number \"809-555-3360\" major in?",
    "gold_sql": "select t2.major_name from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t1.phone = '809-555-3360'",
    "pred_sql": "select major_name from major where major_id in (select link_to_major from member where phone = '809-555-3360')",
    "exec_time": 118.18,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.0
  },
  {
    "id": 50,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "How many members attended the \"Women's Soccer\" event?",
    "gold_sql": "select count(t2.link_to_member) from event as t1 inner join attendance as t2 on t1.event_id = t2.link_to_event where t1.event_name = 'women''s soccer'",
    "pred_sql": "select count(distinct link_to_member) from attendance where link_to_event in (select event_id from event where event_name = 'women''s soccer')",
    "exec_time": 116.62,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 51,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "List all the members of the \"School of Applied Sciences, Technology and Education\" department.",
    "gold_sql": "select t1.first_name, t1.last_name from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t2.department = 'school of applied sciences, technology and education'",
    "pred_sql": "select m.first_name, m.last_name from member m join major j on m.link_to_major = j.major_id where j.department = 'school of applied sciences, technology and education'",
    "exec_time": 120.97,
    "ex": true,
    "sm": false,
    "cm": 1.0,
    "ast": 0.4571428571428572
  },
  {
    "id": 52,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Among all the closed events, which event has the highest spend-to-budget ratio?",
    "gold_sql": "select t2.event_name from budget as t1 inner join event as t2 on t1.link_to_event = t2.event_id where t2.status = 'closed' order by t1.spent / t1.amount desc limit 1",
    "pred_sql": "select event_id from budget where event_status = 'closed' order by (spent / amount) desc limit 1",
    "exec_time": 113.13,
    "ex": false,
    "sm": false,
    "cm": 0.2,
    "ast": 0.41463414634146345
  },
  {
    "id": 53,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "What is the highest amount of budget spend for an event?",
    "gold_sql": "select max(spent) from budget",
    "pred_sql": "select max(spent) from budget",
    "exec_time": 98.43,
    "ex": true,
    "sm": true,
    "cm": 1.0,
    "ast": 1.0
  },
  {
    "id": 54,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "What is the total amount of money spent for food?",
    "gold_sql": "select sum(spent) from budget where category = 'food'",
    "pred_sql": "select sum(spent) from budget where category = 'food'",
    "exec_time": 104.13,
    "ex": true,
    "sm": true,
    "cm": 1.0,
    "ast": 1.0
  },
  {
    "id": 55,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "List the name of students that have attended more than 7 events.",
    "gold_sql": "select t1.first_name, t1.last_name from member as t1 inner join attendance as t2 on t1.member_id = t2.link_to_member group by t2.link_to_member having count(t2.link_to_event) > 7",
    "pred_sql": "select first_name, last_name from member where member_id in (select link_to_member from attendance group by link_to_member having count(link_to_event) > 7)",
    "exec_time": 117.18,
    "ex": true,
    "sm": false,
    "cm": 0.75,
    "ast": 0.050000000000000044
  },
  {
    "id": 56,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Which student has been entrusted to manage the budget for the Yearly Kickoff?",
    "gold_sql": "select t4.first_name, t4.last_name from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event inner join expense as t3 on t2.budget_id = t3.link_to_budget inner join member as t4 on t3.link_to_member = t4.member_id where t1.event_name = 'yearly kickoff'",
    "pred_sql": "select m.first_name, m.last_name from member m join budget b on m.member_id = b.link_to_member where b.event_status = 'open' and b.category = 'advertisement' order by m.member_id limit 1",
    "exec_time": 126.19,
    "ex": false,
    "sm": false,
    "cm": 0.2,
    "ast": 0.1694915254237288
  },
  {
    "id": 57,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "Which event has the lowest cost?",
    "gold_sql": "select t1.event_name from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event inner join expense as t3 on t2.budget_id = t3.link_to_budget order by t3.cost limit 1",
    "pred_sql": "select event_id from expense group by event_id order by sum(cost) limit 1",
    "exec_time": 108.29,
    "ex": false,
    "sm": false,
    "cm": 0.2,
    "ast": 0.2325581395348837
  },
  {
    "id": 58,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Based on the total cost for all event, what is the percentage of cost for Yearly Kickoff event?",
    "gold_sql": "select cast(sum(case when t1.event_name = 'yearly kickoff' then t3.cost else 0 end) as real) * 100 / sum(t3.cost) from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event inner join expense as t3 on t2.budget_id = t3.link_to_budget",
    "pred_sql": "select (select sum(cost) from expense where link_to_budget in (select budget_id from budget where event_status = 'open' and link_to_event = (select event_id from event where event_name = 'yearly kickoff'))) * 100 / (select sum(spent) from budget where event_status = 'open' and link_to_event = (select event_id from event where event_name = 'yearly kickoff')) from expense where link_to_budget in (select budget_id",
    "exec_time": 164.99,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 59,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "Indicate the top source of funds received in September 2019 based on their amount.",
    "gold_sql": "select source from income where date_received between '2019-09-01' and '2019-09-30' order by source desc limit 1",
    "pred_sql": "select source from income where date_received like '2019-09-%' group by source order by sum(amount) desc limit 1",
    "exec_time": 115.68,
    "ex": true,
    "sm": false,
    "cm": 0.5,
    "ast": 0.4
  },
  {
    "id": 60,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "How many members of the Student_Club have major in 'Physics Teaching'?",
    "gold_sql": "select count(t2.member_id) from major as t1 inner join member as t2 on t1.major_id = t2.link_to_major where t1.major_name = 'physics teaching'",
    "pred_sql": "select count(*) from member where link_to_major in (select major_id from major where major_name = 'physics teaching')",
    "exec_time": 113.87,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 61,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Name the event with the highest amount spent on advertisement.",
    "gold_sql": "select t2.event_name from budget as t1 inner join event as t2 on t1.link_to_event = t2.event_id where t1.category = 'advertisement' order by t1.spent desc limit 1",
    "pred_sql": "select event_id from budget where category = 'advertisement' order by spent desc limit 1",
    "exec_time": 125.26,
    "ex": false,
    "sm": false,
    "cm": 0.6,
    "ast": 0.45945945945945943
  },
  {
    "id": 62,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Did Maya Mclean attend the 'Women's Soccer' event?",
    "gold_sql": "select case when t3.event_name = 'women''s soccer' then 'yes' end as result from member as t1 inner join attendance as t2 on t1.member_id = t2.link_to_member inner join event as t3 on t2.link_to_event = t3.event_id where t1.first_name = 'maya' and t1.last_name = 'mclean'",
    "pred_sql": "select t1.event_id from event as t1 inner join attendance as t2 on t1.event_id = t2.link_to_event inner join member as t3 on t2.link_to_member = t3.member_id where t1.event_name = 'women''s soccer' and t3.first_name = 'maya' and t3.last_name = 'clean'",
    "exec_time": 147.09,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.5660377358490566
  },
  {
    "id": 63,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Indicate the cost of posters for 'September Speaker' event.",
    "gold_sql": "select t3.cost from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event inner join expense as t3 on t2.budget_id = t3.link_to_budget where t1.event_name = 'september speaker' and t3.expense_description = 'posters'",
    "pred_sql": "select t3.cost from expense as t1 inner join budget as t2 on t1.link_to_budget = t2.budget_id inner join event as t3 on t2.link_to_event = t3.event_id where t1.expense_description = 'post cards, posters' and t3.event_name = 'september speaker'",
    "exec_time": 147.42,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.6041666666666667
  },
  {
    "id": 64,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Indicate the name of the closed event whose cost has exceeded the budget the most.",
    "gold_sql": "select t2.event_name from budget as t1 inner join event as t2 on t2.event_id = t1.link_to_event where t1.event_status = 'closed' and t1.remaining < 0 order by t1.remaining limit 1",
    "pred_sql": "select e.event_name from event e join budget b on e.event_id = b.link_to_event where b.event_status = 'closed' order by b.spent - b.remaining desc limit 1",
    "exec_time": 124.64,
    "ex": true,
    "sm": false,
    "cm": 0.6,
    "ast": 0.34883720930232553
  },
  {
    "id": 65,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Identify the type of expenses and their total value approved for 'October Meeting' event.",
    "gold_sql": "select t1.type, sum(t3.cost) from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event inner join expense as t3 on t2.budget_id = t3.link_to_budget where t1.event_name = 'october meeting'",
    "pred_sql": "select e.expense_description, sum(e.cost) as total_cost from expense e join budget b on e.link_to_budget = b.link_to_event join event ev on b.link_to_event = ev.event_id where ev.event_name = 'october meeting' and e.approved = 'true' group by e.expense_description",
    "exec_time": 144.67,
    "ex": false,
    "sm": false,
    "cm": 0.25,
    "ast": 0.14583333333333337
  },
  {
    "id": 66,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.",
    "gold_sql": "select t2.category, sum(t2.amount) from event as t1 join budget as t2 on t1.event_id = t2.link_to_event where t1.event_name = 'april speaker' group by t2.category order by sum(t2.amount) asc",
    "pred_sql": "select category from budget where link_to_event = (select event_id from event where event_name = 'april speaker') order by spent asc",
    "exec_time": 114.12,
    "ex": true,
    "sm": false,
    "cm": 0.2,
    "ast": 0.2954545454545454
  },
  {
    "id": 67,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "Mention the total expense used on 8/20/2019.",
    "gold_sql": "select sum(cost) from expense where expense_date = '2019-08-20'",
    "pred_sql": "select sum(cost) from expense where expense_date = '2019-08-20'",
    "exec_time": 112.87,
    "ex": true,
    "sm": true,
    "cm": 1.0,
    "ast": 1.0
  },
  {
    "id": 68,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "List out the full name and total cost that member id \"rec4BLdZHS2Blfp4v\" incurred?",
    "gold_sql": "select t1.first_name, t1.last_name, sum(t2.cost) from member as t1 inner join expense as t2 on t1.member_id = t2.link_to_member where t1.member_id = 'rec4bldzhs2blfp4v'",
    "pred_sql": "select first_name, last_name, sum(cost) as total_cost from expense where link_to_member = 'rec4bldzhs2blfp4v' group by first_name, last_name",
    "exec_time": 136.0,
    "ex": false,
    "sm": false,
    "cm": 0.25,
    "ast": 0.29268292682926833
  },
  {
    "id": 69,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "State what kind of expenses that Sacha Harrison incurred?",
    "gold_sql": "select t2.expense_description from member as t1 inner join expense as t2 on t1.member_id = t2.link_to_member where t1.first_name = 'sacha' and t1.last_name = 'harrison'",
    "pred_sql": "select expense_description from expense where link_to_member = 'rec28orzgcm1dtqbz'",
    "exec_time": 113.54,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.25
  },
  {
    "id": 70,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "State the category of events were held at MU 215.",
    "gold_sql": "select distinct t2.category from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event where t1.location = 'mu 215'",
    "pred_sql": "select category from budget where link_to_event in (select event_id from event where location = 'mu 215')",
    "exec_time": 115.82,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.0
  },
  {
    "id": 71,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "List the last name of members with a major in environmental engineering and include its department and college name.",
    "gold_sql": "select t2.last_name, t1.department, t1.college from major as t1 inner join member as t2 on t1.major_id = t2.link_to_major where t2.position = 'member' and t1.major_name = 'environmental engineering'",
    "pred_sql": "select t1.last_name, t2.department, t2.college from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t2.major_name like '%environmental engineering%'",
    "exec_time": 131.15,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.5869565217391304
  },
  {
    "id": 72,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "What are the budget category of the events located at MU 215 and a guest speaker type with a 0 budget spent?",
    "gold_sql": "select distinct t2.category, t1.type from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event where t1.location = 'mu 215' and t2.spent = 0 and t1.type = 'guest speaker'",
    "pred_sql": "select t2.category from budget as t1 join event as t2 on t1.link_to_event = t2.event_id where t2.location = 'mu 215' and t1.spent = 0 and t2.type = 'guest speaker'",
    "exec_time": 133.1,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.6458333333333333
  },
  {
    "id": 73,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Among the members with t-shirt size of medium, what is the percentage of the amount 50 received by the Student_Club?",
    "gold_sql": "select cast(sum(case when t2.amount = 50 then 1.0 else 0 end) as real) * 100 / count(t2.income_id) from member as t1 inner join income as t2 on t1.member_id = t2.link_to_member where t1.position = 'member' and t1.t_shirt_size = 'medium'",
    "pred_sql": "select sum(case when t2.t_shirt_size = 'medium' then t1.amount else 0 end) * 100 / sum(t1.amount) as percentage from income as t1 join member as t2 on t1.link_to_member = t2.member_id where t2.t_shirt_size = 'medium' and t1.amount = 50 and t1.source = 'student_club'",
    "exec_time": 163.71,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.17307692307692313
  },
  {
    "id": 74,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "List the names of closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020.",
    "gold_sql": "select distinct event_name from event where type = 'game' and date(substr(event_date, 1, 10)) between '2019-03-15' and '2020-03-20' and status = 'closed'",
    "pred_sql": "select event_name from event where status = 'closed' and event_name like '%game%' and event_date between '2019-03-15' and '2020-03-20'",
    "exec_time": 128.06,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.18367346938775508
  },
  {
    "id": 75,
    "db_id": "student_club",
    "difficulty": "challenging",
    "question": "Give the full name and contact number of members who had to spend more than average on each expense.",
    "gold_sql": "select distinct t3.first_name, t3.last_name, t3.phone from expense as t1 inner join budget as t2 on t1.link_to_budget = t2.budget_id inner join member as t3 on t3.member_id = t1.link_to_member where t1.cost > ( select avg(t1.cost) from expense as t1 inner join budget as t2 on t1.link_to_budget = t2.budget_id inner join member as t3 on t3.member_id = t1.link_to_member )",
    "pred_sql": "select t2.first_name , t2.last_name , t2.phone from expense as t1 join member as t2 on t1.link_to_member = t2.member_id where t1.cost > (select avg(cost) from expense)",
    "exec_time": 131.1,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.47959183673469385
  },
  {
    "id": 76,
    "db_id": "student_club",
    "difficulty": "challenging",
    "question": "Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it.",
    "gold_sql": "select t2.first_name, t2.last_name, t1.cost from expense as t1 inner join member as t2 on t1.link_to_member = t2.member_id where t1.expense_description = 'water, veggie tray, supplies'",
    "pred_sql": "select t3.first_name, t3.last_name, sum(t2.cost) as total_cost from expense as t2 join member as t3 on t2.link_to_member = t3.member_id join budget as t1 on t2.link_to_budget = t1.budget_id where t2.expense_description like '%water, cookies%' or t2.expense_description like '%veggie tray%' or t2.expense_description like '%supplies%' group by t2.link_to_member",
    "exec_time": 165.77,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.050000000000000044
  },
  {
    "id": 77,
    "db_id": "student_club",
    "difficulty": "challenging",
    "question": "Write the full names of students who received funds on the date of 9/9/2019 and include the amount received.",
    "gold_sql": "select distinct t3.first_name, t3.last_name, t4.amount from event as t1 inner join attendance as t2 on t1.event_id = t2.link_to_event inner join member as t3 on t3.member_id = t2.link_to_member inner join income as t4 on t4.link_to_member = t3.member_id where t4.date_received = '2019-09-09'",
    "pred_sql": "select t3.first_name, t3.last_name, t4.amount from expense as t1 join income as t4 on t1.link_to_member = t4.link_to_member join member as t2 on t1.link_to_member = t2.member_id join member as t3 on t4.link_to_member = t3.member_id where t1.expense_date = '2019-09-09' and t4.date_received = '2019-0",
    "exec_time": 165.78,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 78,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "Are there more in-patient or outpatient who were male? What is the deviation in percentage?",
    "gold_sql": "select cast(sum(case when admission = '+' then 1 else 0 end) as real) * 100 / sum(case when admission = '-' then 1 else 0 end) from patient where sex = 'm'",
    "pred_sql": "select abs((count(case when sex = 'm' then id else null end) - count(case when sex = 'f' then id else null end)) / count(case when sex is not null then id else null end) * 100) as deviation from patient",
    "exec_time": 118.37,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 79,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "What is the percentage of female patient were born after 1930?",
    "gold_sql": "select cast(sum(case when strftime('%y', birthday) > '1930' then 1 else 0 end) as real) * 100 / count(*) from patient where sex = 'f'",
    "pred_sql": "select cast(sum(case when t1.sex = 'f' then 1 else 0 end) as real) * 100 / count(*) from patient as t1 join examination as t2 on t1.id = t2.id where t1.birthday > '1930-12-31'",
    "exec_time": 124.6,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 80,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "What is the ratio of outpatient to inpatient followed up treatment among all the 'SLE' diagnosed patient?",
    "gold_sql": "select sum(case when admission = '+' then 1.0 else 0 end) / sum(case when admission = '-' then 1 else 0 end) from patient where diagnosis = 'sle'",
    "pred_sql": "select cast(sum(case when admission = '+' then 1 else 0 end) as real) * 100 / count(*) from patient where diagnosis = 'sle'",
    "exec_time": 106.61,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.4444444444444444
  },
  {
    "id": 81,
    "db_id": "thrombosis_prediction",
    "difficulty": "simple",
    "question": "What is the disease patient '30609' diagnosed with. List all the date of laboratory tests done for this patient.",
    "gold_sql": "select t1.diagnosis, t2.date from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.id = 30609",
    "pred_sql": "select diagnosis, date from laboratory where id = 30609",
    "exec_time": 89.74,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.37142857142857144
  },
  {
    "id": 82,
    "db_id": "thrombosis_prediction",
    "difficulty": "simple",
    "question": "List the patient ID, sex and birthday of patient with LDH beyond normal range.",
    "gold_sql": "select distinct t1.id, t1.sex, t1.birthday from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.ldh > 500",
    "pred_sql": "select id, sex, birthday from patient where id in (select id from laboratory where ldh > (select avg(ldh) from laboratory))",
    "exec_time": 95.88,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.0
  },
  {
    "id": 83,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "State the ID and age of patient with positive degree of coagulation.",
    "gold_sql": "select distinct t1.id, strftime('%y', current_timestamp) - strftime('%y', t1.birthday) from patient as t1 inner join examination as t2 on t1.id = t2.id where t2.rvvt = '+'",
    "pred_sql": "select e.id, datediff(current_date, p.birthday) as age from examination e join patient p on e.id = p.id where e.thrombosis = 1",
    "exec_time": 105.89,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.045454545454545414
  },
  {
    "id": 84,
    "db_id": "thrombosis_prediction",
    "difficulty": "simple",
    "question": "For patients with severe degree of thrombosis, list their ID, sex and disease the patient is diagnosed with.",
    "gold_sql": "select distinct t1.id, t1.sex, t1.diagnosis from patient as t1 inner join examination as t2 on t1.id = t2.id where t2.thrombosis = 2",
    "pred_sql": "select id, sex, diagnosis from patient where diagnosis in (select diagnosis from examination where thrombosis = 1)",
    "exec_time": 100.56,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.0
  },
  {
    "id": 85,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "How many female patients who came at the hospital in 1997 was immediately followed at the outpatient clinic?",
    "gold_sql": "select count(*) from patient where strftime('%y', description) = '1997' and sex = 'f' and admission = '-'",
    "pred_sql": "select count(*) from patient as p join examination as e on p.id = e.id where p.sex = 'f' and year(e.`examination date`) = 1997 and e.`examination date` < (select max(`examination date`) from examination)",
    "exec_time": 124.71,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 86,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "How many of the patients with the most serious thrombosis cases examined in 1997 are women?",
    "gold_sql": "select count(*) from patient as t1 inner join examination as t2 on t1.id = t2.id where t1.sex = 'f' and strftime('%y', t2.`examination date`) = '1997' and t2.thrombosis = 1",
    "pred_sql": "select count(t2.id) from examination as t1 inner join patient as t2 on t1.id = t2.id where t1.thrombosis = (select max(thrombosis) from examination where year(`examination date`) = 1997) and t2.sex = 'f'",
    "exec_time": 126.82,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.13636363636363635
  },
  {
    "id": 87,
    "db_id": "thrombosis_prediction",
    "difficulty": "simple",
    "question": "What are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis.",
    "gold_sql": "select t2.symptoms, t1.diagnosis from patient as t1 inner join examination as t2 on t1.id = t2.id where t2.symptoms is not null order by t1.birthday desc limit 1",
    "pred_sql": "select t1.symptoms, t1.diagnosis from examination as t1 join patient as t2 on t1.id = t2.id where t2.`first date` = (select min(`first date`) from patient)",
    "exec_time": 108.17,
    "ex": false,
    "sm": false,
    "cm": 0.4,
    "ast": 0.2093023255813954
  },
  {
    "id": 88,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?",
    "gold_sql": "select t1.date, strftime('%y', t2.`first date`) - strftime('%y', t2.birthday),t2.birthday from laboratory as t1 inner join patient as t2 on t1.id = t2.id where t2.diagnosis = 'sjs' and t2.birthday is not null order by t2.birthday asc limit 1",
    "pred_sql": "select t2.date, datediff(max(t2.date), t1.birthday) from patient as t1 join laboratory as t2 on t1.id = t2.id where t1.diagnosis = 'sjs' group by t1.id order by datediff(max(t2.date), t1.birthday) limit 1",
    "exec_time": 125.13,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.34375
  },
  {
    "id": 89,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "What is the ratio of male to female patients among all those with abnormal uric acid counts?",
    "gold_sql": "select cast(sum(case when t2.ua <= 8.0 and t1.sex = 'm' then 1 else 0 end) as real) / sum(case when t2.ua <= 6.5 and t1.sex = 'f' then 1 else 0 end) from patient as t1 inner join laboratory as t2 on t1.id = t2.id",
    "pred_sql": "select cast(sum(case when sex = 'f' then 1 else 0 end) as real) / sum(case when sex = 'm' then 1 else 0 end) from patient where tp > 200",
    "exec_time": 117.65,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0535714285714286
  },
  {
    "id": 90,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "How many underage patients were examined during the course of the three-year period from 1990 to 1993?",
    "gold_sql": "select count(t1.id) from patient as t1 inner join examination as t2 on t1.id = t2.id where strftime('%y', t2.`examination date`) between '1990' and '1993' and strftime('%y', t2.`examination date`) - strftime('%y', t1.birthday) < 18",
    "pred_sql": "select count(*) from patient where id in (select id from examination where `examination date` between '1990-01-01' and '1993-12-31') and `first date` < '1990-01-01'",
    "exec_time": 136.51,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 91,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis?",
    "gold_sql": "select strftime('%y', t2.date) - strftime('%y', t1.birthday), t1.diagnosis from patient as t1 inner join laboratory as t2 on t1.id = t2.id order by t2.hgb desc limit 1",
    "pred_sql": "with maxhemoglobin as ( select id, max(hgb) as maxhgb from examination group by id ) select p.diagnosis from examination e join maxhemoglobin mh on e.id = mh.id and e.hgb = mh.maxhgb join patient p on e.id = p.id",
    "exec_time": 124.32,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 92,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "For the patient who was diagnosed with SLE on 1994/2/19, what was his/her anti-Cardiolipin antibody concentration status on 1993/11/12?",
    "gold_sql": "select `acl iga`, `acl igg`, `acl igm` from examination where id in ( select id from patient where diagnosis = 'sle' and description = '1994-02-19' ) and `examination date` = '1993-11-12'",
    "pred_sql": "select t3.`acl igg`, t3.`acl igm` from patient as t1 inner join examination as t2 on t1.id = t2.id inner join laboratory as t3 on t2.id = t3.id where t1.diagnosis = 'sle' and t1.first date = '1994-02-19' and t3.date = '1993-11-12'",
    "exec_time": 143.08,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 93,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981?",
    "gold_sql": "select cast((sum(case when t2.date like '1981-11-%' then t2.`t-cho` else 0 end) - sum(case when t2.date like '1981-12-%' then t2.`t-cho` else 0 end)) as real) / sum(case when t2.date like '1981-12-%' then t2.`t-cho` else 0 end) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.birthday = '1959-02-18'",
    "pred_sql": "select ((select `t-cho` from laboratory where date between '1981-11-01' and '1981-11-30' and id = (select id from patient where birthday = '1959-02-18')) - (select `t-cho` from laboratory where date between '1981-12-01' and '1981-12-31' and",
    "exec_time": 146.55,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 94,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "How many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID.",
    "gold_sql": "select distinct id from laboratory where date between '1987-07-06' and '1996-01-31' and gpt > 30 and alb < 4",
    "pred_sql": "select id from laboratory where date between '1987-07-06' and '1996-01-31' and gpt > 30 and alb < 4 group by id",
    "exec_time": 114.8,
    "ex": true,
    "sm": false,
    "cm": 0.75,
    "ast": 0.9189189189189189
  },
  {
    "id": 95,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average?",
    "gold_sql": "select count(*) from examination where thrombosis = 2 and `ana pattern` = 's' and `acl igm` > (select avg(`acl igm`) * 1.2 from examination where thrombosis = 2 and `ana pattern` = 's')",
    "pred_sql": "select count(t2.id) from examination as t1 inner join laboratory as t2 on t1.id = t2.id where t1.thrombosis = 2 and t1.`ana pattern` = 's' and t2.`acl igm` > (select avg(`acl igm`) from laboratory) * 1.2",
    "exec_time": 133.22,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.109375
  },
  {
    "id": 96,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range.",
    "gold_sql": "select distinct t1.id from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.admission = '-' and t2.`t-bil` < 2.0 and t2.date like '1991-10-%'",
    "pred_sql": "select distinct p.id from patient as p join examination as e on p.id = e.id join laboratory as l on p.id = l.id where l.date between '1991-10-01' and '1991-10-31' and l.`t-bil` between 0 and 1.5 and e.kct = 'outpatient clinic'",
    "exec_time": 134.42,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 97,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE?",
    "gold_sql": "select avg(t2.alb) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.plt > 400 and t1.diagnosis = 'sle' and t1.sex = 'f'",
    "pred_sql": "select avg(alb) from laboratory where id in (select id from patient where sex = 'f' and plt > 400 and diagnosis = 'sle')",
    "exec_time": 114.92,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.0
  },
  {
    "id": 98,
    "db_id": "thrombosis_prediction",
    "difficulty": "simple",
    "question": "How many female patients were given an APS diagnosis?",
    "gold_sql": "select count(id) from patient where sex = 'f' and diagnosis = 'aps'",
    "pred_sql": "select count(*) from patient where sex = 'f' and diagnosis = 'aps'",
    "exec_time": 96.94,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.76
  },
  {
    "id": 99,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "What percentage of patients who were born in 1980 and were diagnosed with RA are women?",
    "gold_sql": "select cast(sum(case when sex = 'f' then 1 else 0 end) as real) * 100 / count(id) from patient where diagnosis = 'ra' and strftime('%y', birthday) = '1980'",
    "pred_sql": "select cast(sum(case when t2.sex = 'f' then 1 else 0 end) as real) * 100 / count(*) from patient as t1 inner join examination as t3 on t1.id = t3.id where t1.diagnosis = 'ra' and year(t1.birthday) = 1980",
    "exec_time": 145.29,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 100,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "Was the patient with the number 57266's uric acid within a normal range?",
    "gold_sql": "select case when (t1.sex = 'f' and t2.ua > 6.5) or (t1.sex = 'm' and t2.ua > 8.0) then true else false end from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.id = 57266",
    "pred_sql": "select count(*) > 0 as within_normal from laboratory where id = 57266 and ua between 20 and 200",
    "exec_time": 97.39,
    "ex": true,
    "sm": false,
    "cm": 0.0,
    "ast": 0.08064516129032262
  },
  {
    "id": 101,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "Provide IDs for male patients with ALT glutamic pylvic transaminase (GPT) that have history of ALT glutamic pylvic transaminase (GPT) exceed the normal range.",
    "gold_sql": "select distinct t1.id from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.sex = 'm' and t2.gpt >= 60",
    "pred_sql": "select id from laboratory where gpt > 34 and sex = 'f' group by id",
    "exec_time": 91.6,
    "ex": false,
    "sm": false,
    "cm": 0.25,
    "ast": 0.0
  },
  {
    "id": 102,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "Please provide the diagnosis of patients with ALT glutamic pylvic transaminase beyond the normal range by ascending order of their date of birth.",
    "gold_sql": "select distinct t1.diagnosis from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.gpt > 60 order by t1.birthday asc",
    "pred_sql": "select distinct p.id, p.diagnosis from patient p join laboratory l on p.id = l.id where l.gpt > 30 order by p.birthday asc",
    "exec_time": 101.0,
    "ex": false,
    "sm": false,
    "cm": 0.5,
    "ast": 0.41666666666666663
  },
  {
    "id": 103,
    "db_id": "thrombosis_prediction",
    "difficulty": "simple",
    "question": "Provide all ID, sex and birthday of patients whose urea nitrogen (UN) just within the borderline of passing?",
    "gold_sql": "select distinct t1.id, t1.sex, t1.birthday from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.un = 29",
    "pred_sql": "select id, sex, birthday from patient where un = 1",
    "exec_time": 86.87,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.19512195121951215
  },
  {
    "id": 104,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "List and group all patients by sex for total bilirubin (T-BIL) level not within the normal range.",
    "gold_sql": "select t1.id,t1.sex from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.`t-bil` >= 2.0 group by t1.sex,t1.id",
    "pred_sql": "select sex, t-bil from laboratory group by sex having t-bil not in (0.3, 0.8)",
    "exec_time": 102.62,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.023809523809523836
  },
  {
    "id": 105,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "What is the average age of the male patient with high cholesterol?",
    "gold_sql": "select avg(strftime('%y', date('now')) - strftime('%y', t1.birthday)) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.`t-cho` >= 250 and t1.sex = 'm'",
    "pred_sql": "select avg(datediff(curdate(), birthday)) / 365 from patient where sex = 'm' and tp > 200",
    "exec_time": 97.77,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 106,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "For all patients with triglyceride (TG) level beyond the normal range, how many are age more than 50 years?",
    "gold_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.tg >= 200 and strftime('%y', current_timestamp) - strftime('%y', t1.birthday) > 50",
    "pred_sql": "select count(*) from patient as p join laboratory as l on p.id = l.id where l.tg > 1.5 and p.birthday < '1963-01-01'",
    "exec_time": 111.86,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.10869565217391308
  },
  {
    "id": 107,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "For patient born between 1936-1956, how many male patients have creatinine phosphokinase beyond the normal range?",
    "gold_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where strftime('%y', t1.birthday) between '1936' and '1956' and t1.sex = 'm' and t2.cpk >= 250",
    "pred_sql": "select count(*) from patient as t1 join laboratory as t2 on t1.id = t2.id where t1.birthday between '1936-01-01' and '1956-12-31' and t1.sex = 'm' and t2.cpk > 150",
    "exec_time": 126.43,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.375
  },
  {
    "id": 108,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "Provide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range.",
    "gold_sql": "select distinct t1.id, t1.sex , strftime('%y', current_timestamp) - strftime('%y', t1.birthday) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.glu >= 180 and t2.`t-cho` < 250",
    "pred_sql": "select t1.id, t1.sex, datediff(curdate(), t1.birthday) as age from patient as t1 join laboratory as t2 on t1.id = t2.id where t2.glu > 200 or t2.glu is null and t2.t_cho between 40 and 60",
    "exec_time": 128.7,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 109,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "What are the patient's diagnosis for those who has lower red blood blood cell? State their ID and age.",
    "gold_sql": "select distinct t1.diagnosis, t1.id , strftime('%y', current_timestamp) -strftime('%y', t1.birthday) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.rbc < 3.5",
    "pred_sql": "select p.id, timestampdiff(year, p.birthday, current_date) as age from patient p join examination e on p.id = e.id where rbc = (select min(rbc) from examination)",
    "exec_time": 110.79,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 110,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "Among the patients who were diagnosed with SLE, who is the oldest with normal hemoglobin level. Provide the ID and sex.",
    "gold_sql": "select t1.id, t1.sex from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.diagnosis = 'sle' and t2.hgb > 10 and t2.hgb < 17 order by t1.birthday asc limit 1",
    "pred_sql": "select id, sex from patient where diagnosis = 'sle' and hgb = 'normal' order by birthday asc limit 1",
    "exec_time": 97.93,
    "ex": false,
    "sm": false,
    "cm": 0.6,
    "ast": 0.2777777777777778
  },
  {
    "id": 111,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "Name the ID and age of patient with two or more laboratory examinations which show their hematoclit level exceeded the normal range.",
    "gold_sql": "select distinct t1.id, strftime('%y', current_timestamp) - strftime('%y', t1.birthday) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.id in ( select id from laboratory where hct >= 52 group by id having count(id) >= 2 )",
    "pred_sql": "select p.id, timestampdiff(year, p.birthday, l.date) as age from patient p join laboratory l on p.id = l.id where l.hct > 0.4 group by p.id having count(distinct l.date) >= 2",
    "exec_time": 116.99,
    "ex": false,
    "sm": false,
    "cm": 0.5,
    "ast": 0.0
  },
  {
    "id": 112,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range?",
    "gold_sql": "select sum(case when t2.plt <= 100 then 1 else 0 end) - sum(case when t2.plt >= 400 then 1 else 0 end) from patient as t1 inner join laboratory as t2 on t1.id = t2.id",
    "pred_sql": "select sum(case when plt < 150 then 1 else 0 end) as lowerthannormal, sum(case when plt > 350 then 1 else 0 end) as higherthannormal from laboratory join patient on laboratory.id = patient.id where plt not between 150 and 350",
    "exec_time": 136.51,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 113,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level.",
    "gold_sql": "select distinct t1.id from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.plt between 100 and 400 and strftime('%y', t2.date) - strftime('%y', t1.birthday) < 50 and strftime('%y', t2.date) = '1984'",
    "pred_sql": "select distinct p.id from patient p inner join laboratory l on p.id = l.id where l.date between '1984-01-01' and '1984-12-31' and p.plt = 150 and strftime('%y', p.birthday) > '1954' and strftime('%y', p.birthday) < '1955'",
    "exec_time": 137.3,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.14516129032258063
  },
  {
    "id": 114,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)?",
    "gold_sql": "select cast(sum(case when t2.pt >= 14 and t1.sex = 'f' then 1 else 0 end) as real) * 100 / count(case when t2.pt >= 14 then 1 else 0 end) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where strftime('%y', current_timestamp) - strftime('%y', t1.birthday) > 55",
    "pred_sql": "select cast(sum(case when t2.sex = 'f' then 1 else 0 end) as real) * 100 / count(t1.id) from examination as t1 inner join patient as t2 on t1.id = t2.id where t2.birthday < date_sub(curdate(), interval 55 year) and t1.pt > 30",
    "exec_time": 134.33,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.25757575757575757
  },
  {
    "id": 115,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level?",
    "gold_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.fg <= 150 or t2.fg >= 450 and t2.wbc > 3.5 and t2.wbc < 9.0 and t1.sex = 'm'",
    "pred_sql": "select count(*) from patient as p join examination as e on p.id = e.id join laboratory as l on p.id = l.id where p.sex = 'm' and l.wbc = 4.7 and l.fg is not null and l.fg != 4.7",
    "exec_time": 121.07,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0641025641025641
  },
  {
    "id": 116,
    "db_id": "thrombosis_prediction",
    "difficulty": "simple",
    "question": "How many patients with an Ig G higher than normal?",
    "gold_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id inner join examination as t3 on t3.id = t2.id where t2.igg >= 2000",
    "pred_sql": "select count(*) from patient where igg > 1",
    "exec_time": 86.14,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.20454545454545459
  },
  {
    "id": 117,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "Among the patients with a normal Ig G level, how many of them have symptoms?",
    "gold_sql": "select count(t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id inner join examination as t3 on t3.id = t2.id where t2.igg between 900 and 2000 and t3.symptoms is not null",
    "pred_sql": "select count(*) from patient where id in (select p.id from patient p join examination e on p.id = e.id where e.`acl igg` = 1 and e.symptoms is not null)",
    "exec_time": 122.2,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 118,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "How many patients with a normal Ig A level came to the hospital after 1990/1/1?",
    "gold_sql": "select count(t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.iga between 80 and 500 and strftime('%y', t1.`first date`) > '1990'",
    "pred_sql": "select count(*) from patient as p join examination as e on p.id = e.id where p.id in (select id from laboratory where iga = 0 and date > '1990-01-01')",
    "exec_time": 115.67,
    "ex": true,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 119,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "For the patients with an abnormal Ig M level, what is the most common disease they are diagnosed with?",
    "gold_sql": "select t1.diagnosis from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.igm not between 40 and 400 group by t1.diagnosis order by count(t1.diagnosis) desc limit 1",
    "pred_sql": "select diagnosis from examination where `acl igm` > 1 group by diagnosis order by count(*) desc limit 1",
    "exec_time": 95.62,
    "ex": false,
    "sm": false,
    "cm": 0.5,
    "ast": 0.20408163265306123
  },
  {
    "id": 120,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "How many patients with a abnormal C-reactive protein don't have their data recorded?",
    "gold_sql": "select count(t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where (t2.crp = '+' ) and t1.description is null",
    "pred_sql": "select count(*) from laboratory where crp = 'abnormal' and id not in (select id from examination)",
    "exec_time": 91.91,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 121,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "Among the patients whose creatinine level is abnormal, how many of them aren't 70 yet?",
    "gold_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.cre >= 1.5 and strftime('%y', date('now')) - strftime('%y', t1.birthday) < 70",
    "pred_sql": "select count(*) from patient where id in (select p.id from examination as e join laboratory as l on e.id = l.id where l.cre > 1.5 or l.cre < 0.5 and e.thrombosis = 1) and id in (select id from patient where birthday < '1970-01-01')",
    "exec_time": 133.93,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 122,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital?",
    "gold_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.rnp = 'negative' or t2.rnp = '0' and t1.admission = '+'",
    "pred_sql": "select count(*) from patient where sc170 = 'negative' and admission is not null",
    "exec_time": 91.59,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.11538461538461542
  },
  {
    "id": 123,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "Among the patients with normal anti-SM, how many of them does not have thrombosis?",
    "gold_sql": "select count(t1.id) from examination as t1 inner join laboratory as t2 on t1.id = t2.id where t2.sm in ('negative','0') and t1.thrombosis = 0",
    "pred_sql": "select count(*) from patient where sc170 = 'none' and thrombosis = 0",
    "exec_time": 92.35,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.1578947368421053
  },
  {
    "id": 124,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "Among the patients who has a normal anti-scl70, how many of them are female and does not have any symptom?",
    "gold_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id inner join examination as t3 on t3.id = t2.id where (t2.sc170 = 'negative' or t2.sc170 = '0') and t1.sex = 'f' and t3.symptoms is null",
    "pred_sql": "select count(*) from patient as p join examination as e on p.id = e.id where p.sex = 'f' and e.symptoms is null and e.sc170 is null",
    "exec_time": 105.65,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.2857142857142857
  },
  {
    "id": 125,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male?",
    "gold_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.centromea in ('negative', '0') and t2.ssb in ('negative', '0') and t1.sex = 'm'",
    "pred_sql": "select count(*) from patient where sex = 'm' and `centromea` = 'negative' and `ssb` = 'negative'",
    "exec_time": 97.89,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.13043478260869568
  },
  {
    "id": 126,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "Among the patients who have an abnormal level of glutamic oxaloacetic transaminase, when was the youngest of them born?",
    "gold_sql": "select t1.birthday from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.got >= 60 order by t1.birthday desc limit 1",
    "pred_sql": "select min(t2.birthday) from laboratory as t1 join patient as t2 on t1.id = t2.id where t1.got > 30",
    "exec_time": 99.61,
    "ex": false,
    "sm": false,
    "cm": 0.2,
    "ast": 0.4864864864864865
  },
  {
    "id": 127,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "For the patients with a normal range of creatinine phosphokinase, how many of them have a positive measure of degree of coagulation?",
    "gold_sql": "select count(t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id inner join examination as t3 on t1.id = t3.id where t2.cpk < 250 and (t3.kct = '+' or t3.rvvt = '+' or t3.lac = '+')",
    "pred_sql": "select count(*) from examination where thrombosis = 0 and id in (select id from laboratory where cpk < 200)",
    "exec_time": 105.03,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 128,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Give the name of the league had the most goals in the 2016 season?",
    "gold_sql": "select t2.name from match as t1 inner join league as t2 on t1.league_id = t2.id where t1.season = '2015/2016' group by t2.name order by sum(t1.home_team_goal + t1.away_team_goal) desc limit 1",
    "pred_sql": "select league_id from match where season = '2016' group by league_id order by sum(home_team_goal) + sum(away_team_goal) desc limit 1",
    "exec_time": 307.44,
    "ex": false,
    "sm": false,
    "cm": 0.16666666666666666,
    "ast": 0.34782608695652173
  },
  {
    "id": 129,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "In Scotland Premier League, which away team won the most during the 2010 season?",
    "gold_sql": "select teaminfo.team_long_name from league as leaguedata inner join match as matchdata on leaguedata.id = matchdata.league_id inner join team as teaminfo on matchdata.away_team_api_id = teaminfo.team_api_id where leaguedata.name = 'scotland premier league' and matchdata.season = '2009/2010' and matchdata.away_team_goal - matchdata.home_team_goal > 0 group by matchdata.away_team_api_id order by count(*) desc limit 1",
    "pred_sql": "select away_team_api_id from match where season='2010' and away_team_goal>home_team_goal group by away_team_api_id order by count(*) desc limit 1",
    "exec_time": 295.26,
    "ex": true,
    "sm": false,
    "cm": 0.5,
    "ast": 0.4411764705882353
  },
  {
    "id": 130,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "What are the speed in which attacks are put together of the top 4 teams with the highest build Up Play Speed?",
    "gold_sql": "select t1.buildupplayspeed from team_attributes as t1 inner join team as t2 on t1.team_api_id = t2.team_api_id order by t1.buildupplayspeed asc limit 4",
    "pred_sql": "select t.team_long_name, ta.buildupplayspeed from team as t join team_attributes as ta on t.team_api_id = ta.team_api_id order by ta.buildupplayspeed desc limit 4",
    "exec_time": 305.77,
    "ex": false,
    "sm": false,
    "cm": 0.5,
    "ast": 0.4193548387096774
  },
  {
    "id": 131,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Give the name of the league had the most matches end as draw in the 2016 season?",
    "gold_sql": "select t2.name from match as t1 inner join league as t2 on t1.league_id = t2.id where t1.season = '2015/2016' and t1.home_team_goal = t1.away_team_goal group by t2.name order by count(t1.id) desc limit 1",
    "pred_sql": "select t2.name from match as t1 join league as t2 on t1.league_id = t2.id where t1.stage = 1 and t1.season = '2016' and t1.card = 'd' group by t2.name order by count(*) desc limit 1",
    "exec_time": 318.5,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.56
  },
  {
    "id": 132,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015.",
    "gold_sql": "select distinct datetime() - t2.birthday age from player_attributes as t1 inner join player as t2 on t1.player_api_id = t2.player_api_id where strftime('%y',t1.`date`) >= '2013' and strftime('%y',t1.`date`) <= '2015' and t1.sprint_speed >= 97",
    "pred_sql": "select t2.player_name from player as t1 join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t2.sprint_speed >= 97 and t1.birthday like '2013-%' or t1.birthday like '2014-%' or t1.birthday like '2015-%'",
    "exec_time": 331.95,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.039215686274509776
  },
  {
    "id": 133,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Give the name of the league with the highest matches of all time and how many matches were played in the said league.",
    "gold_sql": "select t2.name, t1.max_count from league as t2 join (select league_id, max(cnt) as max_count from (select league_id, count(id) as cnt from match group by league_id) as subquery) as t1 on t1.league_id = t2.id",
    "pred_sql": "select name, count(*) from match join league on match.league_id = league.id group by name order by count(*) desc limit 1",
    "exec_time": 281.56,
    "ex": false,
    "sm": false,
    "cm": 0.2,
    "ast": 0.0
  },
  {
    "id": 134,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "Give the team_fifa_api_id of teams with more than 50 but less than 60 build-up play speed.",
    "gold_sql": "select distinct team_fifa_api_id from team_attributes where buildupplayspeed > 50 and buildupplayspeed < 60",
    "pred_sql": "select team_fifa_api_id from team_attributes where buildupplayspeed > 50 and buildupplayspeed < 60",
    "exec_time": 288.62,
    "ex": true,
    "sm": false,
    "cm": 1.0,
    "ast": 0.96
  },
  {
    "id": 135,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "List the long name of teams with above-average build-up play passing in 2012.",
    "gold_sql": "select distinct t4.team_long_name from team_attributes as t3 inner join team as t4 on t3.team_api_id = t4.team_api_id where substr(t3.`date`, 1, 4) = '2012' and t3.buildupplaypassing > ( select cast(sum(t2.buildupplaypassing) as real) / count(t1.id) from team as t1 inner join team_attributes as t2 on t1.team_api_id = t2.team_api_id where strftime('%y',t2.`date`) = '2012')",
    "pred_sql": "select t.team_long_name from team as t join team_attributes as ta on t.team_api_id = ta.team_api_id where ta.date = '2012-12-31' and ta.buildupplaypassing > (select avg(buildupplaypassing) from team_attributes where date = '2012-12-31')",
    "exec_time": 332.2,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.2359550561797753
  },
  {
    "id": 136,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992.",
    "gold_sql": "select cast(count(case when t2.preferred_foot = 'left' then t1.id else null end) as real) * 100 / count(t1.id) percent from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where substr(t1.birthday, 1, 4) between '1987' and '1992'",
    "pred_sql": "select cast(sum(case when t2.preferred_foot = 'left' then 1 else 0 end) as real) * 100 / count(t1.player_api_id) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.birthday between '1987-01-01' and '1992-12-31'",
    "exec_time": 347.42,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.3666666666666667
  },
  {
    "id": 137,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "Find the average number of long-shot done by Ahmed Samir Farag.",
    "gold_sql": "select cast(sum(t2.long_shots) as real) / count(t2.`date`) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.player_name = 'ahmed samir farag'",
    "pred_sql": "select avg(t2.long_shots) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.player_name = 'ahmed samir farag'",
    "exec_time": 301.55,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.736842105263158
  },
  {
    "id": 138,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy.",
    "gold_sql": "select t1.player_name from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.height > 180 group by t1.id order by cast(sum(t2.heading_accuracy) as real) / count(t2.`player_fifa_api_id`) desc limit 10",
    "pred_sql": "select p.player_name from player as p join player_attributes as pa on p.player_api_id = pa.player_api_id where p.height > 180 group by p.player_name order by avg(pa.heading_accuracy) desc limit 10",
    "exec_time": 310.58,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.30612244897959184
  },
  {
    "id": 139,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season.",
    "gold_sql": "select t1.name from league as t1 inner join match as t2 on t1.id = t2.league_id where t2.season = '2009/2010' group by t1.name having (cast(sum(t2.home_team_goal) as real) / count(distinct t2.id)) - (cast(sum(t2.away_team_goal) as real) / count(distinct t2.id)) > 0",
    "pred_sql": "select t2.name from match as m join league as t2 on m.league_id = t2.id where m.season = '2009/2010' and m.home_team_goal > m.away_team_goal group by t2.name",
    "exec_time": 309.73,
    "ex": true,
    "sm": false,
    "cm": 1.0,
    "ast": 0.359375
  },
  {
    "id": 140,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "List the football players with a birthyear of 1970 and a birthmonth of October.",
    "gold_sql": "select player_name from player where substr(birthday, 1, 7) = '1970-10'",
    "pred_sql": "select player_name from player where birthday like '1970-10%'",
    "exec_time": 270.38,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.6666666666666667
  },
  {
    "id": 141,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "What is the overall rating of the football player Gabriel Tamas in year 2011?",
    "gold_sql": "select t2.overall_rating from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.player_name = 'gabriel tamas' and strftime('%y', t2.date) = '2011'",
    "pred_sql": "select overall_rating from player_attributes where player_api_id = (select player_api_id from player where player_name = 'gabriel tamas') and date like '2011%'",
    "exec_time": 293.05,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.2564102564102564
  },
  {
    "id": 142,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Calculate the average home team goal in the 2010/2011 season in the country of Poland.",
    "gold_sql": "select cast(sum(t2.home_team_goal) as real) / count(t2.id) from country as t1 inner join match as t2 on t1.id = t2.country_id where t1.name = 'poland' and t2.season = '2010/2011'",
    "pred_sql": "select avg(home_team_goal) from match where season = '2010/2011' and country_id = (select id from country where name = 'poland')",
    "exec_time": 289.34,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.2272727272727273
  },
  {
    "id": 143,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "Who has the highest average finishing rate between the highest and shortest football player?",
    "gold_sql": "select a from ( select avg(finishing) result, 'max' a from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.height = ( select max(height) from player ) union select avg(finishing) result, 'min' a from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.height = ( select min(height) from player ) ) order by result desc limit 1",
    "pred_sql": "select avg(player_attributes.finishing) from player_attributes join player on player_attributes.player_api_id = player.player_api_id where player.height in (select min(height) from player) and player.height in (select max(height) from player)",
    "exec_time": 302.09,
    "ex": false,
    "sm": false,
    "cm": 0.2,
    "ast": 0.0
  },
  {
    "id": 144,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "From 2010 to 2015, what was the average overall rating of players who are higher than 170?",
    "gold_sql": "select cast(sum(t2.overall_rating) as real) / count(t2.id) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.height > 170 and strftime('%y',t2.`date`) >= '2010' and strftime('%y',t2.`date`) <= '2015'",
    "pred_sql": "select avg(overall_rating) from player_attributes where player_api_id in (select player_api_id from player where height > 170 and date between '2010-01-01' and '2015-12-31')",
    "exec_time": 323.8,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 145,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye\n?",
    "gold_sql": "select cast(sum(case when t1.player_name = 'abdou diallo' then t2.ball_control else 0 end) as real) / count(case when t1.player_name = 'abdou diallo' then t2.id else null end) - cast(sum(case when t1.player_name = 'aaron appindangoye' then t2.ball_control else 0 end) as real) / count(case when t1.player_name = 'aaron appindangoye' then t2.id else null end) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id",
    "pred_sql": "select avg(`ball_control`) - (select avg(`ball_control`) from player_attributes where player_api_id in (select player_api_id from player where player_name = 'abdou diallo') or player_api_id in (select player_api_id from player where player_name = 'aaron appindangoye')) from player_attributes",
    "exec_time": 321.78,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 146,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "Which player is older, Aaron Lennon or Abdelaziz Barrada?",
    "gold_sql": "select player_name from player where player_name in ('aaron lennon', 'abdelaziz barrada') order by birthday asc limit 1",
    "pred_sql": "select player_name from player where player_name in ('aaron lennon', 'abdelaziz barrada') order by birthday asc limit 1",
    "exec_time": 318.74,
    "ex": true,
    "sm": true,
    "cm": 1.0,
    "ast": 1.0
  },
  {
    "id": 147,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "Which player is the tallest?",
    "gold_sql": "select player_name from player order by height desc limit 1",
    "pred_sql": "select player_name from player order by height desc limit 1",
    "exec_time": 274.85,
    "ex": true,
    "sm": true,
    "cm": 1.0,
    "ast": 1.0
  },
  {
    "id": 148,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Among the players whose preferred foot was the left foot when attacking, how many of them would remain in his position when the team attacked?",
    "gold_sql": "select count(player_api_id) from player_attributes where preferred_foot = 'left' and attacking_work_rate = 'low'",
    "pred_sql": "select count(*) from player_attributes where preferred_foot = 'left' and attacking_work_rate = 'left'",
    "exec_time": 282.65,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.6
  },
  {
    "id": 149,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "Among the players born before the year 1986, how many of them would remain in his position and defense while the team attacked?",
    "gold_sql": "select count(distinct t1.player_name) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where strftime('%y',t1.birthday) < '1986' and t2.defensive_work_rate = 'high'",
    "pred_sql": "select count(*) from player_attributes pa join player p on pa.player_api_id = p.player_api_id join team_attributes ta on pa.player_fifa_api_id = ta.team_fifa_api_id where p.birthday < '1986-01-01' and ta.defencepressureclass = 'balanced' and ta.defenceaggressionclass = 'balanced' and ta.defenceteamwidthclass = 'balanced' and ta.defencedefenderlineclass",
    "exec_time": 351.15,
    "ex": true,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 150,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Please list the names of the players whose volley score and dribbling score are over 70.",
    "gold_sql": "select distinct t1.player_name from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t2.volleys > 70 and t2.dribbling > 70",
    "pred_sql": "select t3.player_name from team_attributes as t1 join match as t2 on t1.team_api_id = t2.home_team_api_id or t1.team_api_id = t2.away_team_api_id join player_attributes as t3 on t3.player_api_id = t2.home_player_x7 or t3.player_api_id = t2.away_player_x7 where t3.volleys > 70 and t3.dribbling > 70",
    "exec_time": 349.83,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.29729729729729726
  },
  {
    "id": 151,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "How many matches were held in the Belgium Jupiler League in April, 2009?",
    "gold_sql": "select count(t2.id) from league as t1 inner join match as t2 on t1.id = t2.league_id where t1.name = 'belgium jupiler league' and substr(t2.`date`, 1, 7) = '2009-04'",
    "pred_sql": "select count(*) from match join league on match.league_id = league.id join country on league.country_id = country.id where league.name = 'belgium jupiler league' and month(date) = 4 and year(date) = 2009",
    "exec_time": 306.88,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 152,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "Give the name of the league had the most matches in the 2008/2009 season?",
    "gold_sql": "select t1.name from league as t1 join match as t2 on t1.id = t2.league_id where t2.season = '2008/2009' group by t1.name having count(t2.id) = (select max(match_count) from (select count(t2.id) as match_count from match as t2 where t2.season = '2008/2009' group by t2.league_id))",
    "pred_sql": "select league_id, count(*) as match_count from match where season = '2008/2009' group by league_id order by match_count desc limit 1",
    "exec_time": 293.43,
    "ex": false,
    "sm": false,
    "cm": 0.16666666666666666,
    "ast": 0.34090909090909094
  },
  {
    "id": 153,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel?",
    "gold_sql": "select (sum(case when t1.player_name = 'ariel borysiuk' then t2.overall_rating else 0 end) * 1.0 - sum(case when t1.player_name = 'paulin puel' then t2.overall_rating else 0 end)) * 100 / sum(case when t1.player_name = 'paulin puel' then t2.overall_rating else 0 end) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id",
    "pred_sql": "select cast((select overall_rating from player_attributes where player_api_id = (select player_api_id from player where player_name = 'ariel borysiuk') - (select overall_rating from player_attributes where player_api_id = (select player_api_id from player where player_name = 'paulin puel'))) as real) * 100 / (select overall_rating from player_attributes where player_api_id = (select player_api_id from player where player_name = 'paul",
    "exec_time": 349.26,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 154,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Calculate the average overall rating of Pietro Marino.",
    "gold_sql": "select cast(sum(t2.overall_rating) as real) / count(t2.id) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.player_name = 'pietro marino'",
    "pred_sql": "select avg(overall_rating) from player_attributes where player_api_id = (select player_api_id from player where player_name = 'pietro marino')",
    "exec_time": 285.39,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.2894736842105263
  },
  {
    "id": 155,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "What is Ajax's highest chance creation passing score and what is it classified as?",
    "gold_sql": "select t2.chancecreationpassing, t2.chancecreationpassingclass from team as t1 inner join team_attributes as t2 on t1.team_api_id = t2.team_api_id where t1.team_long_name = 'ajax' order by t2.chancecreationpassing desc limit 1",
    "pred_sql": "select max(chancecreationpassing), max(chancecreationpassingclass) from team_attributes where team_api_id = (select team_api_id from team where name = 'ajax')",
    "exec_time": 295.51,
    "ex": false,
    "sm": false,
    "cm": 0.2,
    "ast": 0.38095238095238093
  },
  {
    "id": 156,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "For the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player.",
    "gold_sql": "select t1.player_name from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where substr(t2.`date`, 1, 10) = '2016-06-23' and t2.overall_rating = 77 order by t1.birthday asc limit 1",
    "pred_sql": "select player_name from player where player_api_id in (select player_api_id from player_attributes where date = '2016-06-23' and overall_rating = 77) order by birthday asc limit 1",
    "exec_time": 310.4,
    "ex": false,
    "sm": false,
    "cm": 0.8,
    "ast": 0.0
  },
  {
    "id": 157,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "What was the overall rating for Aaron Mooy on 2016/2/4?",
    "gold_sql": "select t2.overall_rating from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where substr(t2.`date`, 1, 10) = '2016-02-04' and t1.player_name = 'aaron mooy'",
    "pred_sql": "select overall_rating from player_attributes where player_name = 'aaron mooy' and date = '2016-02-04 00:00:00'",
    "exec_time": 288.75,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.23076923076923073
  },
  {
    "id": 158,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "How was Francesco Migliore's attacking work rate on 2015/5/1?",
    "gold_sql": "select t2.attacking_work_rate from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t2.`date` like '2015-05-01%' and t1.player_name = 'francesco migliore'",
    "pred_sql": "select `attacking_work_rate` from player where player_name = 'francesco migliore' and date = '2015-05-01'",
    "exec_time": 295.45,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.33333333333333337
  },
  {
    "id": 159,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "When was the first time did Kevin Constant have his highest crossing score? Give the date.",
    "gold_sql": "select `date` from ( select t2.crossing, t2.`date` from player as t1 inner join player_attributes as t2 on t1.player_fifa_api_id = t2.player_fifa_api_id where t1.player_name = 'kevin constant' order by t2.crossing desc) order by date desc limit 1",
    "pred_sql": "select t2.date from player as t1 join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.player_name = 'kevin constant' order by t2.crossing desc limit 1",
    "exec_time": 301.03,
    "ex": true,
    "sm": false,
    "cm": 0.8,
    "ast": 0.7777777777777778
  },
  {
    "id": 160,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Tell the build Up play passing class for \"FC Lorient\" on 2010/2/22.",
    "gold_sql": "select t2.buildupplaypassingclass from team as t1 inner join team_attributes as t2 on t1.team_api_id = t2.team_api_id where t1.team_long_name = 'fc lorient' and t2.`date` like '2010-02-22%'",
    "pred_sql": "select buildupplaypassingclass from team_attributes where team_api_id = (select team_api_id from team where name = 'fc lorient') and date = '2010-02-22 00:00:00'",
    "exec_time": 309.04,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.2777777777777778
  },
  {
    "id": 161,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "For the team \"Hannover 96\", what was its defence aggression class on 2015/9/10?",
    "gold_sql": "select t2.defenceaggressionclass from team as t1 inner join team_attributes as t2 on t1.team_api_id = t2.team_api_id where t1.team_long_name = 'hannover 96' and t2.`date` like '2015-09-10%'",
    "pred_sql": "select defenceaggressionclass from team_attributes where team_fifa_api_id in (select team_fifa_api_id from team where team_short_name = 'hannover 96') and date = '2015-09-10'",
    "exec_time": 321.91,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.0
  },
  {
    "id": 162,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21?",
    "gold_sql": "select cast(sum(t2.overall_rating) as real) / count(t2.id) from player as t1 inner join player_attributes as t2 on t1.player_fifa_api_id = t2.player_fifa_api_id where t1.player_name = 'marko arnautovic' and substr(t2.`date`, 1, 10) between '2007-02-22' and '2016-04-21'",
    "pred_sql": "select avg(overall_rating) from player_attributes where player_api_id = (select player_api_id from player where player_name = 'marko arnautovic') and date between '2007-02-22' and '2016-04-21'",
    "exec_time": 328.09,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.1071428571428571
  },
  {
    "id": 163,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12?",
    "gold_sql": "select (sum(case when t1.player_name = 'landon donovan' then t2.overall_rating else 0 end) * 1.0 - sum(case when t1.player_name = 'jordan bowery' then t2.overall_rating else 0 end)) * 100 / sum(case when t1.player_name = 'landon donovan' then t2.overall_rating else 0 end) lvsj_percent from player as t1 inner join player_attributes as t2 on t1.player_fifa_api_id = t2.player_fifa_api_id where substr(t2.`date`, 1, 10) = '2013-07-12'",
    "pred_sql": "select cast((select overall_rating from player_attributes where player_api_id = (select player_api_id from player where player_name = 'landon donovan') and date = '2013-07-12') as real) / cast((select overall_rating from player_attributes where player_api_id = (select player_api_id from player where player_name = 'jordan bowery') and date = '2013-07-12') as real) *",
    "exec_time": 350.34,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 164,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "List down most tallest players' name.",
    "gold_sql": "select player_name from (select player_name, height, dense_rank() over (order by height desc) as rank from player) where rank = 1",
    "pred_sql": "select player_name from player order by height desc limit 1",
    "exec_time": 274.45,
    "ex": true,
    "sm": false,
    "cm": 0.6,
    "ast": 0.46341463414634143
  },
  {
    "id": 165,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "State the name of the most strongest player.",
    "gold_sql": "select distinct t1.player_name from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t2.overall_rating = (select max(overall_rating) from player_attributes)",
    "pred_sql": "select player_name from player where overall_rating = (select max(overall_rating) from player_attributes join player on player_attributes.player_api_id = player.player_api_id)",
    "exec_time": 287.28,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.6153846153846154
  },
  {
    "id": 166,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Who are the players that tend to be attacking when their mates were doing attack moves? List down their name.",
    "gold_sql": "select distinct t1.player_name from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t2.attacking_work_rate = 'high'",
    "pred_sql": "select t2.player_name from team_attributes as ta join match as m on ta.team_api_id = m.home_team_api_id or ta.team_api_id = m.away_team_api_id join player_attributes as pa on pa.player_api_id = m.home_player_x1 or pa.player_api_id = m.away_player_x1 where ta.buildupplayspeedclass = 'balanced' and ta.buildupplaydribblingclass = 'little' and ta.buildupplaypassingclass",
    "exec_time": 350.11,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 167,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "What are the short name of team who played safe while creating chance of passing?",
    "gold_sql": "select distinct t1.team_short_name from team as t1 inner join team_attributes as t2 on t1.team_api_id = t2.team_api_id where t2.chancecreationpassingclass = 'safe'",
    "pred_sql": "select t2.team_short_name from team as t1 join team_attributes as t2 on t1.team_api_id = t2.team_api_id where t2.chancecreationpassingclass = 'safe'",
    "exec_time": 304.41,
    "ex": false,
    "sm": false,
    "cm": 1.0,
    "ast": 0.9032258064516129
  },
  {
    "id": 168,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "How many football players born after the 1990s have the first name \"Aaron\"?",
    "gold_sql": "select count(id) from player where birthday > '1990' and player_name like 'aaron%'",
    "pred_sql": "select count(*) from player where player_name like 'aaron%' and strftime('%y', birthday) > '1990'",
    "exec_time": 281.97,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.48
  },
  {
    "id": 169,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "What is the difference between players 6 and 23's jumping scores?",
    "gold_sql": "select sum(case when t1.id = 6 then t1.jumping else 0 end) - sum(case when t1.id = 23 then t1.jumping else 0 end) from player_attributes as t1",
    "pred_sql": "select `jumping` from player where player_api_id in (6, 23) limit 1",
    "exec_time": 280.64,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.05882352941176472
  },
  {
    "id": 170,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Please provide top four football players' IDs who are among the lowest potential players and prefer to use the right foot when attacking.",
    "gold_sql": "select id from player_attributes where preferred_foot = 'right' order by potential asc limit 4",
    "pred_sql": "select player_api_id from player where potential in (select potential from player order by potential asc limit 4) and preferred_foot = 'right'",
    "exec_time": 285.91,
    "ex": false,
    "sm": false,
    "cm": 0.4,
    "ast": 0.0
  },
  {
    "id": 171,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "How many players had the highest potential score for crossing that preferred to use their left foots while attacking?",
    "gold_sql": "select count(t1.id) from player_attributes as t1 where t1.preferred_foot = 'left' and t1.crossing = ( select max(crossing) from player_attributes)",
    "pred_sql": "select count(*) from player_attributes where preferred_foot = 'left' and attacking_work_rate = 'high' and crossing = (select max(crossing) from player_attributes where preferred_foot = 'left' and attacking_work_rate = 'high')",
    "exec_time": 311.08,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.23913043478260865
  },
  {
    "id": 172,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "What was the final score for the match on September 24, 2008, in the Belgian Jupiler League between the home team and the away team?",
    "gold_sql": "select t2.home_team_goal, t2.away_team_goal from league as t1 inner join match as t2 on t1.id = t2.league_id where t1.name = 'belgium jupiler league' and t2.`date` like '2008-09-24%'",
    "pred_sql": "select home_team_goal, away_team_goal from match where date=\"2008-09-24 00:00:00\" and league_id=1 and season=\"2008/2009\" and stage=1",
    "exec_time": 328.11,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.07317073170731703
  },
  {
    "id": 173,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Does the KSV Cercle Brugge team have a slow, balanced or fast speed class?",
    "gold_sql": "select distinct t1.buildupplayspeedclass from team_attributes as t1 inner join team as t2 on t1.team_api_id = t2.team_api_id where t2.team_long_name = 'ksv cercle brugge'",
    "pred_sql": "select t2.buildupplayspeedclass from team as t1 inner join team_attributes as t2 on t1.team_api_id = t2.team_api_id where t1.team_long_name = 'ksv cercle brugge'",
    "exec_time": 318.13,
    "ex": true,
    "sm": false,
    "cm": 1.0,
    "ast": 0.6774193548387097
  },
  {
    "id": 174,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "Please state the finishing rate and curve score of the player who has the heaviest weight.",
    "gold_sql": "select id, finishing, curve from player_attributes where player_api_id = ( select player_api_id from player order by weight desc limit 1 ) limit 1",
    "pred_sql": "select t2.finishing, t2.curve from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.weight = (select max(weight) from player) limit 1",
    "exec_time": 309.72,
    "ex": false,
    "sm": false,
    "cm": 0.4,
    "ast": 0.24561403508771928
  },
  {
    "id": 175,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "Which top 4 leagues had the most games in the 2015-2016 season?",
    "gold_sql": "select t1.name from league as t1 inner join match as t2 on t1.id = t2.league_id where t2.season = '2015/2016' group by t1.name order by count(t2.id) desc limit 4",
    "pred_sql": "select league_id, count(*) as game_count from match where season = '2015/2016' group by league_id order by game_count desc limit 4",
    "exec_time": 306.42,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.16666666666666663
  },
  {
    "id": 176,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Please provide the full name of the away team that scored the most goals.",
    "gold_sql": "select t2.team_long_name from match as t1 inner join team as t2 on t1.away_team_api_id = t2.team_api_id order by t1.away_team_goal desc limit 1",
    "pred_sql": "select t.team_long_name from match m join team t on m.away_team_api_id = t.team_api_id group by t.team_long_name order by count(m.away_team_goal) desc limit 1",
    "exec_time": 303.14,
    "ex": false,
    "sm": false,
    "cm": 0.6,
    "ast": 0.4193548387096774
  },
  {
    "id": 177,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "Please name one player whose overall strength is the greatest.",
    "gold_sql": "select distinct t1.player_name from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t2.overall_rating = ( select max(overall_rating) from player_attributes)",
    "pred_sql": "select player_name from player where player_fifa_api_id = (select player_fifa_api_id from player_attributes order by strength desc limit 1)",
    "exec_time": 285.97,
    "ex": false,
    "sm": false,
    "cm": 0.4,
    "ast": 0.3653846153846154
  },
  {
    "id": 178,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "What is the percentage of players that are under 180 cm who have an overall strength of more than 70?",
    "gold_sql": "select cast(count(case when t2.overall_rating > 70 and t1.height < 180 then t1.id else null end) as real) * 100 / count(t1.id) percent from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id",
    "pred_sql": "select cast(sum(case when t2.height < 180 then 1 else 0 end) as real) * 100 / count(*) from player as t1 inner join `player_attributes` as t2 on t1.player_api_id = t2.player_api_id where t2.strength > 70",
    "exec_time": 321.85,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.33333333333333337
  },
  {
    "id": 179,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "Please list the reference names of the drivers who are eliminated in the first period in race number 20.",
    "gold_sql": "select t2.driverref from qualifying as t1 inner join drivers as t2 on t2.driverid = t1.driverid where t1.raceid = 20 order by t1.q1 desc limit 5",
    "pred_sql": "select t2.driverref from results as t1 join drivers as t2 on t1.driverid = t2.driverid where t1.raceid = 20 and t1.positionorder = 1 and t1.statusid = 2",
    "exec_time": 207.71,
    "ex": false,
    "sm": false,
    "cm": 0.2,
    "ast": 0.5405405405405406
  },
  {
    "id": 180,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "What is the surname of the driver with the best lap time in race number 19 in the second qualifying period?",
    "gold_sql": "select t2.surname from qualifying as t1 inner join drivers as t2 on t2.driverid = t1.driverid where t1.raceid = 19 order by t1.q2 asc limit 1",
    "pred_sql": "select t3.surname from qualifying as t1 join drivers as t3 on t1.driverid = t3.driverid join races as t2 on t1.raceid = t2.raceid where t1.number = 2 and t2.round = 19 order by t1.q2 desc limit 1",
    "exec_time": 207.15,
    "ex": false,
    "sm": false,
    "cm": 0.4,
    "ast": 0.5135135135135135
  },
  {
    "id": 181,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "Please give the name of the race held on the circuits in Germany.",
    "gold_sql": "select distinct t2.name from circuits as t1 inner join races as t2 on t2.circuitid = t1.circuitid where t1.country = 'germany'",
    "pred_sql": "select t2.name from circuits as t1 join races as t2 on t1.circuitid = t2.circuitid where t1.country = 'germany'",
    "exec_time": 181.33,
    "ex": true,
    "sm": false,
    "cm": 1.0,
    "ast": 0.967741935483871
  },
  {
    "id": 182,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "What is the coordinates location of the circuits for Australian grand prix?",
    "gold_sql": "select distinct t1.lat, t1.lng from circuits as t1 inner join races as t2 on t2.circuitid = t1.circuitid where t2.name = 'australian grand prix'",
    "pred_sql": "select t2.location, t2.lat, t2.lng from races as t1 join circuits as t2 on t1.circuitid = t2.circuitid where t1.name = 'australian grand prix'",
    "exec_time": 189.22,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.6111111111111112
  },
  {
    "id": 183,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "Give the coordinate position for Abu Dhabi Grand Prix.",
    "gold_sql": "select distinct t1.lat, t1.lng from circuits as t1 inner join races as t2 on t2.circuitid = t1.circuitid where t2.name = 'abu dhabi grand prix'",
    "pred_sql": "select lat, lng from circuits where name = 'abu dhabi grand prix'",
    "exec_time": 188.92,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.3055555555555556
  },
  {
    "id": 184,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "What's Bruno Senna's Q1 result in the qualifying race No. 354?",
    "gold_sql": "select t1.q1 from qualifying as t1 inner join drivers as t2 on t2.driverid = t1.driverid where t1.raceid = 354 and t2.forename = 'bruno' and t2.surname = 'senna'",
    "pred_sql": "select q1 from qualifying where raceid = 354 and driverid = (select driverid from drivers where forename = 'bruno' and surname = 'senna')",
    "exec_time": 183.89,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.45238095238095233
  },
  {
    "id": 185,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "What is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903?",
    "gold_sql": "select t2.number from qualifying as t1 inner join drivers as t2 on t2.driverid = t1.driverid where t1.raceid = 903 and t1.q3 like '1:54%'",
    "pred_sql": "select t2.number from qualifying as t1 join drivers as t2 on t1.driverid = t2.driverid where t1.qualifyid = 903 and t1.position = 3 and t1.q3 = '01:54.000'",
    "exec_time": 202.46,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.5833333333333333
  },
  {
    "id": 186,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",
    "gold_sql": "select count(t3.driverid) from races as t1 inner join results as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t1.year = 2007 and t1.name = 'bahrain grand prix' and t2.time is null",
    "pred_sql": "select count(*) from results where raceid in (select raceid from races where name = 'bahrain grand prix' and year = 2007 and statusid = 2) and position is null",
    "exec_time": 189.9,
    "ex": true,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 187,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "For all the drivers who finished the game in race No. 592, who is the oldest?",
    "gold_sql": "select t1.forename, t1.surname from drivers as t1 inner join results as t2 on t2.driverid = t1.driverid where t2.raceid = 592 and t2.time is not null and t1.dob is not null order by t1.dob asc limit 1",
    "pred_sql": "select min(surname) from drivers where driverid in (select driverid from results where resultid in (select resultid from races where raceid = 592))",
    "exec_time": 187.97,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 188,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "Who was the player that got the lap time of 0:01:27 in the race No. 161? Show his introduction website.",
    "gold_sql": "select distinct t2.forename, t2.surname, t2.url from laptimes as t1 inner join drivers as t2 on t2.driverid = t1.driverid where t1.raceid = 161 and t1.time like '1:27%'",
    "pred_sql": "select url from drivers where driverid = (select driverid from laptimes where raceid = 161 and time = '0:01:27')",
    "exec_time": 189.69,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.276595744680851
  },
  {
    "id": 189,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "Where is Malaysian Grand Prix held? Give the location coordinates.",
    "gold_sql": "select distinct t1.lat, t1.lng from circuits as t1 inner join races as t2 on t2.circuitid = t1.circuitid where t2.name = 'malaysian grand prix'",
    "pred_sql": "select location, lat, lng from circuits where name = 'malaysian grand prix'",
    "exec_time": 170.31,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.25
  },
  {
    "id": 190,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "For the constructor which got the highest point in the race No. 9 , what is its introduction website?",
    "gold_sql": "select t2.url from constructorresults as t1 inner join constructors as t2 on t2.constructorid = t1.constructorid where t1.raceid = 9 order by t1.points desc limit 1",
    "pred_sql": "select url from constructors where constructorid = (select constructorid from constructorresults where raceid = 9 order by points desc limit 1)",
    "exec_time": 193.39,
    "ex": true,
    "sm": false,
    "cm": 0.8,
    "ast": 0.0
  },
  {
    "id": 191,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?",
    "gold_sql": "select t2.code from qualifying as t1 inner join drivers as t2 on t2.driverid = t1.driverid where t1.raceid = 45 and t1.q3 like '1:33%'",
    "pred_sql": "select t2.code from qualifying as t1 join drivers as t2 on t1.driverid = t2.driverid where t1.raceid = 45 and t1.q3 = '0:01:33' limit 1",
    "exec_time": 202.11,
    "ex": false,
    "sm": false,
    "cm": 0.5,
    "ast": 0.8055555555555556
  },
  {
    "id": 192,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "Show me the season page of year when the race No. 901 took place.",
    "gold_sql": "select t2.url from races as t1 inner join seasons as t2 on t2.year = t1.year where t1.raceid = 901",
    "pred_sql": "select url from races where raceid = 901 limit 1",
    "exec_time": 175.34,
    "ex": false,
    "sm": false,
    "cm": 0.5,
    "ast": 0.30000000000000004
  },
  {
    "id": 193,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "For all the drivers who finished the game in race No. 872, who is the youngest?",
    "gold_sql": "select t1.forename, t1.surname from drivers as t1 inner join results as t2 on t2.driverid = t1.driverid where t2.raceid = 872 and t2.time is not null order by t1.dob desc limit 1",
    "pred_sql": "select min(surname) from drivers where driverid in (select driverid from results where resultid in (select resultid from races where raceid = 872))",
    "exec_time": 182.54,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 194,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "For the driver who set the fastest lap speed, what is his nationality?",
    "gold_sql": "select t1.nationality from drivers as t1 inner join results as t2 on t2.driverid = t1.driverid order by t2.fastestlapspeed desc limit 1",
    "pred_sql": "select nationality from drivers where driverid = (select driverid from results where statusid = (select statusid from status where status = 'finished') order by fastestlapspeed desc limit 1)",
    "exec_time": 187.11,
    "ex": false,
    "sm": false,
    "cm": 0.6,
    "ast": 0.0
  },
  {
    "id": 195,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed?",
    "gold_sql": "select (sum(iif(t2.raceid = 853, t2.fastestlapspeed, 0)) - sum(iif(t2.raceid = 854, t2.fastestlapspeed, 0))) * 100 / sum(iif(t2.raceid = 853, t2.fastestlapspeed, 0)) from drivers as t1 inner join results as t2 on t2.driverid = t1.driverid where t1.forename = 'paul' and t1.surname = 'di resta'",
    "pred_sql": "select cast(t2.fastestlapspeed as real) - t1.fastestlapspeed * 100 / t2.fastestlapspeed from results as t1 inner join results as t2 on t1.raceid = t2.raceid where t1.driverid = (select driverid from drivers where number = 853) and t2.driverid = (select driverid from drivers where number = 8) and t1.raceid",
    "exec_time": 231.9,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.11267605633802813
  },
  {
    "id": 196,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "For the drivers who took part in the race in 1983/7/16, what's their race completion rate?",
    "gold_sql": "select cast(count(case when t2.time is not null then t2.driverid end) as real) * 100 / count(t2.driverid) from races as t1 inner join results as t2 on t2.raceid = t1.raceid where t1.date = '1983-07-16'",
    "pred_sql": "select cast(count(distinct t2.driverid) as real) * 100 / count(distinct t1.driverid) from results as t1 inner join drivers as t2 on t1.driverid = t2.driverid where t1.date = '1983-07-16'",
    "exec_time": 218.31,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.41666666666666663
  },
  {
    "id": 197,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "List the names of all races that occurred in the earliest recorded year and month.",
    "gold_sql": "select name from races where strftime('%y', date) = ( select strftime('%y', date) from races order by date asc limit 1 ) and strftime('%m', date) = ( select strftime('%m', date) from races order by date asc limit 1 )",
    "pred_sql": "select name from races where date >= '1950-01-01' order by date limit 1",
    "exec_time": 179.63,
    "ex": false,
    "sm": false,
    "cm": 0.8,
    "ast": 0.4044943820224719
  },
  {
    "id": 198,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "State the driver with the most points scored. Find his full name with that points.",
    "gold_sql": "select t3.forename, t3.surname, t2.points from races as t1 inner join driverstandings as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid order by t2.points desc limit 1",
    "pred_sql": "select t1.forename , t1.surname from drivers as t1 join driverstandings as t2 on t1.driverid = t2.driverid order by t2.points desc limit 1",
    "exec_time": 198.08,
    "ex": false,
    "sm": false,
    "cm": 0.5,
    "ast": 0.679245283018868
  },
  {
    "id": 199,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "What is the best lap time recorded? List the driver and race with such recorded lap time.",
    "gold_sql": "select t2.milliseconds, t1.forename, t1.surname, t3.name from drivers as t1 inner join laptimes as t2 on t1.driverid = t2.driverid inner join races as t3 on t2.raceid = t3.raceid order by t2.milliseconds asc limit 1",
    "pred_sql": "select t2.forename, t2.surname, t1.time from laptimes as t1 join drivers as t2 on t1.driverid = t2.driverid order by t1.milliseconds asc limit 1",
    "exec_time": 205.26,
    "ex": false,
    "sm": false,
    "cm": 0.5,
    "ast": 0.6724137931034483
  },
  {
    "id": 200,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "What is the average lap time for Lewis Hamilton in the 2009 Malaysian Grand Prix?",
    "gold_sql": "select avg(t2.milliseconds) from races as t1 inner join laptimes as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t3.forename = 'lewis' and t3.surname = 'hamilton' and t1.year = 2009 and t1.name = 'malaysian grand prix'",
    "pred_sql": "select avg(milliseconds) from laptimes where raceid = (select raceid from races where name = 'malaysian grand prix' and year = 2009) and driverid = (select driverid from drivers where forename = 'lewis' and surname = 'hamilton')",
    "exec_time": 198.25,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.4918032786885246
  },
  {
    "id": 201,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010.",
    "gold_sql": "select cast(count(case when t2.position <> 1 then t2.position end) as real) * 100 / count(t2.driverstandingsid) from races as t1 inner join driverstandings as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t3.surname = 'hamilton' and t1.year >= 2010",
    "pred_sql": "select cast(sum(case when t2.position = 1 then 1 else 0 end) as real) * 100 / count(*) from races as t1 inner join results as t2 on t1.year = t2.raceid and t1.raceid = t2.raceid where t2.driverid = (select driverid from drivers where forename = 'lewis' and surname = 'hamilton') and t1.year >= 2010",
    "exec_time": 229.15,
    "ex": true,
    "sm": false,
    "cm": 0.0,
    "ast": 0.4461538461538461
  },
  {
    "id": 202,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "Name the driver with the most winning. Mention his nationality and what is his maximum point scores.",
    "gold_sql": "select t1.forename, t1.surname, t1.nationality, max(t2.points) from drivers as t1 inner join driverstandings as t2 on t2.driverid = t1.driverid where t2.wins >= 1 group by t1.forename, t1.surname, t1.nationality order by count(t2.wins) desc limit 1",
    "pred_sql": "select t3.nationality, max(t1.points) from driverstandings as t1 join drivers as t3 on t1.driverid = t3.driverid where t1.position = 1 group by t3.nationality order by max(t1.points) desc limit 1",
    "exec_time": 199.7,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.421875
  },
  {
    "id": 203,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "How old is the youngest Japanese driver? What is his name?",
    "gold_sql": "select strftime('%y', current_timestamp) - strftime('%y', dob), forename , surname from drivers where nationality = 'japanese' order by dob desc limit 1",
    "pred_sql": "select min(dob), surname from drivers where nationality = 'japanese' order by dob asc limit 1",
    "exec_time": 175.08,
    "ex": false,
    "sm": false,
    "cm": 0.6,
    "ast": 0.6511627906976745
  },
  {
    "id": 204,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "Name the races along with its circuit name and location for f1 races hosted in September 2005.",
    "gold_sql": "select distinct t2.name, t1.name, t1.location from circuits as t1 inner join races as t2 on t2.circuitid = t1.circuitid where t2.year = 2005 and strftime('%m', t2.date) = '09'",
    "pred_sql": "select t1.name, t1.location from races as t1 join circuits as t2 on t1.circuitid = t2.circuitid where t1.date like '2005-09-%'",
    "exec_time": 189.23,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.48
  },
  {
    "id": 205,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "Which race was Alex Yoong in when he was in track number less than 20?",
    "gold_sql": "select t1.name from races as t1 inner join driverstandings as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t3.forename = 'alex' and t3.surname = 'yoong' and t2.position < 20",
    "pred_sql": "select r.name from races r join results res on r.raceid = res.raceid join drivers d on res.driverid = d.driverid where d.forename = 'alex' and d.surname = 'yoong' and res.grid < 20",
    "exec_time": 197.56,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.5
  },
  {
    "id": 206,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "State the race and year of race in which Michael Schumacher had his fastest lap.",
    "gold_sql": "select t1.name, t1.year from races as t1 inner join laptimes as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t3.forename = 'michael' and t3.surname = 'schumacher' order by t2.milliseconds asc limit 1",
    "pred_sql": "select t2.year from drivers as t1 join results as t2 on t1.driverid = t2.driverid where t1.forename = 'michael' and t1.surname = 'schumacher' and t2.fastestlap = 1",
    "exec_time": 211.6,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.55
  },
  {
    "id": 207,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "Which was Lewis Hamilton first race? What was his points recorded for his first race event?",
    "gold_sql": "select t1.name, t2.points from races as t1 inner join driverstandings as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t3.forename = 'lewis' and t3.surname = 'hamilton' order by t1.year asc limit 1",
    "pred_sql": "select t2.points from drivers as t1 join results as t2 on t1.driverid = t2.driverid where t1.forename = 'lewis' and t1.surname = 'hamilton' order by t2.raceid limit 1",
    "exec_time": 199.93,
    "ex": true,
    "sm": false,
    "cm": 0.4,
    "ast": 0.6
  },
  {
    "id": 208,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "Among all European Grand Prix races, what is the percentage of the races were hosted in Germany?",
    "gold_sql": "select cast(count(case when t1.country = 'germany' then t2.circuitid end) as real) * 100 / count(t2.circuitid) from circuits as t1 inner join races as t2 on t2.circuitid = t1.circuitid where t2.name = 'european grand prix'",
    "pred_sql": "select cast(sum(case when t2.country = 'germany' then 1 else 0 end) as real) * 100 / count(*) from races as t1 inner join circuits as t2 on t1.circuitid = t2.circuitid inner join seasons as t3 on t1.year = t3.year where t3.url like '%european grand prix%'",
    "exec_time": 214.73,
    "ex": true,
    "sm": false,
    "cm": 0.0,
    "ast": 0.2978723404255319
  },
  {
    "id": 209,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "What's the location coordinates of Silverstone Circuit?",
    "gold_sql": "select lat, lng from circuits where name = 'silverstone circuit'",
    "pred_sql": "select location, lng, lat from circuits where name = 'silverstone circuit'",
    "exec_time": 164.86,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.8695652173913043
  },
  {
    "id": 210,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "What's the reference name of Marina Bay Street Circuit?",
    "gold_sql": "select circuitref from circuits where name = 'marina bay street circuit'",
    "pred_sql": "select circuitref from circuits where name = 'marina bay street circuit'",
    "exec_time": 167.5,
    "ex": true,
    "sm": true,
    "cm": 1.0,
    "ast": 1.0
  },
  {
    "id": 211,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "Which country is the oldest driver from?",
    "gold_sql": "select nationality from drivers where dob is not null order by dob asc limit 1",
    "pred_sql": "select nationality from drivers order by dob limit 1",
    "exec_time": 167.16,
    "ex": false,
    "sm": false,
    "cm": 0.8,
    "ast": 0.8076923076923077
  },
  {
    "id": 212,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "Which driver ranked the first in the Canadian Grand Prix in 2007? Please give his reference name.",
    "gold_sql": "select t3.forename, t3.surname, t3.driverref from races as t1 inner join results as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t1.name = 'canadian grand prix' and t2.rank = 1 and t1.year = 2007",
    "pred_sql": "select t2.driverref from races as t1 join results as t2 on t1.raceid = t2.raceid where t1.name = 'canadian grand prix' and t1.year = 2007 and t2.position = 1",
    "exec_time": 197.27,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.734375
  },
  {
    "id": 213,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "In which Formula_1 race did Lewis Hamilton rank the highest?",
    "gold_sql": "select name from races where raceid in ( select raceid from results where rank = 1 and driverid = ( select driverid from drivers where forename = 'lewis' and surname = 'hamilton' ) )",
    "pred_sql": "select t2.name from drivers as t1 join results as t2 on t1.driverid = t2.driverid where t1.forename = 'lewis' and t1.surname = 'hamilton' order by t2.position limit 1",
    "exec_time": 193.13,
    "ex": false,
    "sm": false,
    "cm": 0.2,
    "ast": 0.35443037974683544
  },
  {
    "id": 214,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "What was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix?",
    "gold_sql": "select t2.fastestlapspeed from races as t1 inner join results as t2 on t2.raceid = t1.raceid where t1.name = 'spanish grand prix' and t1.year = 2009 and t2.fastestlapspeed is not null order by t2.fastestlapspeed desc limit 1",
    "pred_sql": "select fastestlapspeed from results where raceid = (select raceid from races where name = 'spanish grand prix 2009') order by fastestlapspeed desc limit 1",
    "exec_time": 190.5,
    "ex": true,
    "sm": false,
    "cm": 0.8,
    "ast": 0.36
  },
  {
    "id": 215,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "What was Lewis Hamilton's final rank in the 2008 Chinese Grand Prix?",
    "gold_sql": "select t2.positionorder from races as t1 inner join results as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t3.forename = 'lewis' and t3.surname = 'hamilton' and t1.name = 'chinese grand prix' and t1.year = 2008",
    "pred_sql": "select t3.rank from results as t3 join drivers as t1 on t3.driverid = t1.driverid join races as t2 on t3.raceid = t2.raceid where t1.forename = 'lewis' and t1.surname = 'hamilton' and t2.name = 'chinese grand prix' and t2.year = 2008 order by t3.positionorder desc limit 1",
    "exec_time": 223.67,
    "ex": true,
    "sm": false,
    "cm": 0.4,
    "ast": 0.5833333333333333
  },
  {
    "id": 216,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "What's the finish time for the driver who ranked second in 2008's AustChineseralian Grand Prix?",
    "gold_sql": "select t1.time from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t1.rank = 2 and t2.name = 'chinese grand prix' and t2.year = 2008",
    "pred_sql": "select t2.time from results as t1 join races as t3 on t1.raceid = t3.raceid join drivers as t4 on t1.driverid = t4.driverid where t1.position = 2 and t3.name = 'austchineseralian grand prix 2008'",
    "exec_time": 211.7,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 217,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "Among the drivers that finished the race in the 2008 Chinese Grand Prix, how many of them have participated in Formula_1 races?",
    "gold_sql": "select count(*) from ( select t1.driverid from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t2.name = 'chinese grand prix' and t2.year = 2008 and t1.time is not null group by t1.driverid having count(t2.raceid) > 0 )",
    "pred_sql": "select count(distinct t2.driverid) from races as t1 join results as t2 on t1.raceid = t2.raceid where t1.name = 'chinese grand prix' and t1.year = 2008 and t2.position is not null",
    "exec_time": 207.07,
    "ex": true,
    "sm": false,
    "cm": 0.25,
    "ast": 0.49230769230769234
  },
  {
    "id": 218,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix?",
    "gold_sql": "with time_in_seconds as ( select t1.positionorder, case when t1.positionorder = 1 then (cast(substr(t1.time, 1, 1) as real) * 3600) + (cast(substr(t1.time, 3, 2) as real) * 60) + cast(substr(t1.time, 6) as real) else cast(substr(t1.time, 2) as real) end as time_seconds from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t2.name = 'australian grand prix' and t1.time is not null and t2.year = 2008 ), champion_time as ( select time_seconds from time_in_seconds where positionorder = 1), last_driver_incremental as ( select time_seconds from time_in_seconds where positionorder = (select max(positionorder) from time_in_seconds) ) select (cast((select time_seconds from last_driver_incremental) as real) * 100) / (select time_seconds + (select time_seconds from last_driver_incremental) from champion_time)",
    "pred_sql": "select cast((select max(points) from driverstandings where raceid = (select raceid from races where name = 'australian grand prix' and year = 2008) - (select min(points) from driverstandings where raceid = (select raceid from races where name = 'australian grand prix' and year = 2008)) as real) * 100 / (select max(points) from driverstandings where raceid = (select race",
    "exec_time": 230.33,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 219,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "How many circuits are there in Adelaide, Australia?",
    "gold_sql": "select count(circuitid) from circuits where location = 'adelaide' and country = 'australia'",
    "pred_sql": "select count(*) from circuits where location = 'adelaide' and country = 'australia'",
    "exec_time": 168.64,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.76
  },
  {
    "id": 220,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "What are the maximum points of British constructors?",
    "gold_sql": "select max(t1.points) from constructorstandings as t1 inner join constructors as t2 on t1.constructorid = t2.constructorid where t2.nationality = 'british'",
    "pred_sql": "select max(t2.points) from constructors as t1 inner join constructorstandings as t2 on t1.constructorid = t2.constructorid where t1.nationality = 'british'",
    "exec_time": 183.71,
    "ex": true,
    "sm": false,
    "cm": 1.0,
    "ast": 0.7096774193548387
  },
  {
    "id": 221,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "Please list the constructor names with 0 points at race 291.",
    "gold_sql": "select t2.name from constructorstandings as t1 inner join constructors as t2 on t1.constructorid = t2.constructorid where t1.points = 0 and t1.raceid = 291",
    "pred_sql": "select name from constructors where constructorid in (select constructorid from constructorresults where raceid = 291 and points = 0)",
    "exec_time": 180.34,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 222,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "How many Japanese constructors have 0 points in 2 races?",
    "gold_sql": "select count(t1.raceid) from constructorstandings as t1 inner join constructors as t2 on t1.constructorid = t2.constructorid where t1.points = 0 and t2.nationality = 'japanese' group by t1.constructorid having count(raceid) = 2",
    "pred_sql": "select count(t2.constructorid) from constructors as t1 inner join constructorstandings as t2 on t1.constructorid = t2.constructorid where t1.nationality = 'japanese' and t2.points = 0 and t2.raceid in (select raceid from races where year = 2009 limit 2)",
    "exec_time": 211.38,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.276595744680851
  },
  {
    "id": 223,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "Please calculate the race completion percentage of Japanese drivers from 2007 to 2009.",
    "gold_sql": "select cast(sum(iif(t1.time is not null, 1, 0)) as real) * 100 / count(t1.raceid) from results as t1 inner join races as t2 on t1.raceid = t2.raceid inner join drivers as t3 on t1.driverid = t3.driverid where t3.nationality = 'japanese' and t2.year between 2007 and 2009",
    "pred_sql": "select cast(sum(case when t2.nationality = 'japan' then 1 else 0 end) as real) * 100 / count(*) from races join results as t1 on races.raceid = t1.raceid join drivers as t2 on t1.driverid = t2.driverid where races.year in (2007, 2008, 2009)",
    "exec_time": 224.88,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.34285714285714286
  },
  {
    "id": 224,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "What is the average time in seconds of champion for each year, before year 1975?",
    "gold_sql": "with time_in_seconds as ( select t2.year, t2.raceid, t1.positionorder, case when t1.positionorder = 1 then (cast(substr(t1.time, 1, 1) as real) * 3600) + (cast(substr(t1.time, 3, 2) as real) * 60) + cast(substr(t1.time, 6,2) as real ) + cast(substr(t1.time, 9) as real)/1000 else 0 end as time_seconds from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t1.time is not null ), champion_time as ( select year, raceid, time_seconds from time_in_seconds where positionorder = 1 ) select year, avg(time_seconds) from champion_time where year < 1975 group by year having avg(time_seconds) is not null",
    "pred_sql": "select t2.year, avg(t1.time/1000) from results as t1 join races as t3 on t1.raceid = t3.raceid join seasons as t2 on t3.year = t2.year where t1.positiontext = 'champion' and t2.year < 1975 group by t2.year",
    "exec_time": 215.95,
    "ex": false,
    "sm": false,
    "cm": 0.25,
    "ast": 0.2582781456953642
  },
  {
    "id": 225,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "What is the fastest lap number of the champion in 2009?",
    "gold_sql": "select t1.fastestlap from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t2.year = 2009 and t1.time like '_:%:__.___'",
    "pred_sql": "select t1.fastestlap from results as t1 join drivers as t2 on t1.driverid = t2.driverid join races as t3 on t1.raceid = t3.raceid where t2.forename = 'nico' and t2.surname = 'rosberg' and t3.year = 2009 order by t1.position asc limit 1",
    "exec_time": 217.91,
    "ex": false,
    "sm": false,
    "cm": 0.2,
    "ast": 0.16666666666666663
  },
  {
    "id": 226,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "What is the average of fastest lap speed in the 2009 Spanish Grand Prix race?",
    "gold_sql": "select avg(t1.fastestlapspeed) from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t2.year = 2009 and t2.name = 'spanish grand prix'",
    "pred_sql": "select avg(milliseconds) from results where raceid = (select raceid from races where name = 'spanish grand prix 2009') and fastestlapspeed is not null",
    "exec_time": 184.6,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.08108108108108103
  },
  {
    "id": 227,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50?",
    "gold_sql": "select cast(sum(iif(strftime('%y', t3.dob) < '1985' and t1.laps > 50, 1, 0)) as real) * 100 / count(*) from results as t1 inner join races as t2 on t1.raceid = t2.raceid inner join drivers as t3 on t1.driverid = t3.driverid where t2.year between 2000 and 2005",
    "pred_sql": "select cast(sum(case when t2.lap > 50 then 1 else 0 end) as real) * 100 / count(*) from drivers as t1 inner join laptimes as t2 on t1.driverid = t2.driverid where t1.dob < '1985-01-01' and t2.lap > 50 and t1.driverid in (select driverid from results where resultid in (",
    "exec_time": 231.4,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 228,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "How many French drivers who obtain the laptime less than 02:00.00?",
    "gold_sql": "select count(t1.driverid) from drivers as t1 inner join laptimes as t2 on t1.driverid = t2.driverid where t1.nationality = 'french' and (cast(substr(t2.time, 1, 2) as integer) * 60 + cast(substr(t2.time, 4, 2) as integer) + cast(substr(t2.time, 7, 2) as real) / 1000) < 120",
    "pred_sql": "select count(driverid) from laptimes where driverid in (select driverid from drivers where nationality = 'french') and time < '02:00.00'",
    "exec_time": 186.85,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.0
  },
  {
    "id": 229,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "List out the code for drivers who have nationality in American.",
    "gold_sql": "select code from drivers where nationality = 'american'",
    "pred_sql": "select driverid, forename, surname from drivers where nationality = 'american'",
    "exec_time": 166.15,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.6666666666666667
  },
  {
    "id": 230,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?",
    "gold_sql": "select count(*) from ( select t1.nationality from drivers as t1 order by julianday(t1.dob) desc limit 3) as t3 where t3.nationality = 'dutch'",
    "pred_sql": "select driverid from drivers where nationality = 'netherlands' order by dob asc limit 3",
    "exec_time": 170.32,
    "ex": false,
    "sm": false,
    "cm": 0.4,
    "ast": 0.1282051282051282
  },
  {
    "id": 231,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "Please state the reference name of the oldest German driver.",
    "gold_sql": "select driverref from drivers where nationality = 'german' order by julianday(dob) asc limit 1",
    "pred_sql": "select t3.forename , t3.surname from drivers as t3 join results as t2 on t3.driverid = t2.driverid join constructors as t1 on t2.constructorid = t1.constructorid where t1.nationality = 'german' order by t2.year limit 1",
    "exec_time": 202.24,
    "ex": false,
    "sm": false,
    "cm": 0.4,
    "ast": 0.0
  },
  {
    "id": 232,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "Which drivers who were born in 1971 and has the fastest lap time on the race? Give id and code of these drivers.",
    "gold_sql": "select t2.driverid, t2.code from results as t1 inner join drivers as t2 on t1.driverid = t2.driverid where strftime('%y', t2.dob) = '1971' and t1.fastestlaptime is not null",
    "pred_sql": "select t2.driverid, t2.code from qualifying as t1 join drivers as t2 on t1.driverid = t2.driverid where t2.dob = '1971-01-01' and t1.position = 1",
    "exec_time": 205.31,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.6222222222222222
  },
  {
    "id": 233,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "From race no. 50 to 100, how many finishers have been disqualified?",
    "gold_sql": "select sum(iif(time is not null, 1, 0)) from results where statusid = 2 and raceid < 100 and raceid > 50",
    "pred_sql": "select count(*) from results where raceid between 50 and 100 and statusid = 2",
    "exec_time": 176.11,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.45945945945945943
  },
  {
    "id": 234,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "How many times the circuits were held in Austria? Please give their location and coordinates.",
    "gold_sql": "select distinct location, lat, lng from circuits where country = 'austria'",
    "pred_sql": "select t1.location, t1.lat, t1.lng from circuits as t1 inner join results as t2 on t1.circuitid = t2.circuitid where t1.country = 'austria'",
    "exec_time": 189.86,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.1724137931034483
  },
  {
    "id": 235,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "On what year did the youngest driver had his first qualifying race? Also state the name, date and time of the race.",
    "gold_sql": "select t3.year, t3.name, t3.date, t3.time from qualifying as t1 inner join drivers as t2 on t1.driverid = t2.driverid inner join races as t3 on t1.raceid = t3.raceid where t1.driverid = ( select driverid from drivers order by dob desc limit 1 ) order by t3.date asc limit 1",
    "pred_sql": "select t2.year , t2.date , t2.time from qualifying as t1 join races as t2 on t1.raceid = t2.raceid join drivers as t3 on t1.driverid = t3.driverid where t3.dob = ( select min(dob) from drivers ) order by t1.number asc limit 1",
    "exec_time": 214.41,
    "ex": false,
    "sm": false,
    "cm": 0.4,
    "ast": 0.5714285714285714
  },
  {
    "id": 236,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985.",
    "gold_sql": "select t2.forename, t2.surname from pitstops as t1 inner join drivers as t2 on t1.driverid = t2.driverid where t2.nationality = 'german' and strftime('%y', t2.dob) between '1980' and '1985' group by t2.forename, t2.surname order by avg(t1.duration) limit 3",
    "pred_sql": "select driverid, sum(milliseconds)/3 as avgduration from pitstops where driverid in (select driverid from drivers where nationality = 'german' and dob between '1980-01-01' and '1985-12-31') group by driverid order by avgduration limit 3",
    "exec_time": 208.51,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 237,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "Who is the champion of the Canadian Grand Prix in 2008? Indicate his finish time.",
    "gold_sql": "select t1.time from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t2.name = 'canadian grand prix' and t2.year = 2008 and t1.time like '_:%:__.___'",
    "pred_sql": "select t3.time from races as t1 inner join results as t2 on t1.raceid = t2.raceid inner join drivers as t3 on t2.driverid = t3.driverid where t1.name = 'canadian grand prix' and t1.year = 2008 and t2.position = 1",
    "exec_time": 207.9,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.45238095238095233
  },
  {
    "id": 238,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "What is the constructor reference name of the champion in the 2009 Singapore Grand Prix? Please give its website.",
    "gold_sql": "select t3.constructorref, t3.url from results as t1 inner join races as t2 on t1.raceid = t2.raceid inner join constructors as t3 on t1.constructorid = t3.constructorid where t2.name = 'singapore grand prix' and t2.year = 2009 and t1.time like '_:%:__.___'",
    "pred_sql": "select t3.url from races as t1 inner join constructorresults as t2 on t1.raceid = t2.raceid inner join constructors as t3 on t2.constructorid = t3.constructorid where t1.name = 'singapore grand prix 2009' order by t2.points desc limit 1",
    "exec_time": 207.19,
    "ex": true,
    "sm": false,
    "cm": 0.0,
    "ast": 0.576271186440678
  },
  {
    "id": 239,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "Please list all the superpowers of 3-D Man.",
    "gold_sql": "select t3.power_name from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id where t1.superhero_name = '3-d man'",
    "pred_sql": "select power_name from superpower where id in (select power_id from hero_power where hero_id = (select id from superhero where superhero_name = '3-d man'))",
    "exec_time": 82.28,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.0
  },
  {
    "id": 240,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team.",
    "gold_sql": "select sum(t1.points), t2.name, t2.nationality from constructorresults as t1 inner join constructors as t2 on t1.constructorid = t2.constructorid inner join races as t3 on t3.raceid = t1.raceid where t3.name = 'monaco grand prix' and t3.year between 1980 and 2010 group by t2.name order by sum(t1.points) desc limit 1",
    "pred_sql": "select t3.name, t3.nationality, max(t2.points) from races as t1 join constructorresults as t2 on t1.raceid = t2.raceid join constructors as t3 on t2.constructorid = t3.constructorid join seasons as t4 on t1.year = t4.year where t1.name = 'monaco grand prix' and t4.year >= 1980 and t4.year <= 2010 group by",
    "exec_time": 231.67,
    "ex": false,
    "sm": false,
    "cm": 0.16666666666666666,
    "ast": 0.42666666666666664
  },
  {
    "id": 241,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "What is full name of the racer who ranked 1st in the 3rd qualifying race held in the Marina Bay Street Circuit in 2008?",
    "gold_sql": "select t2.forename, t2.surname from qualifying as t1 inner join drivers as t2 on t1.driverid = t2.driverid inner join races as t3 on t1.raceid = t3.raceid where q3 is not null and t3.year = 2008 and t3.circuitid in ( select circuitid from circuits where name = 'marina bay street circuit' ) order by cast(substr(q3, 1, instr(q3, ':') - 1) as integer) * 60 + cast(substr(q3, instr(q3, ':') + 1, instr(q3, '.') - instr(q3, ':') - 1) as real) + cast(substr(q3, instr(q3, '.') + 1) as real) / 1000 asc limit 1",
    "pred_sql": "select t3.forename, t3.surname from qualifying as t1 inner join drivers as t3 on t1.driverid = t3.driverid inner join races as t2 on t1.raceid = t2.raceid where t2.name = 'marina bay street circuit' and t2.year = 2008 and t1.position = 1",
    "exec_time": 213.69,
    "ex": true,
    "sm": false,
    "cm": 0.2,
    "ast": 0.0
  },
  {
    "id": 242,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "As of the present, what is the full name of the youngest racer? Indicate her nationality and the name of the race to which he/she first joined.",
    "gold_sql": "select t1.forename, t1.surname, t1.nationality, t3.name from drivers as t1 inner join driverstandings as t2 on t1.driverid = t2.driverid inner join races as t3 on t2.raceid = t3.raceid order by julianday(t1.dob) desc limit 1",
    "pred_sql": "select t3.forename , t3.surname , t3.nationality , t1.name from races as t1 join driverstandings as t2 on t1.year = t2.raceid join drivers as t3 on t2.driverid = t3.driverid order by t3.dob asc limit 1",
    "exec_time": 215.57,
    "ex": false,
    "sm": false,
    "cm": 0.75,
    "ast": 0.6271186440677966
  },
  {
    "id": 243,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "How many accidents did the driver who had the highest number accidents in the Canadian Grand Prix have?",
    "gold_sql": "select count(t1.driverid) from results as t1 inner join races as t2 on t1.raceid = t2.raceid inner join status as t3 on t1.statusid = t3.statusid where t3.statusid = 3 and t2.name = 'canadian grand prix' group by t1.driverid order by count(t1.driverid) desc limit 1",
    "pred_sql": "select count(statusid) from results join drivers on results.driverid = drivers.driverid join races on results.raceid = races.raceid where races.name = 'canadian grand prix' and drivers.driverid = (select driverid from results group by driverid order by count(*) desc limit 1) and statusid = (select statusid from status where status = 'accident')",
    "exec_time": 214.84,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 244,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "Which top 20 driver created the shortest lap time ever record in a Formula_1 race? Please give them full names.",
    "gold_sql": "with lap_times_in_seconds as (select driverid, (case when substr(time, 1, instr(time, ':') - 1) <> '' then cast(substr(time, 1, instr(time, ':') - 1) as real) * 60 else 0 end + case when substr(time, instr(time, ':') + 1, instr(time, '.') - instr(time, ':') - 1) <> '' then cast(substr(time, instr(time, ':') + 1, instr(time, '.') - instr(time, ':') - 1) as real) else 0 end + case when substr(time, instr(time, '.') + 1) <> '' then cast(substr(time, instr(time, '.') + 1) as real) / 1000 else 0 end) as time_in_seconds from laptimes) select t2.forename, t2.surname, t1.driverid from (select driverid, min(time_in_seconds) as min_time_in_seconds from lap_times_in_seconds group by driverid) as t1 inner join drivers as t2 on t1.driverid = t2.driverid order by t1.min_time_in_seconds asc limit 20",
    "pred_sql": "select t2.forename, t2.surname from driverstandings as t1 join drivers as t2 on t1.driverid = t2.driverid where t1.position = 1 order by t1.milliseconds asc limit 20",
    "exec_time": 194.07,
    "ex": false,
    "sm": false,
    "cm": 0.16666666666666666,
    "ast": 0.3532608695652174
  },
  {
    "id": 245,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "Please list the lap records for the circuits in Italy.",
    "gold_sql": "with fastest_lap_times as (select t1.raceid, t1.fastestlaptime, (cast(substr(t1.fastestlaptime, 1, instr(t1.fastestlaptime, ':') - 1) as real) * 60) + (cast(substr(t1.fastestlaptime, instr(t1.fastestlaptime, ':') + 1, instr(t1.fastestlaptime, '.') - instr(t1.fastestlaptime, ':') - 1) as real)) + (cast(substr(t1.fastestlaptime, instr(t1.fastestlaptime, '.') + 1) as real) / 1000) as time_in_seconds from results as t1 where t1.fastestlaptime is not null ) select t1.fastestlaptime as lap_record from results as t1 inner join races as t2 on t1.raceid = t2.raceid inner join circuits as t3 on t2.circuitid = t3.circuitid inner join (select min(fastest_lap_times.time_in_seconds) as min_time_in_seconds from fastest_lap_times inner join races as t2 on fastest_lap_times.raceid = t2.raceid inner join circuits as t3 on t2.circuitid = t3.circuitid where t3.country = 'italy' ) as t4 on (cast(substr(t1.fastestlaptime, 1, instr(t1.fastestlaptime, ':') - 1) as real) * 60) + (cast(substr(t1.fastestlaptime, instr(t1.fastestlaptime, ':') + 1, instr(t1.fastestlaptime, '.') - instr(t1.fastestlaptime, ':') - 1) as real)) + (cast(substr(t1.fastestlaptime, instr(t1.fastestlaptime, '.') + 1) as real) / 1000) = t4.min_time_in_seconds limit 1",
    "pred_sql": "select raceid, driverid, lap, position, time, milliseconds from laptimes where circuitid in (select circuitid from circuits where country = 'italy')",
    "exec_time": 184.02,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.21759259259259256
  },
  {
    "id": 246,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Among the superheroes with the super power of \"Super Strength\", how many of them have a height of over 200cm?",
    "gold_sql": "select count(t1.id) from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id where t3.power_name = 'super strength' and t1.height_cm > 200",
    "pred_sql": "select count(*) from superhero as t1 join hero_power as t2 on t1.id = t2.hero_id join superpower as t3 on t2.power_id = t3.id where t3.power_name = 'super strength' and t1.height_cm > 200",
    "exec_time": 90.93,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.8775510204081632
  },
  {
    "id": 247,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Among the superheroes with blue eyes, how many of them have the super power of \"Agility\"?",
    "gold_sql": "select count(t1.id) from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id inner join colour as t4 on t1.eye_colour_id = t4.id where t3.power_name = 'agility' and t4.colour = 'blue'",
    "pred_sql": "select count(distinct h.id) from superhero as h join hero_attribute as ha on h.id = ha.hero_id join colour as c on h.eye_colour_id = c.id where c.colour = 'blue' and h.id in (select hp.hero_id from hero_power as hp join superpower as sp on hp.power_id = sp.id where sp.power_name = 'agility')",
    "exec_time": 105.23,
    "ex": true,
    "sm": false,
    "cm": 0.0,
    "ast": 0.11475409836065575
  },
  {
    "id": 248,
    "db_id": "superhero",
    "difficulty": "challenging",
    "question": "Please list the superhero names of all the superheroes that have blue eyes and blond hair.",
    "gold_sql": "select t1.superhero_name from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id inner join colour as t3 on t1.hair_colour_id = t3.id where t2.colour = 'blue' and t3.colour = 'blond'",
    "pred_sql": "select superhero_name from superhero where eye_colour_id in (select id from colour where colour = 'blond') and hair_colour_id in (select id from colour where colour = 'blue')",
    "exec_time": 79.05,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.0
  },
  {
    "id": 249,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Rank heroes published by Marvel Comics by their height in descending order.",
    "gold_sql": "select superhero_name, height_cm, rank() over (order by height_cm desc) as heightrank from superhero inner join publisher on superhero.publisher_id = publisher.id where publisher.publisher_name = 'marvel comics'",
    "pred_sql": "select superhero_name, full_name, height_cm from superhero where publisher_id = 2 order by height_cm desc",
    "exec_time": 68.63,
    "ex": false,
    "sm": false,
    "cm": 0.25,
    "ast": 0.0
  },
  {
    "id": 250,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.",
    "gold_sql": "select colour.colour as eyecolor, count(superhero.id) as count, rank() over (order by count(superhero.id) desc) as popularityrank from superhero inner join colour on superhero.eye_colour_id = colour.id inner join publisher on superhero.publisher_id = publisher.id where publisher.publisher_name = 'marvel comics' group by colour.colour",
    "pred_sql": "with eye_color_popularity as (select eye_colour_id, count(*) as popularity from hero_attribute where attribute_id = (select id from attribute where attribute_name = 'eye color') group by eye_colour_id order by popularity desc) select s.superhero_name, s.eye_colour_id from superhero s join eye_color_popularity ep on s.eye_colour_id = ep.eye_colour_id order by ep.popularity desc",
    "exec_time": 116.69,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 251,
    "db_id": "superhero",
    "difficulty": "challenging",
    "question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "gold_sql": "select superhero_name from superhero as t1 where exists (select 1 from hero_power as t2 inner join superpower as t3 on t2.power_id = t3.id where t3.power_name = 'super strength' and t1.id = t2.hero_id)and exists (select 1 from publisher as t4 where t4.publisher_name = 'marvel comics' and t1.publisher_id = t4.id)",
    "pred_sql": "select superhero_name from superhero where publisher_id = (select id from publisher where publisher_name = 'marvel comics') and id in (select hero_id from hero_power where power_id = (select id from superpower where power_name = 'super strength'))",
    "exec_time": 87.96,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.25688073394495414
  },
  {
    "id": 252,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Which publisher published the slowest superhero?",
    "gold_sql": "select t2.publisher_name from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id inner join hero_attribute as t3 on t1.id = t3.hero_id inner join attribute as t4 on t3.attribute_id = t4.id where t4.attribute_name = 'speed' order by t3.attribute_value limit 1",
    "pred_sql": "select publisher_name from publisher where id = (select publisher_id from superhero where height_cm = (select max(height_cm) from superhero)) limit 1",
    "exec_time": 73.26,
    "ex": false,
    "sm": false,
    "cm": 0.4,
    "ast": 0.0
  },
  {
    "id": 253,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "How many gold-eyed superheroes did Marvel Comics publish?",
    "gold_sql": "select count(t1.id) from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id inner join colour as t3 on t1.eye_colour_id = t3.id where t2.publisher_name = 'marvel comics' and t3.colour = 'gold'",
    "pred_sql": "select count(*) from superhero where eye_colour_id = (select id from colour where colour = 'gold') and publisher_id = (select id from publisher where publisher_name = 'marvel comics')",
    "exec_time": 83.99,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.34693877551020413
  },
  {
    "id": 254,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Who is the dumbest superhero?",
    "gold_sql": "select t1.superhero_name from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id inner join attribute as t3 on t2.attribute_id = t3.id where t3.attribute_name = 'intelligence' order by t2.attribute_value limit 1",
    "pred_sql": "select superhero_name from superhero order by attribute_value asc limit 1",
    "exec_time": 71.83,
    "ex": false,
    "sm": false,
    "cm": 0.6,
    "ast": 0.4285714285714286
  },
  {
    "id": 255,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "What is Copycat's race?",
    "gold_sql": "select t2.race from superhero as t1 inner join race as t2 on t1.race_id = t2.id where t1.superhero_name = 'copycat'",
    "pred_sql": "select race from superhero where superhero_name = 'copycat' limit 1",
    "exec_time": 76.03,
    "ex": false,
    "sm": false,
    "cm": 0.5,
    "ast": 0.30000000000000004
  },
  {
    "id": 256,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "Which superheroes have a durability attribute value of less than 50?",
    "gold_sql": "select superhero_name from superhero as t1 where exists (select 1 from hero_attribute as t2 inner join attribute as t3 on t2.attribute_id = t3.id where t3.attribute_name = 'durability' and t2.attribute_value < 50 and t1.id = t2.hero_id)",
    "pred_sql": "select superhero_name from superhero where skin_colour_id in (select id from colour where colour = 'no colour') and id in (select hero_id from hero_attribute where attribute_id = (select id from attribute where attribute_name = 'durability')) and attribute_value < 50",
    "exec_time": 100.81,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 257,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "What are the names of the superheroes with the power of death touch?",
    "gold_sql": "select t1.superhero_name from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id where t3.power_name = 'death touch'",
    "pred_sql": "select superhero.superhero_name from superhero join hero_power on superhero.id = hero_power.hero_id join superpower on hero_power.power_id = superpower.id where superpower.power_name = 'death touch'",
    "exec_time": 76.78,
    "ex": true,
    "sm": false,
    "cm": 1.0,
    "ast": 0.23809523809523814
  },
  {
    "id": 258,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "How many female superheroes have a strength value of 100?",
    "gold_sql": "select count(t1.id) from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id inner join attribute as t3 on t2.attribute_id = t3.id inner join gender as t4 on t1.gender_id = t4.id where t3.attribute_name = 'strength' and t2.attribute_value = 100 and t4.gender = 'female'",
    "pred_sql": "select count(*) from superhero where gender_id = 2 and attribute_value in (select attribute_value from hero_attribute where attribute_id = (select id from attribute where attribute_name = 'strength'))",
    "exec_time": 77.73,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.014925373134328401
  },
  {
    "id": 259,
    "db_id": "superhero",
    "difficulty": "challenging",
    "question": "What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics.",
    "gold_sql": "select (cast(count(*) as real) * 100 / (select count(*) from superhero)), cast(sum(case when t2.publisher_name = 'marvel comics' then 1 else 0 end) as real) from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id inner join alignment as t3 on t3.id = t1.alignment_id where t3.alignment = 'bad'",
    "pred_sql": "select cast(sum(case when t2.alignment = 'good' then 1 else 0 end) as real) * 100 / count(*) as percentage, count(*) as total from superhero as t1 inner join hero_power as t3 on t1.id = t3.hero_id inner join superpower as t4 on t3.power_id = t4.id inner join hero_attribute as t5 on t1.id = t5.hero_id inner join attribute as t6 on",
    "exec_time": 120.05,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 260,
    "db_id": "superhero",
    "difficulty": "challenging",
    "question": "Between DC and Marvel Comics, which publisher has published more superheroes? Find the difference in the number of superheroes they have published.",
    "gold_sql": "select sum(case when t2.publisher_name = 'marvel comics' then 1 else 0 end) - sum(case when t2.publisher_name = 'dc comics' then 1 else 0 end) from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id",
    "pred_sql": "select sum(case when t1.publisher_id = 2 then 1 else 0 end) - sum(case when t1.publisher_id = 1 then 1 else 0 end) as difference from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id",
    "exec_time": 95.69,
    "ex": false,
    "sm": false,
    "cm": 0.5,
    "ast": 0.7380952380952381
  },
  {
    "id": 261,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "Give the publisher ID of Star Trek.",
    "gold_sql": "select id from publisher where publisher_name = 'star trek'",
    "pred_sql": "select id from publisher where publisher_name = 'star trek' limit 1",
    "exec_time": 63.0,
    "ex": true,
    "sm": false,
    "cm": 0.75,
    "ast": 0.8888888888888888
  },
  {
    "id": 262,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "What is the total number of superheroes without full name?",
    "gold_sql": "select count(id) from superhero where full_name is null",
    "pred_sql": "select count(id) from superhero where full_name is null",
    "exec_time": 62.83,
    "ex": true,
    "sm": true,
    "cm": 1.0,
    "ast": 1.0
  },
  {
    "id": 263,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "What is the average weight of all female superheroes?",
    "gold_sql": "select avg(t1.weight_kg) from superhero as t1 inner join gender as t2 on t1.gender_id = t2.id where t2.gender = 'female'",
    "pred_sql": "select avg(weight_kg) from superhero where gender_id = (select id from gender where gender = 'female')",
    "exec_time": 67.01,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.3548387096774194
  },
  {
    "id": 264,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "List down at least five superpowers of male superheroes.",
    "gold_sql": "select t3.power_name from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t3.id = t2.power_id inner join gender as t4 on t4.id = t1.gender_id where t4.gender = 'male' limit 5",
    "pred_sql": "select t2.power_name from superhero as t1 inner join hero_power as t3 on t1.id = t3.hero_id inner join superpower as t2 on t3.power_id = t2.id where t1.gender_id = 1 group by t2.power_name limit 5",
    "exec_time": 92.93,
    "ex": false,
    "sm": false,
    "cm": 0.4,
    "ast": 0.6071428571428572
  },
  {
    "id": 265,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Among the superheroes with height from 170 to 190, list the names of the superheroes with no eye color.",
    "gold_sql": "select distinct t1.superhero_name from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id where t1.height_cm between 170 and 190 and t2.colour = 'no colour'",
    "pred_sql": "select superhero_name from superhero where height_cm between 170 and 190 and eye_colour_id is null",
    "exec_time": 82.55,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.39534883720930236
  },
  {
    "id": 266,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Provide the hair colour of the human superhero who is 185 cm tall.",
    "gold_sql": "select distinct t3.colour from superhero as t1 inner join race as t2 on t1.race_id = t2.id inner join colour as t3 on t1.hair_colour_id = t3.id where t1.height_cm = 185 and t2.race = 'human'",
    "pred_sql": "select t2.colour from superhero as t1 inner join colour as t2 on t1.hair_colour_id = t2.id where t1.height_cm = 185 and t1.gender_id = (select id from gender where gender = 'male')",
    "exec_time": 92.26,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.34693877551020413
  },
  {
    "id": 267,
    "db_id": "superhero",
    "difficulty": "challenging",
    "question": "In superheroes with height between 150 to 180, what is the percentage of heroes published by Marvel Comics?",
    "gold_sql": "select cast(count(case when t2.publisher_name = 'marvel comics' then 1 else null end) as real) * 100 / count(t1.id) from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id where t1.height_cm between 150 and 180",
    "pred_sql": "select cast(sum(case when t2.publisher_name = 'marvel comics' then 1 else 0 end) as real) * 100 / count(t1.id) from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id where t1.height_cm between 150 and 180",
    "exec_time": 100.72,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.9038461538461539
  },
  {
    "id": 268,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Among the male superheroes, list the super hero names of superheroes with weight greater than the 79% average weight of all superheroes.",
    "gold_sql": "select t1.superhero_name from superhero as t1 inner join gender as t2 on t1.gender_id = t2.id where t2.gender = 'male' and t1.weight_kg * 100 > ( select avg(weight_kg) from superhero ) * 79",
    "pred_sql": "select superhero_name from superhero where gender_id = 1 and weight_kg > (select avg(weight_kg) from superhero) and gender_id in (select id from gender where gender = 'male')",
    "exec_time": 84.4,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.1311475409836066
  },
  {
    "id": 269,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "What are the superpowers of heroes with ID 1?",
    "gold_sql": "select distinct t2.power_name from hero_power as t1 inner join superpower as t2 on t1.power_id = t2.id where t1.hero_id = 1",
    "pred_sql": "select t3.power_name from superhero as t1 join hero_power as t2 on t1.id = t2.hero_id join superpower as t3 on t2.power_id = t3.id where t1.id = 1",
    "exec_time": 85.16,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.5161290322580645
  },
  {
    "id": 270,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "How many heroes have stealth power?",
    "gold_sql": "select count(t1.hero_id) from hero_power as t1 inner join superpower as t2 on t1.power_id = t2.id where t2.power_name = 'stealth'",
    "pred_sql": "select count(distinct t1.hero_id) from hero_power as t1 inner join superpower as t2 on t1.power_id = t2.id where t2.power_name = 'stealth'",
    "exec_time": 81.08,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.9032258064516129
  },
  {
    "id": 271,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "What is the hero's full name with the highest attribute in strength?",
    "gold_sql": "select t1.full_name from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id inner join attribute as t3 on t2.attribute_id = t3.id where t3.attribute_name = 'strength' order by t2.attribute_value desc limit 1",
    "pred_sql": "select superhero.full_name from superhero join hero_attribute on superhero.id = hero_attribute.hero_id join attribute on hero_attribute.attribute_id = attribute.id where attribute.attribute_name = 'strength' order by attribute_value desc limit 1",
    "exec_time": 85.5,
    "ex": true,
    "sm": false,
    "cm": 1.0,
    "ast": 0.0
  },
  {
    "id": 272,
    "db_id": "superhero",
    "difficulty": "challenging",
    "question": "Which superhero has the most durability published by Dark Horse Comics?",
    "gold_sql": "select t1.superhero_name from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id inner join attribute as t3 on t3.id = t2.attribute_id inner join publisher as t4 on t4.id = t1.publisher_id where t4.publisher_name = 'dark horse comics' and t3.attribute_name = 'durability' order by t2.attribute_value desc limit 1",
    "pred_sql": "select superhero_name from superhero where publisher_id = (select id from publisher where publisher_name = 'dark horse comics') order by weight_kg desc limit 1",
    "exec_time": 76.8,
    "ex": true,
    "sm": false,
    "cm": 0.4,
    "ast": 0.3880597014925373
  },
  {
    "id": 273,
    "db_id": "superhero",
    "difficulty": "challenging",
    "question": "List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics.",
    "gold_sql": "select t1.eye_colour_id, t1.hair_colour_id, t1.skin_colour_id from superhero as t1 inner join publisher as t2 on t2.id = t1.publisher_id inner join gender as t3 on t3.id = t1.gender_id where t2.publisher_name = 'dark horse comics' and t3.gender = 'female'",
    "pred_sql": "select t3.colour as eye_colour, t4.colour as hair_colour, t5.colour as skin_colour from superhero as t1 inner join gender as t2 on t1.gender_id = t2.id inner join colour as t3 on t1.eye_colour_id = t3.id inner join colour as t4 on t1.hair_colour_id = t4.id inner join colour as t5 on t1.skin_colour_id = t5.id inner join publisher as t6 on",
    "exec_time": 118.54,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.2068965517241379
  },
  {
    "id": 274,
    "db_id": "superhero",
    "difficulty": "challenging",
    "question": "Which superhero has the same eyes, hair and skin colour? Indicate the publisher of the superhero.",
    "gold_sql": "select t1.superhero_name, t2.publisher_name from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id where t1.eye_colour_id = t1.hair_colour_id and t1.eye_colour_id = t1.skin_colour_id",
    "pred_sql": "select t1.publisher_name from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id inner join colour as t3 on t1.hair_colour_id = t3.id inner join colour as t4 on t1.skin_colour_id = t4.id where t2.id = t3.id and t3.id = t4.id",
    "exec_time": 109.3,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.33333333333333337
  },
  {
    "id": 275,
    "db_id": "superhero",
    "difficulty": "challenging",
    "question": "What is the percentage of blue female superheroes among all female superheroes?",
    "gold_sql": "select cast(count(case when t3.colour = 'blue' then t1.id else null end) as real) * 100 / count(t1.id) from superhero as t1 inner join gender as t2 on t1.gender_id = t2.id inner join colour as t3 on t1.skin_colour_id = t3.id where t2.gender = 'female'",
    "pred_sql": "select cast(sum(case when t2.colour = 'blue' then 1 else 0 end) as real) * 100 / count(t1.id) from superhero as t1 inner join colour as t2 on t1.hair_colour_id = t2.id inner join gender as t3 on t1.gender_id = t3.id where t3.gender = 'female' and t2.colour = 'blue'",
    "exec_time": 112.6,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.6166666666666667
  },
  {
    "id": 276,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "How many powers does Amazo hero have?",
    "gold_sql": "select count(t1.power_id) from hero_power as t1 inner join superhero as t2 on t1.hero_id = t2.id where t2.superhero_name = 'amazo'",
    "pred_sql": "select count(distinct power_id) from hero_power where hero_id = (select id from superhero where superhero_name = 'amazo')",
    "exec_time": 72.42,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.22580645161290325
  },
  {
    "id": 277,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "Provide the heights of the heroes whose eye colours are amber.",
    "gold_sql": "select t1.height_cm from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id where t2.colour = 'amber'",
    "pred_sql": "select t3.height_cm from colour as t1 inner join superhero as t2 on t1.id = t2.eye_colour_id inner join alignment as t3 on t2.alignment_id = t3.id where t1.colour = 'amber'",
    "exec_time": 86.65,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.43333333333333335
  },
  {
    "id": 278,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "List the heroes' names whose eyes and hair colours are both black.",
    "gold_sql": "select t1.superhero_name from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id and t1.hair_colour_id = t2.id where t2.colour = 'black'",
    "pred_sql": "select superhero_name from superhero where eye_colour_id = (select id from colour where colour = 'black') and hair_colour_id = (select id from colour where colour = 'black')",
    "exec_time": 77.04,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.052631578947368474
  },
  {
    "id": 279,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "Describe the names of neutral alignment superheroes.",
    "gold_sql": "select t1.superhero_name from superhero as t1 inner join alignment as t2 on t1.alignment_id = t2.id where t2.alignment = 'neutral'",
    "pred_sql": "select superhero_name from superhero where alignment_id = (select id from alignment where alignment = 'neutral')",
    "exec_time": 66.57,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.33333333333333337
  },
  {
    "id": 280,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "How many heroes have the highest attribute value in strength?",
    "gold_sql": "select count(t1.hero_id) from hero_attribute as t1 inner join attribute as t2 on t1.attribute_id = t2.id where t2.attribute_name = 'strength' and t1.attribute_value = ( select max(attribute_value) from hero_attribute )",
    "pred_sql": "select count(distinct hero_id) from hero_attribute where attribute_id = (select id from attribute where attribute_name = 'strength') and attribute_value = (select max(attribute_value) from hero_attribute where attribute_id = (select id from attribute where attribute_name = 'strength'))",
    "exec_time": 90.78,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.13793103448275867
  },
  {
    "id": 281,
    "db_id": "superhero",
    "difficulty": "challenging",
    "question": "How many percent of female heroes were published by Marvel Comics?",
    "gold_sql": "select cast(count(case when t3.gender = 'female' and t2.publisher_name = 'marvel comics' then 1 else null end) as real) / count(case when t2.publisher_name = 'marvel comics' then 1 else null end) * 100 from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id inner join gender as t3 on t1.gender_id = t3.id",
    "pred_sql": "select cast(sum(case when t2.gender = 'female' then 1 else 0 end) as real) * 100 / count(t1.id) from superhero as t1 inner join gender as t2 on t1.gender_id = t2.id inner join publisher as t3 on t1.publisher_id = t3.id where t3.publisher_name = 'marvel comics'",
    "exec_time": 112.15,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.4375
  },
  {
    "id": 282,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Calculate the difference between Emil Blonsky's weight and Charles Chandler's weight.",
    "gold_sql": "select ( select weight_kg from superhero where full_name like 'emil blonsky' ) - ( select weight_kg from superhero where full_name like 'charles chandler' ) as calculate",
    "pred_sql": "select (t1.weight_kg - t2.weight_kg) as weight_difference from superhero as t1 inner join superhero as t2 on t1.superhero_name = 'emil blonsky' and t2.superhero_name = 'charles chandler'",
    "exec_time": 88.02,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.14634146341463417
  },
  {
    "id": 283,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "Calculate the average height for all superhero.",
    "gold_sql": "select cast(sum(height_cm) as real) / count(id) from superhero",
    "pred_sql": "select avg(height_cm) from superhero",
    "exec_time": 61.32,
    "ex": false,
    "sm": false,
    "cm": 0.5,
    "ast": 0.5
  },
  {
    "id": 284,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "What is Abomination's superpower?",
    "gold_sql": "select t3.power_name from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id where t1.superhero_name = 'abomination'",
    "pred_sql": "select t2.power_name from superhero as t1 inner join hero_power as t3 on t1.id = t3.hero_id inner join superpower as t2 on t3.power_id = t2.id where t1.superhero_name = 'abomination'",
    "exec_time": 89.24,
    "ex": true,
    "sm": false,
    "cm": 1.0,
    "ast": 0.7619047619047619
  },
  {
    "id": 285,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Which hero was the fastest?",
    "gold_sql": "select t1.superhero_name from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id inner join attribute as t3 on t2.attribute_id = t3.id where t3.attribute_name = 'speed' order by t2.attribute_value desc limit 1",
    "pred_sql": "select superhero_name from superhero where race_id = (select id from race where race = 'alpha') order by height_cm asc limit 1",
    "exec_time": 71.17,
    "ex": true,
    "sm": false,
    "cm": 0.4,
    "ast": 0.12244897959183676
  },
  {
    "id": 286,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "State all of 3-D Man's attributes along with their values.",
    "gold_sql": "select t3.attribute_name, t2.attribute_value from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id inner join attribute as t3 on t2.attribute_id = t3.id where t1.superhero_name = '3-d man'",
    "pred_sql": "select ha.attribute_id, ha.attribute_value from hero_attribute ha join superhero s on ha.hero_id = s.id where s.superhero_name = '3-d man' limit 3",
    "exec_time": 81.35,
    "ex": true,
    "sm": false,
    "cm": 0.25,
    "ast": 0.2978723404255319
  },
  {
    "id": 287,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Which superheroes have blue eyes with brown hair?",
    "gold_sql": "select t1.superhero_name from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id inner join colour as t3 on t1.hair_colour_id = t3.id where t2.colour = 'blue' and t3.colour = 'brown'",
    "pred_sql": "select superhero_name from superhero where eye_colour_id = (select id from colour where colour = 'blue') and hair_colour_id = (select id from colour where colour = 'brown')",
    "exec_time": 81.06,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.35416666666666663
  },
  {
    "id": 288,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "What is the publisher for Hawkman, Karate Kid and Speedy?",
    "gold_sql": "select t2.publisher_name from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id where t1.superhero_name in ('hawkman', 'karate kid', 'speedy')",
    "pred_sql": "select t3.publisher_name from superhero as t1 inner join publisher as t3 on t1.publisher_id = t3.id where t1.superhero_name in ('hawkman', 'karate kid', 'speedy')",
    "exec_time": 84.79,
    "ex": true,
    "sm": false,
    "cm": 1.0,
    "ast": 0.78125
  },
  {
    "id": 289,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Calculate the percentage of superheroes with blue eyes.",
    "gold_sql": "select cast(count(case when t2.colour = 'blue' then 1 else null end) as real) * 100 / count(t1.id) from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id",
    "pred_sql": "select cast(count(case when t2.colour = 'blue' then 1 else null end) as real) * 100 / count(*) from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id where t2.colour = 'blue'",
    "exec_time": 95.61,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.75
  },
  {
    "id": 290,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Find the ratio between male superheroes and female superheroes.",
    "gold_sql": "select cast(count(case when t2.gender = 'male' then t1.id else null end) as real) / count(case when t2.gender = 'female' then t1.id else null end) from superhero as t1 inner join gender as t2 on t1.gender_id = t2.id",
    "pred_sql": "select cast(sum(case when t2.gender = 'male' then 1 else 0 end) as real) / sum(case when t2.gender = 'female' then 1 else 0 end) from superhero as t1 inner join gender as t2 on t1.gender_id = t2.id",
    "exec_time": 95.64,
    "ex": true,
    "sm": false,
    "cm": 0.5,
    "ast": 0.6666666666666667
  },
  {
    "id": 291,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.",
    "gold_sql": "select t2.colour from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id where t1.full_name = 'karen beecher-duncan'",
    "pred_sql": "select t1.eye_colour_id from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id where t1.full_name = 'karen beecher-duncan'",
    "exec_time": 83.47,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.7666666666666666
  },
  {
    "id": 292,
    "db_id": "superhero",
    "difficulty": "challenging",
    "question": "In superheroes with missing weight data, calculate the difference between the number of superheroes with blue eyes and no eye color.",
    "gold_sql": "select sum(case when t2.id = 7 then 1 else 0 end) - sum(case when t2.id = 1 then 1 else 0 end) from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id where t1.weight_kg = 0 or t1.weight_kg is null",
    "pred_sql": "select (select count(*) from superhero where eye_colour_id = (select id from colour where colour = 'blue') and eye_colour_id is null) - (select count(*) from superhero where eye_colour_id = (select id from colour where colour = 'no colour') and eye_colour_id is null) as difference",
    "exec_time": 96.62,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 293,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "How many green-skinned villains are there in the superhero universe?",
    "gold_sql": "select count(t1.id) from superhero as t1 inner join alignment as t2 on t1.alignment_id = t2.id inner join colour as t3 on t1.skin_colour_id = t3.id where t2.alignment = 'bad' and t3.colour = 'green'",
    "pred_sql": "select count(*) from superhero where skin_colour_id = (select id from colour where colour = 'green') and alignment_id = (select id from alignment where alignment = 'bad')",
    "exec_time": 78.54,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.30612244897959184
  },
  {
    "id": 294,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Identify superheroes who can control wind and list their names in alphabetical order.",
    "gold_sql": "select t1.superhero_name from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id where t3.power_name = 'wind control' order by t1.superhero_name",
    "pred_sql": "select superhero_name from superhero where id in (select hero_id from hero_power where power_id = (select id from superpower where power_name = 'wind control')) order by superhero_name asc",
    "exec_time": 80.15,
    "ex": true,
    "sm": false,
    "cm": 0.75,
    "ast": 0.04255319148936165
  },
  {
    "id": 295,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Identify the gender of the superhero who has the ability of Phoenix Force.",
    "gold_sql": "select t4.gender from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id inner join gender as t4 on t1.gender_id = t4.id where t3.power_name = 'phoenix force'",
    "pred_sql": "select t1.gender from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id where t3.power_name = 'phoenix force'",
    "exec_time": 88.89,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.8518518518518519
  },
  {
    "id": 296,
    "db_id": "superhero",
    "difficulty": "challenging",
    "question": "Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes.",
    "gold_sql": "select sum(case when t2.publisher_name = 'dc comics' then 1 else 0 end) - sum(case when t2.publisher_name = 'marvel comics' then 1 else 0 end) from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id",
    "pred_sql": "select sum(case when t1.publisher_id = 2 then 1 else 0 end) - sum(case when t1.publisher_id = 1 then 1 else 0 end) as difference from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id",
    "exec_time": 98.17,
    "ex": false,
    "sm": false,
    "cm": 0.5,
    "ast": 0.7380952380952381
  },
  {
    "id": 297,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "Which user has a higher reputation, Harlan or Jarrod Dixon?",
    "gold_sql": "select displayname from users where displayname in ('harlan', 'jarrod dixon') and reputation = ( select max(reputation) from users where displayname in ('harlan', 'jarrod dixon') )",
    "pred_sql": "select displayname from users where displayname in ('harlan', 'jarrod dixon') order by reputation desc limit 1",
    "exec_time": 216.75,
    "ex": true,
    "sm": false,
    "cm": 0.4,
    "ast": 0.4528301886792453
  },
  {
    "id": 298,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "Please list the display names of all the users whose accounts were created in the year 2011.",
    "gold_sql": "select displayname from users where strftime('%y', creationdate) = '2011'",
    "pred_sql": "select displayname from users where year(creationdate) = 2011",
    "exec_time": 170.58,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.5238095238095238
  },
  {
    "id": 299,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "How many users last accessed the website after 2014/9/1?",
    "gold_sql": "select count(id) from users where date(lastaccessdate) > '2014-09-01'",
    "pred_sql": "select count(*) from users where lastaccessdate > '2014-09-01 00:00:00'",
    "exec_time": 180.17,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.40909090909090906
  },
  {
    "id": 300,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "Who is the owner of the post \"Eliciting priors from experts\"?",
    "gold_sql": "select t2.displayname from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t1.title = 'eliciting priors from experts'",
    "pred_sql": "select owneruserid from posts where title = 'eliciting priors from experts'",
    "exec_time": 184.88,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.43333333333333335
  },
  {
    "id": 301,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "How many posts does the user csgillespie own?",
    "gold_sql": "select count(t1.id) from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t2.displayname = 'csgillespie'",
    "pred_sql": "select count(*) from posts where owneruserid = (select id from users where displayname = 'csgillespie')",
    "exec_time": 173.74,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.29032258064516125
  },
  {
    "id": 302,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
    "gold_sql": "select t2.displayname from posts as t1 inner join users as t2 on t1.lasteditoruserid = t2.id where t1.title = 'examples for teaching: correlation does not mean causation'",
    "pred_sql": "select t2.displayname from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t1.title = 'examples for teaching: correlation does not mean causation' order by t1.lasteditdate desc limit 1",
    "exec_time": 198.65,
    "ex": true,
    "sm": false,
    "cm": 0.6,
    "ast": 0.8
  },
  {
    "id": 303,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "Among the posts owned by an elder user, how many of them have a score of over 19?",
    "gold_sql": "select count(t1.id) from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t1.score >= 20 and t2.age > 65",
    "pred_sql": "select count(*) from posts where owneruserid in (select id from users where age > 30) and score > 19",
    "exec_time": 179.85,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 304,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "From which post is the tag \"bayesian\" excerpted from? Please give the body of the post.",
    "gold_sql": "select t2.body from tags as t1 inner join posts as t2 on t2.id = t1.excerptpostid where t1.tagname = 'bayesian'",
    "pred_sql": "select t1.body from posts as t1 join tags as t2 on t1.id = t2.excerptpostid where t2.tagname = 'bayesian'",
    "exec_time": 183.55,
    "ex": true,
    "sm": false,
    "cm": 1.0,
    "ast": 0.6666666666666667
  },
  {
    "id": 305,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "What is the average score of the posts owned by the user csgillespie?",
    "gold_sql": "select avg(t1.score) from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t2.displayname = 'csgillespie'",
    "pred_sql": "select avg(t1.score) from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t2.displayname = 'csgillespie'",
    "exec_time": 183.28,
    "ex": true,
    "sm": true,
    "cm": 1.0,
    "ast": 1.0
  },
  {
    "id": 306,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "Among the posts with a score of over 5, what is the percentage of them being owned by an elder user?",
    "gold_sql": "select cast(sum(iif(t2.age > 65, 1, 0)) as real) * 100 / count(t1.id) from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t1.score > 5",
    "pred_sql": "select cast(sum(case when u.age > 30 then 1 else 0 end) as real) * 100 / count(*) from posts p join users u on p.owneruserid = u.id where p.score > 5",
    "exec_time": 196.88,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.48888888888888893
  },
  {
    "id": 307,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "User No.3025 gave a comment at 20:29:39 on 2014/4/23 to a post, how many favorite counts did that post get?",
    "gold_sql": "select t1.favoritecount from posts as t1 inner join comments as t2 on t1.id = t2.postid where t2.creationdate = '2014-04-23 20:29:39.0' and t2.userid = 3025",
    "pred_sql": "select favoritecount from posts where id = (select postid from comments where userid = 3025 and creationdate = '2014-04-23 20:29:39')",
    "exec_time": 196.94,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.4722222222222222
  },
  {
    "id": 308,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "User No.23853 gave a comment to a post at 9:08:18 on 2013/7/12, was that post well-finished?",
    "gold_sql": "select iif(t2.closeddate is null, 'not well-finished', 'well-finished') as resylt from comments as t1 inner join posts as t2 on t1.postid = t2.id where t1.userid = 23853 and t1.creationdate = '2013-07-12 09:08:18.0'",
    "pred_sql": "select p.title from posts p join comments c on p.id = c.postid where c.userid = 23853 and c.creationdate = '2013-07-12 09:08:18'",
    "exec_time": 203.73,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.2682926829268293
  },
  {
    "id": 309,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "For the user with the display name of \"Tiago Pasqualini\", how many posts did he/she own?",
    "gold_sql": "select count(t1.id) from users as t1 inner join posts as t2 on t1.id = t2.owneruserid where t1.displayname = 'tiago pasqualini'",
    "pred_sql": "select count(*) from posts where owneruserid = (select id from users where displayname = 'tiago pasqualini')",
    "exec_time": 173.92,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.16129032258064513
  },
  {
    "id": 310,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "Provide the display name of the user who made the vote No.6347.",
    "gold_sql": "select t1.displayname from users as t1 inner join votes as t2 on t1.id = t2.userid where t2.id = 6347",
    "pred_sql": "select t2.displayname from votes as t1 join users as t2 on t1.userid = t2.id where t1.id = 6347",
    "exec_time": 178.3,
    "ex": true,
    "sm": false,
    "cm": 1.0,
    "ast": 0.6
  },
  {
    "id": 311,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "For the user No.24, how many times is the number of his/her posts compared to his/her votes?",
    "gold_sql": "select cast(count(distinct t2.id) as real) / count(distinct t1.id) from votes as t1 inner join posts as t2 on t1.userid = t2.owneruserid where t1.userid = 24",
    "pred_sql": "select (select count(*) from posts where owneruserid = 24) / count(*) from votes where userid = 24",
    "exec_time": 178.13,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.0
  },
  {
    "id": 312,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
    "gold_sql": "select viewcount from posts where title = 'integration of weka and/or rapidminer into informatica powercenter/developer'",
    "pred_sql": "select viewcount from posts where title = 'integration of weka and/or rapidminer into informatica powercenter/developer'",
    "exec_time": 194.65,
    "ex": true,
    "sm": true,
    "cm": 1.0,
    "ast": 1.0
  },
  {
    "id": 313,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "Write the contents of comments with a score of 17.",
    "gold_sql": "select text from comments where score = 17",
    "pred_sql": "select * from comments where score = 17",
    "exec_time": 168.7,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.8333333333333334
  },
  {
    "id": 314,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "Name the user that commented 'thank you user93!'",
    "gold_sql": "select t1.displayname from users as t1 inner join comments as t2 on t1.id = t2.userid where t2.text = 'thank you user93!'",
    "pred_sql": "select t2.displayname from comments as t1 join users as t2 on t1.userid = t2.id where t1.text = 'thank you user93!'",
    "exec_time": 180.3,
    "ex": true,
    "sm": false,
    "cm": 1.0,
    "ast": 0.6333333333333333
  },
  {
    "id": 315,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "Which user made a post titled 'Understanding what Dassault iSight is doing?' and how much is the reputation of the user?",
    "gold_sql": "select t1.displayname, t1.reputation from users as t1 inner join posts as t2 on t1.id = t2.owneruserid where t2.title = 'understanding what dassault isight is doing?'",
    "pred_sql": "select displayname, reputation from users where id = (select userid from posts where title = 'understanding what dassault isight is doing?')",
    "exec_time": 178.99,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.2857142857142857
  },
  {
    "id": 316,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "Who is the owner of the post titled 'Open source tools for visualizing multi-dimensional data?'",
    "gold_sql": "select t2.displayname from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t1.title = 'open source tools for visualizing multi-dimensional data?'",
    "pred_sql": "select t2.owneruserid from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t1.title = 'open source tools for visualizing multi-dimensional data?'",
    "exec_time": 185.53,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.8666666666666667
  },
  {
    "id": 317,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "Write all the comments left by users who edited the post titled 'Why square the difference instead of taking the absolute value in standard deviation?'",
    "gold_sql": "select t2.comment from posts as t1 inner join posthistory as t2 on t1.id = t2.postid where t1.title = 'why square the difference instead of taking the absolute value in standard deviation?'",
    "pred_sql": "select text from posthistory where postid = (select id from posts where title = 'why square the difference instead of taking the absolute value in standard deviation?') and userdisplayname is not null and comment is not null",
    "exec_time": 207.81,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 318,
    "db_id": "codebase_community",
    "difficulty": "challenging",
    "question": "Which user added a bounty amount of 50 to the post title mentioning variance?",
    "gold_sql": "select t3.displayname, t1.title from posts as t1 inner join votes as t2 on t1.id = t2.postid inner join users as t3 on t3.id = t2.userid where t2.bountyamount = 50 and t1.title like '%variance%'",
    "pred_sql": "select userid from votes where bountyamount = 50 and postid in (select id from posts where title like '%variance%')",
    "exec_time": 196.76,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.07547169811320753
  },
  {
    "id": 319,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "Calculate the average view count of each post tagged as 'humor' and list the title and the comment of each post.",
    "gold_sql": "select avg(t2.viewcount), t2.title, t1.text from comments as t1 inner join posts as t2 on t2.id = t1.postid where t2.tags = '<humor>' group by t2.title, t1.text",
    "pred_sql": "select t1.title , t1.comment from posts as t1 join tags as t2 on t1.id = t2.excerptpostid where t2.tagname = 'humor' group by t1.id",
    "exec_time": 188.88,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.5208333333333333
  },
  {
    "id": 320,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "How many users are awarded with more than 5 badges?",
    "gold_sql": "select count(userid) from ( select userid, count(name) as num from badges group by userid ) t where t.num > 5",
    "pred_sql": "select count(distinct userid) from badges where id in (select userid from badges group by userid having count(id) > 5)",
    "exec_time": 178.03,
    "ex": false,
    "sm": false,
    "cm": 0.5,
    "ast": 0.2325581395348837
  },
  {
    "id": 321,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "Which user have only one post history per post and having at least 1000 views?",
    "gold_sql": "select t2.userid from users as t1 inner join posthistory as t2 on t1.id = t2.userid inner join posts as t3 on t2.postid = t3.id where t3.viewcount >= 1000 group by t2.userid having count(distinct t2.posthistorytypeid) = 1",
    "pred_sql": "select userid from posthistory group by userid having count(id) = 1 and sum(viewcount) >= 1000",
    "exec_time": 193.1,
    "ex": false,
    "sm": false,
    "cm": 0.5,
    "ast": 0.31481481481481477
  },
  {
    "id": 322,
    "db_id": "codebase_community",
    "difficulty": "challenging",
    "question": "What is the percentage difference of student badges given during 2010 and 2011?",
    "gold_sql": "select cast(sum(iif(strftime('%y', date) = '2010', 1, 0)) as real) * 100 / count(id) - cast(sum(iif(strftime('%y', date) = '2011', 1, 0)) as real) * 100 / count(id) from badges where name = 'student'",
    "pred_sql": "select cast(sum(case when strftime('%y', date) = '2011' then 1 else 0 end) as real) * 100 / sum(case when strftime('%y', date) = '2010' then 1 else 0 end) from badges",
    "exec_time": 222.99,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.5689655172413793
  },
  {
    "id": 323,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "What is the average of the up votes and the average user age for users creating more than 10 posts?",
    "gold_sql": "select avg(t1.upvotes), avg(t1.age) from users as t1 inner join ( select owneruserid, count(*) as post_count from posts group by owneruserid having post_count > 10) as t2 on t1.id = t2.owneruserid",
    "pred_sql": "select avg(upvotes), avg(age) from users where id in (select userid from posts group by userid having count(id) > 10)",
    "exec_time": 185.78,
    "ex": false,
    "sm": false,
    "cm": 0.5,
    "ast": 0.20370370370370372
  },
  {
    "id": 324,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "Calculate the ratio of votes in 2010 and 2011.",
    "gold_sql": "select cast(sum(iif(strftime('%y', creationdate) = '2010', 1, 0)) as real) / sum(iif(strftime('%y', creationdate) = '2011', 1, 0)) from votes",
    "pred_sql": "select cast(sum(case when strftime('%y', creationdate) = '2010', 1, 0) as real) / sum(case when strftime('%y', creationdate) = '2011', 1, 0) from votes",
    "exec_time": 209.28,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 325,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "Which post by slashnick has the most answers count? State the post ID.",
    "gold_sql": "select t2.postid from users as t1 inner join posthistory as t2 on t1.id = t2.userid inner join posts as t3 on t2.postid = t3.id where t1.displayname = 'slashnick' order by t3.answercount desc limit 1",
    "pred_sql": "select id from posts where owneruserid = (select userid from users where displayname = 'slashnick') order by answercount desc limit 1",
    "exec_time": 176.23,
    "ex": false,
    "sm": false,
    "cm": 0.4,
    "ast": 0.34693877551020413
  },
  {
    "id": 326,
    "db_id": "codebase_community",
    "difficulty": "challenging",
    "question": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?",
    "gold_sql": "select t1.displayname from users as t1 inner join posthistory as t2 on t1.id = t2.userid inner join posts as t3 on t2.postid = t3.id where t1.displayname = 'harvey motulsky' or t1.displayname = 'noah snyder' group by t1.displayname order by sum(t3.viewcount) desc limit 1",
    "pred_sql": "select id from posts where owneruserid in (select id from users where displayname like 'harvey motulsky') union select id from posts where owneruserid in (select id from users where displayname like 'noah snyder') order by (answercount + commentcount + favoritecount) desc limit 1",
    "exec_time": 200.49,
    "ex": false,
    "sm": false,
    "cm": 0.16666666666666666,
    "ast": 0.0
  },
  {
    "id": 327,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "State all the tags used by Mark Meckes in his posts that doesn't have comments.",
    "gold_sql": "select t3.tags from users as t1 inner join posthistory as t2 on t1.id = t2.userid inner join posts as t3 on t3.id = t2.postid where t1.displayname = 'mark meckes' and t3.commentcount = 0",
    "pred_sql": "select t1.tagname from tags as t1 join posts as t2 on t1.id = t2.tagid where t2.owneruserid = (select userid from users where displayname = 'mark meckes') and t2.id not in (select postid from comments)",
    "exec_time": 199.65,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.08333333333333337
  },
  {
    "id": 328,
    "db_id": "codebase_community",
    "difficulty": "challenging",
    "question": "Based on posts posted by Community, calculate the percentage of posts that use the R language.",
    "gold_sql": "select cast(sum(iif(t3.tagname = 'r', 1, 0)) as real) * 100 / count(t1.id) from users as t1 inner join posthistory as t2 on t1.id = t2.userid inner join tags as t3 on t3.excerptpostid = t2.postid where t1.displayname = 'community'",
    "pred_sql": "select cast(sum(case when t2.tagname = 'r' then 1 else 0 end) as real) * 100 / count(*) from posts as t1 inner join tags as t2 on t1.id = t2.excerptpostid where t1.owneruserid = -1 and t2.tagname = 'r'",
    "exec_time": 205.93,
    "ex": true,
    "sm": false,
    "cm": 0.0,
    "ast": 0.49122807017543857
  },
  {
    "id": 329,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "Calculate the difference in view count from post posted by Mornington and view count from posts posted by Amos.",
    "gold_sql": "select sum(iif(t1.displayname = 'mornington', t3.viewcount, 0)) - sum(iif(t1.displayname = 'amos', t3.viewcount, 0)) as diff from users as t1 inner join posthistory as t2 on t1.id = t2.userid inner join posts as t3 on t3.id = t2.postid",
    "pred_sql": "select sum(case when t1.owneruserid = (select id from users where displayname = 'mornington') then t1.viewcount else 0 end) - sum(case when t1.owneruserid = (select id from users where displayname = 'amos') then t1.viewcount else 0 end) as difference from posts as t1",
    "exec_time": 220.27,
    "ex": true,
    "sm": false,
    "cm": 0.0,
    "ast": 0.3035714285714286
  },
  {
    "id": 330,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "What is the average monthly number of links created in 2010 for posts that have no more than 2 answers?",
    "gold_sql": "select cast(count(t1.id) as real) / 12 from postlinks as t1 inner join posts as t2 on t1.postid = t2.id where t2.answercount <= 2 and strftime('%y', t1.creationdate) = '2010'",
    "pred_sql": "select avg(cast(count(*) as real) / 12) as avgmonthlylinks from postlinks where year(creationdate) = 2010 and postid in ( select id from posts where posttypeid = 1 and acceptedanswerid is null and answercount <= 2 )",
    "exec_time": 208.02,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 331,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "When did 'chl' cast its first vote in a post?",
    "gold_sql": "select t2.creationdate from users as t1 inner join votes as t2 on t1.id = t2.userid where t1.displayname = 'chl' order by t2.creationdate limit 1",
    "pred_sql": "select t2.creationdate from users as t1 inner join votes as t2 on t1.id = t2.userid where t1.displayname = 'chl' limit 1",
    "exec_time": 182.26,
    "ex": true,
    "sm": false,
    "cm": 0.8,
    "ast": 0.9189189189189189
  },
  {
    "id": 332,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "gold_sql": "select t1.displayname from users as t1 inner join badges as t2 on t1.id = t2.userid where t2.`name` = 'autobiographer' order by t2.date limit 1",
    "pred_sql": "select t2.displayname from badges as t1 join users as t2 on t1.userid = t2.id where t1.name = 'autobiographer' order by t1.date asc limit 1",
    "exec_time": 185.24,
    "ex": true,
    "sm": false,
    "cm": 1.0,
    "ast": 0.6756756756756757
  },
  {
    "id": 333,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "Among the users located in United Kingdom, how many users whose post have a total favorite amount of 4 or more?",
    "gold_sql": "select count(t1.id) from users as t1 inner join posts as t2 on t1.id = t2.owneruserid where t1.location = 'united kingdom' and t2.favoritecount >= 4",
    "pred_sql": "select count(*) from users where id in (select userid from posts where id in (select postid from votes where bountyamount is null group by postid having sum(case when votetypeid = 2 then 1 else 0 end) >= 4)) and location like '%united kingdom%'",
    "exec_time": 202.43,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 334,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "Which post by Harvey Motulsky has the most views? Please give the id and title of this post.",
    "gold_sql": "select t2.id, t2.title from users as t1 inner join posts as t2 on t1.id = t2.owneruserid where t1.displayname = 'harvey motulsky' order by t2.viewcount desc limit 1",
    "pred_sql": "select id, title from posts where owneruserid = (select userid from users where displayname = 'harvey motulsky') order by viewcount desc limit 1",
    "exec_time": 182.97,
    "ex": false,
    "sm": false,
    "cm": 0.8,
    "ast": 0.40476190476190477
  },
  {
    "id": 335,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "Which is the most valuable post in 2010? Please give its id and the owner's display name.",
    "gold_sql": "select t2.owneruserid, t1.displayname from users as t1 inner join posts as t2 on t1.id = t2.owneruserid where strftime('%y', t1.creationdate) = '2010' order by t2.favoritecount desc limit 1",
    "pred_sql": "select id, u.displayname from posts p join users u on p.owneruserid = u.id where p.score = (select max(score) from posts where year(creationdate) = 2010) order by p.score desc limit 1",
    "exec_time": 202.85,
    "ex": false,
    "sm": false,
    "cm": 0.4,
    "ast": 0.0
  },
  {
    "id": 336,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "What is the percentage of posts whose owners had a reputation of over 1000 in 2011?",
    "gold_sql": "select cast(sum(iif(strftime('%y', t2.creaiondate) = '2011' and t1.reputation > 1000, 1, 0)) as real) * 100 / count(t1.id) from users as t1 inner join posts as t2 on t1.id = t2.owneruserid",
    "pred_sql": "select cast(sum(case when t2.reputation > 1000 then 1 else 0 end) as real) * 100 / count(*) from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where year(t1.creaiondate) = 2011",
    "exec_time": 208.7,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.45833333333333337
  },
  {
    "id": 337,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time.",
    "gold_sql": "select t2.viewcount, t3.displayname from posthistory as t1 inner join posts as t2 on t1.postid = t2.id inner join users as t3 on t2.lasteditoruserid = t3.id where t1.text = 'computer game datasets'",
    "pred_sql": "select sum(t2.views), t1.ownerdisplayname from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t1.id = (select postid from posts where title = 'computer game datasets')",
    "exec_time": 194.07,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.5106382978723405
  },
  {
    "id": 338,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "How many comments were added to the post with the highest score?",
    "gold_sql": "select count(t2.id) from posts as t1 inner join comments as t2 on t1.id = t2.postid group by t1.id order by t1.score desc limit 1",
    "pred_sql": "select count(*) from comments where postid = (select postid from posts order by score desc limit 1)",
    "exec_time": 174.15,
    "ex": false,
    "sm": false,
    "cm": 0.5,
    "ast": 0.0
  },
  {
    "id": 339,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "Provide the text of the latest 10 comments to the post with the title 'Analysing wind data with R' and the display name of the user who left it.",
    "gold_sql": "select t3.text, t1.displayname from users as t1 inner join posts as t2 on t1.id = t2.owneruserid inner join comments as t3 on t2.id = t3.postid where t2.title = 'analysing wind data with r' order by t1.creationdate desc limit 10",
    "pred_sql": "select text, userdisplayname from comments where postid = (select id from posts where title = 'analysing wind data with r' order by creationdate desc limit 1) order by creationdate desc limit 10",
    "exec_time": 192.2,
    "ex": false,
    "sm": false,
    "cm": 0.4,
    "ast": 0.05555555555555558
  },
  {
    "id": 340,
    "db_id": "codebase_community",
    "difficulty": "challenging",
    "question": "Among all the posts posted by the most influential user, identify the percentage with a score above 50.",
    "gold_sql": "select cast(sum(case when t2.score > 50 then 1 else 0 end) as real) * 100 / count(t1.id) from users t1 inner join posts t2 on t1.id = t2.owneruserid inner join ( select max(reputation) as max_reputation from users ) t3 on t1.reputation = t3.max_reputation",
    "pred_sql": "select cast(sum(case when t1.score > 50 then 1 else 0 end) as real) * 100 / count(*) from posts as t1 inner join users as t2 on t1.owneruserid = t2.id",
    "exec_time": 201.72,
    "ex": false,
    "sm": false,
    "cm": 0.5,
    "ast": 0.582089552238806
  },
  {
    "id": 341,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "What is the excerpt post ID and wiki post ID of the tag named sample?",
    "gold_sql": "select excerptpostid, wikipostid from tags where tagname = 'sample'",
    "pred_sql": "select excerptpostid, wikipostid from tags where tagname = 'sample'",
    "exec_time": 170.0,
    "ex": true,
    "sm": true,
    "cm": 1.0,
    "ast": 1.0
  },
  {
    "id": 342,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "Give the user's reputation and up vote number of the user that commented \"fine, you win :)\".",
    "gold_sql": "select t2.reputation, t2.upvotes from comments as t1 inner join users as t2 on t1.userid = t2.id where t1.text = 'fine, you win :)'",
    "pred_sql": "select userid, upvotes from users where displayname = 'fine, you win :)'",
    "exec_time": 167.51,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.4
  },
  {
    "id": 343,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "Among the posts with views ranging from 100 to 150, what is the comment with the highest score?",
    "gold_sql": "select text from comments where postid in ( select id from posts where viewcount between 100 and 150 ) order by score desc limit 1",
    "pred_sql": "select t1.id from comments as t1 inner join posts as t2 on t1.postid = t2.id where t2.views between 100 and 150 order by t1.score desc limit 1",
    "exec_time": 190.48,
    "ex": false,
    "sm": false,
    "cm": 0.6,
    "ast": 0.22058823529411764
  },
  {
    "id": 344,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "In posts with 1 comment, how many of the comments have 0 score?",
    "gold_sql": "select count(t1.id) from comments as t1 inner join posts as t2 on t1.postid = t2.id where t2.commentcount = 1 and t2.score = 0",
    "pred_sql": "select count(*) from comments where postid in (select id from posts where commentcount = 1) and score = 0",
    "exec_time": 179.54,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 345,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "Among the comments with scores between 5 to 10, what is the percentage of the users with 0 up votes?",
    "gold_sql": "select cast(sum(iif(t1.upvotes = 0, 1, 0)) as real) * 100/ count(t1.id) as per from users as t1 inner join comments as t2 on t1.id = t2.userid where t2.score between 5 and 10",
    "pred_sql": "select cast(sum(case when t2.upvotes = 0 then 1 else 0 end) as real) * 100 / count(*) from comments as t1 inner join users as t2 on t1.userid = t2.id where t1.score between 5 and 10",
    "exec_time": 200.73,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.607843137254902
  },
  {
    "id": 346,
    "db_id": "card_games",
    "difficulty": "simple",
    "question": "Which are the cards that have incredibly powerful foils.",
    "gold_sql": "select id from cards where cardkingdomfoilid is not null and cardkingdomid is not null",
    "pred_sql": "select uuid from cards where hasfoil = 1 order by convertedmanacost desc limit 10",
    "exec_time": 253.4,
    "ex": false,
    "sm": false,
    "cm": 0.2,
    "ast": 0.07692307692307687
  },
  {
    "id": 347,
    "db_id": "card_games",
    "difficulty": "simple",
    "question": "What are the borderless cards available without powerful foils?",
    "gold_sql": "select id from cards where bordercolor = 'borderless' and (cardkingdomid is null or cardkingdomid is null)",
    "pred_sql": "select name from cards where bordercolor is null and hasfoil = 0 and hasnonfoil = 1",
    "exec_time": 259.31,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.125
  },
  {
    "id": 348,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "List all the mythic rarity print cards banned in gladiator format.",
    "gold_sql": "select distinct t1.id from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid where t2.format = 'gladiator' and t2.status = 'banned' and t1.rarity = 'mythic'",
    "pred_sql": "select t1.uuid from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid where t2.format = 'gladiator' and t1.rarity = 'mythic'",
    "exec_time": 273.38,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.7441860465116279
  },
  {
    "id": 349,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.",
    "gold_sql": "select distinct t2.status from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid where t1.type = 'artifact' and t2.format = 'vintage' and t1.side is null",
    "pred_sql": "select t2.status from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid where t1.type = 'artifact' and t1.faces = 1 and t2.format = 'vintage'",
    "exec_time": 279.41,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.8372093023255813
  },
  {
    "id": 350,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "List all the card id and artist with unknown power which are legal for commander play format.",
    "gold_sql": "select t1.id, t1.artist from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid where t2.status = 'legal' and t2.format = 'commander' and (t1.power is null or t1.power = '*')",
    "pred_sql": "select id, artist from cards where power is null and uuid in (select uuid from legalities where format = 'commander')",
    "exec_time": 264.22,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.018867924528301883
  },
  {
    "id": 351,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "Find all cards illustrated by Stephen Daniel and describe the text of the ruling of these cards. State if these cards have missing or degraded properties and values.",
    "gold_sql": "select t1.id, t2.text, t1.hascontentwarning from cards as t1 inner join rulings as t2 on t1.uuid = t2.uuid where t1.artist = 'stephen daniele'",
    "pred_sql": "select c.name, r.text, case when c.asciiname is null then 'missing ascii name' else '' end as asciinamemissing, case when c.flavortext is null then 'missing flavor text' else '' end as flavortextmissing from cards c join rulings r on c.uuid = r.uuid where c.artist = 'stephen daniel'",
    "exec_time": 295.58,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 352,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "Name the card and artist with the most ruling information. Also state if the card is a promotional printing.",
    "gold_sql": "select t1.name, t1.artist, t1.ispromo from cards as t1 inner join rulings as t2 on t1.uuid = t2.uuid where t1.ispromo = 1 and t1.artist = (select artist from cards where ispromo = 1 group by artist having count(distinct uuid) = (select max(count_uuid) from ( select count(distinct uuid) as count_uuid from cards where ispromo = 1 group by artist ))) limit 1",
    "pred_sql": "select name, artist, ispromo from cards where uuid = (select uuid from rulings group by uuid order by count(*) desc limit 1) and ispromo = 1",
    "exec_time": 268.28,
    "ex": false,
    "sm": false,
    "cm": 0.5,
    "ast": 0.33834586466165417
  },
  {
    "id": 353,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "Calculate the percentage of the cards availabe in Chinese Simplified.",
    "gold_sql": "select cast(sum(case when t2.language = 'chinese simplified' then 1 else 0 end) as real) * 100 / count(t1.id) from cards as t1 inner join foreign_data as t2 on t1.uuid = t2.uuid",
    "pred_sql": "select cast(sum(case when t2.language = 'chinese simplified' then 1 else 0 end) as real) * 100 / count(*) from cards as t1 inner join set_translations as t2 on t1.uuid = t2.setcode",
    "exec_time": 284.65,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.8
  },
  {
    "id": 354,
    "db_id": "card_games",
    "difficulty": "simple",
    "question": "How many cards have infinite power?",
    "gold_sql": "select count(*) from cards where power = '*'",
    "pred_sql": "select count(*) from cards where power = '∞'",
    "exec_time": 246.94,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.8823529411764706
  },
  {
    "id": 355,
    "db_id": "card_games",
    "difficulty": "simple",
    "question": "What is the border color of card \"Ancestor's Chosen\"?",
    "gold_sql": "select distinct bordercolor from cards where name = 'ancestor''s chosen'",
    "pred_sql": "select bordercolor from cards where name = 'ancestor\\'s chosen'",
    "exec_time": 252.15,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 356,
    "db_id": "card_games",
    "difficulty": "simple",
    "question": "What is the rule of playing card \"Benalish Knight\"?",
    "gold_sql": "select t2.format from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid where t1.name = 'benalish knight'",
    "pred_sql": "select text from rulings where uuid = (select uuid from cards where name = 'benalish knight')",
    "exec_time": 260.14,
    "ex": true,
    "sm": false,
    "cm": 0.0,
    "ast": 0.19999999999999996
  },
  {
    "id": 357,
    "db_id": "card_games",
    "difficulty": "simple",
    "question": "What is the percentage of borderless cards?",
    "gold_sql": "select cast(sum(case when bordercolor = 'borderless' then 1 else 0 end) as real) * 100 / count(id) from cards",
    "pred_sql": "select cast(sum(case when bordercolor = 'borderless' then 1 else 0 end) as real) * 100 / count(*) from cards",
    "exec_time": 264.52,
    "ex": true,
    "sm": false,
    "cm": 0.5,
    "ast": 0.8214285714285714
  },
  {
    "id": 358,
    "db_id": "card_games",
    "difficulty": "challenging",
    "question": "What is the percentage of cards whose language is French among the Story Spotlight cards?",
    "gold_sql": "select cast(sum(case when t2.language = 'french' then 1 else 0 end) as real) * 100 / count(t1.id) from cards as t1 inner join foreign_data as t2 on t1.uuid = t2.uuid where t1.isstoryspotlight = 1",
    "pred_sql": "select cast(count(case when t2.language = 'french' then 1 else null end) as real) * 100 / count(*) from cards as t1 inner join foreign_data as t2 on t1.uuid = t2.uuid where t1.isstoryspotlight = 1",
    "exec_time": 292.37,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.8043478260869565
  },
  {
    "id": 359,
    "db_id": "card_games",
    "difficulty": "simple",
    "question": "How many cards with original type of \"Summon - Angel\" have subtype other than \"Angel\"?",
    "gold_sql": "select count(id) from cards where originaltype = 'summon - angel' and subtypes != 'angel'",
    "pred_sql": "select count(*) from cards where originaltype = 'summon - angel' and subtypes not like '%angel%'",
    "exec_time": 254.01,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.52
  },
  {
    "id": 360,
    "db_id": "card_games",
    "difficulty": "simple",
    "question": "What are the cards belong to duel deck a? List the ID.",
    "gold_sql": "select id from cards where dueldeck = 'a'",
    "pred_sql": "select distinct cardkingdomid from cards where dueldeck = 'duel'",
    "exec_time": 249.28,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.7222222222222222
  },
  {
    "id": 361,
    "db_id": "card_games",
    "difficulty": "simple",
    "question": "How many of the banned cards are white border?",
    "gold_sql": "select count(t1.id) from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid where t2.status = 'banned' and t1.bordercolor = 'white'",
    "pred_sql": "select count(*) from cards join legalities on cards.uuid = legalities.uuid where cards.bordercolor = 'white' and legalities.status = 'banned'",
    "exec_time": 261.73,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.29729729729729726
  },
  {
    "id": 362,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "Among the Artifact cards, which are black color and comes with foreign languague translation?",
    "gold_sql": "select distinct t1.name from cards as t1 inner join foreign_data as t2 on t1.uuid = t2.uuid where t1.originaltype = 'artifact' and t1.colors = 'b'",
    "pred_sql": "select t1.asciiname from cards as t1 inner join foreign_data as t2 on t1.uuid = t2.uuid where t1.types like '%artifact%' and t1.coloridentity like '%w%' and t2.language != 'english'",
    "exec_time": 277.79,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.5135135135135135
  },
  {
    "id": 363,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "What is the mana cost of cards with a normal layout, a 2003 frame version, with a black border color, and available in paper and mtgo?",
    "gold_sql": "select manacost from cards where availability = 'mtgo,paper' and bordercolor = 'black' and frameversion = 2003 and layout = 'normal'",
    "pred_sql": "select manacost from cards where layout = 'normal' and frameversion = '2003' and bordercolor = 'black' and availability like '%paper%' and availability like '%mtgo%'",
    "exec_time": 269.73,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.7222222222222222
  },
  {
    "id": 364,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "What is the percentage of Story Spotlight cards that do not have a text box? List them by their ID.",
    "gold_sql": "select cast(sum(case when istextless = 0 and isstoryspotlight = 1 then 1 else 0 end) as real) * 100 / count(id) from cards",
    "pred_sql": "select id from cards where isstoryspotlight = 1 and text = '' group by id",
    "exec_time": 236.05,
    "ex": false,
    "sm": false,
    "cm": 0.25,
    "ast": 0.32352941176470584
  },
  {
    "id": 365,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "How many Brazilian Portuguese translated sets are inside the Commander block?",
    "gold_sql": "select count(t1.id) from sets as t1 inner join set_translations as t2 on t1.code = t2.setcode where t2.language = 'portuguese (brazil)' and t1.block = 'commander'",
    "pred_sql": "select count(*) from set_translations where language = 'brazilian portuguese' and setcode in (select code from sets where block = 'commander')",
    "exec_time": 252.5,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 366,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "Lists all types of cards in German.",
    "gold_sql": "select t1.subtypes, t1.supertypes from cards as t1 inner join foreign_data as t2 on t1.uuid = t2.uuid where t2.language = 'german' and t1.subtypes is not null and t1.supertypes is not null",
    "pred_sql": "select distinct type from cards where uuid in (select uuid from foreign_data where language='german')",
    "exec_time": 238.42,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 367,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "How many unknown power cards contain info about the triggered ability",
    "gold_sql": "select count(distinct t1.id) from cards as t1 inner join rulings as t2 on t1.uuid = t2.uuid where (t1.power is null or t1.power = '*') and t2.text like '%triggered ability%'",
    "pred_sql": "select count(*) from cards where power is null and keywords like '%triggered%'",
    "exec_time": 230.36,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.20454545454545459
  },
  {
    "id": 368,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "Indicates the number of cards with pre-modern format, ruling text \"This is a triggered mana ability.\" that do not have multiple faces.",
    "gold_sql": "select count(t1.id) from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid inner join rulings as t3 on t1.uuid = t3.uuid where t2.format = 'premodern' and t3.text = 'this is a triggered mana ability.' and t1.side is null",
    "pred_sql": "select count(*) from cards as t1 inner join rulings as t2 on t1.uuid = t2.uuid where t1.types like '%creature%' and t2.text like '%this is a triggered mana ability.%' and t1.facename is null",
    "exec_time": 274.93,
    "ex": true,
    "sm": false,
    "cm": 0.0,
    "ast": 0.36363636363636365
  },
  {
    "id": 369,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "What is the foreign name of the card in French of type Creature, normal layout and black border color, by artist Matthew D. Wilson?",
    "gold_sql": "select name from foreign_data where uuid in ( select uuid from cards where types = 'creature' and layout = 'normal' and bordercolor = 'black' and artist = 'matthew d. wilson' ) and language = 'french'",
    "pred_sql": "select t2.flavortext from cards as t1 inner join foreign_data as t2 on t1.uuid = t2.uuid where t1.layout = 'creature' and t1.type = 'normal' and t1.bordercolor = 'black' and t1.artist = 'matthew d. wilson' and t2.language = 'french'",
    "exec_time": 283.31,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.36708860759493667
  },
  {
    "id": 370,
    "db_id": "card_games",
    "difficulty": "simple",
    "question": "What language is the set of 180 cards that belongs to the Ravnica block translated into?",
    "gold_sql": "select t2.language from sets as t1 inner join set_translations as t2 on t1.code = t2.setcode where t1.block = 'ravnica' and t1.basesetsize = 180",
    "pred_sql": "select t2.language from sets as t1 join set_translations as t2 on t1.code = t2.setcode where t1.block = 'ravnica' and t1.totalsetsize = 180",
    "exec_time": 259.82,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.9444444444444444
  },
  {
    "id": 371,
    "db_id": "card_games",
    "difficulty": "challenging",
    "question": "What percentage of cards with format commander and legal status do not have a content warning?",
    "gold_sql": "select cast(sum(case when t1.hascontentwarning = 0 then 1 else 0 end) as real) * 100 / count(t1.id) from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid where t2.format = 'commander' and t2.status = 'legal'",
    "pred_sql": "select cast(sum(case when hascontentwarning = 0 then 1 else 0 end) as real) * 100 / count(*) from cards where uuid in (select uuid from legalities where format = 'commander' and status = 'legal')",
    "exec_time": 268.57,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.13461538461538458
  },
  {
    "id": 372,
    "db_id": "card_games",
    "difficulty": "challenging",
    "question": "What percentage of cards without power are in French?",
    "gold_sql": "select cast(sum(case when t2.language = 'french' then 1 else 0 end) as real) * 100 / count(t1.id) from cards as t1 inner join foreign_data as t2 on t1.uuid = t2.uuid where t1.power is null or t1.power = '*'",
    "pred_sql": "select cast(count(*) as real) * 100 / count(distinct uuid) from cards where power is null and uuid in (select uuid from foreign_data where language = 'french')",
    "exec_time": 289.19,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 373,
    "db_id": "card_games",
    "difficulty": "simple",
    "question": "What is the language of the card with the multiverse number 149934?",
    "gold_sql": "select language from foreign_data where multiverseid = 149934",
    "pred_sql": "select t2.language from cards as t1 inner join foreign_data as t2 on t1.uuid = t2.uuid where t1.multiverseid = 149934",
    "exec_time": 258.29,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.0
  },
  {
    "id": 374,
    "db_id": "card_games",
    "difficulty": "simple",
    "question": "What proportion of cards do not have a text box with a normal layout?",
    "gold_sql": "select cast(sum(case when istextless = 1 and layout = 'normal' then 1 else 0 end) as real) * 100 / count(*) from cards",
    "pred_sql": "select cast(count(*) as real) * 100 / (select count(*) from cards) from cards where layout != 'normal'",
    "exec_time": 255.37,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 375,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "What languages are available in the set known as Archenemy on the magic card market and having the code ARC?",
    "gold_sql": "select t2.language from sets as t1 inner join set_translations as t2 on t1.code = t2.setcode where t1.mcmname = 'archenemy' and t2.setcode = 'arc'",
    "pred_sql": "select t2.language from sets as t1 inner join set_translations as t2 on t1.code = t2.setcode where t1.code = 'arc' and t2.language in (select t3.language from sets as t4 inner join set_translations as t3 on t4.code = t3.setcode where t4.name = 'archenemy')",
    "exec_time": 306.93,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.0
  },
  {
    "id": 376,
    "db_id": "card_games",
    "difficulty": "simple",
    "question": "Which foreign language used by \"A Pedra Fellwar\"?",
    "gold_sql": "select distinct language from foreign_data where name = 'a pedra fellwar'",
    "pred_sql": "select t2.language from cards as t1 inner join foreign_data as t2 on t1.uuid = t2.uuid where t1.name = 'a pedra fellwar'",
    "exec_time": 260.1,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.0
  },
  {
    "id": 377,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "Which card costs more converted mana, \"Serra Angel\" or \"Shrine Keeper\"?",
    "gold_sql": "select name from cards where name in ('serra angel', 'shrine keeper') order by convertedmanacost desc limit 1",
    "pred_sql": "select name, convertedmanacost from cards where name = 'serra angel' or name = 'shrine keeper' order by convertedmanacost desc limit 1",
    "exec_time": 270.55,
    "ex": true,
    "sm": false,
    "cm": 0.6,
    "ast": 0.42307692307692313
  },
  {
    "id": 378,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "What's the Italian name of the set of cards with \"Ancestor's Chosen\" is in?",
    "gold_sql": "select translation from set_translations where setcode in ( select setcode from cards where name = 'ancestor''s chosen' ) and language = 'italian'",
    "pred_sql": "select t2.translation from cards as t1 inner join set_translations as t2 on t1.uuid = t2.setcode where t1.name = 'ancestor\\'s chosen' and t2.language = 'italian'",
    "exec_time": 272.11,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 379,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "For the set of cards with \"Ancestor's Chosen\" in it, is there a Korean version of it?",
    "gold_sql": "select iif(sum(case when t2.language = 'korean' and t2.translation is not null then 1 else 0 end) > 0, 'yes', 'no') from cards as t1 inner join set_translations as t2 on t2.setcode = t1.setcode where t1.name = 'ancestor''s chosen'",
    "pred_sql": "select t3.translation from cards as t1 inner join set_translations as t2 on t1.setcode = t2.setcode inner join foreign_data as t3 on t1.uuid = t3.uuid where t1.name = 'ancestor\\'s chosen' and t2.language = 'korean'",
    "exec_time": 286.92,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 380,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "Among the cards in the set \"Hauptset Zehnte Edition\", how many of them are designed by Adam Rex?",
    "gold_sql": "select count(t1.id) from cards as t1 inner join set_translations as t2 on t2.setcode = t1.setcode where t2.translation = 'hauptset zehnte edition' and t1.artist = 'adam rex'",
    "pred_sql": "select count(*) from cards join foreign_data on cards.uuid = foreign_data.uuid where foreign_data.name like '%adam rex%' and cards.setcode = '10e'",
    "exec_time": 256.95,
    "ex": true,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 381,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "What is the Simplified Chinese translation of the name of the set \"Eighth Edition\"?",
    "gold_sql": "select t2.translation from sets as t1 inner join set_translations as t2 on t2.setcode = t1.code where t1.name = 'eighth edition' and t2.language = 'chinese simplified'",
    "pred_sql": "select translation from set_translations where setcode = '8ed' and language = 'chinese simplified'",
    "exec_time": 252.9,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.16666666666666663
  },
  {
    "id": 382,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "gold_sql": "select iif(t2.mtgocode is not null, 'yes', 'no') from cards as t1 inner join sets as t2 on t2.code = t1.setcode where t1.name = 'angel of mercy'",
    "pred_sql": "select t2.name from cards as t1 inner join sets as t2 on t1.setcode = t2.code where t1.name = 'angel of mercy' and t2.isonlineonly = 1",
    "exec_time": 285.91,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.5833333333333333
  },
  {
    "id": 383,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "Among the sets in the block \"Ice Age\", how many of them have an Italian translation?",
    "gold_sql": "select count(distinct t1.id) from sets as t1 inner join set_translations as t2 on t2.setcode = t1.code where t1.block = 'ice age' and t2.language = 'italian' and t2.translation is not null",
    "pred_sql": "select count(*) from set_translations join sets on set_translations.setcode = sets.code where set_translations.language = 'italian' and sets.block = 'ice age'",
    "exec_time": 264.5,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.19999999999999996
  },
  {
    "id": 384,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "Is the set of cards with Adarkar Valkyrie only available outside the United States?",
    "gold_sql": "select iif(isforeignonly = 1, 'yes', 'no') from cards as t1 inner join sets as t2 on t2.code = t1.setcode where t1.name = 'adarkar valkyrie'",
    "pred_sql": "select s.code from cards c join sets s on c.setcode = s.code where c.name = 'adarkar valkyrie' and s.isforeignonly = 1 and s.isnonfoilonly = 0 and s.isonlineonly = 0 and s.ispartialpreview = 0",
    "exec_time": 290.41,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 385,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "Among the sets of cards that have an Italian translation, how many of them have a base set number of under 100?",
    "gold_sql": "select count(t1.id) from sets as t1 inner join set_translations as t2 on t2.setcode = t1.code where t2.translation is not null and t1.basesetsize < 100 and t2.language = 'italian'",
    "pred_sql": "select count(*) from sets where isforeignonly = 0 and basesetsize < 100 and code in (select setcode from set_translations where language = 'italian')",
    "exec_time": 267.22,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 386,
    "db_id": "card_games",
    "difficulty": "challenging",
    "question": "Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy?",
    "gold_sql": "select t1.artist from cards as t1 inner join sets as t2 on t2.code = t1.setcode where (t2.name = 'coldsnap' and t1.artist = 'chippy') or (t2.name = 'coldsnap' and t1.artist = 'aaron miller') or (t2.name = 'coldsnap' and t1.artist = 'jeremy jarvis') group by t1.artist",
    "pred_sql": "select artist from cards where artist in ('jeremy jarvis', 'aaron miller', 'chippy') and multiverseid in (select multiverseid from sets where name = 'coldsnap')",
    "exec_time": 275.76,
    "ex": true,
    "sm": false,
    "cm": 0.5,
    "ast": 0.0
  },
  {
    "id": 387,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "Among the cards with converted mana cost higher than 5 in the set Coldsnap, how many of them have unknown power?",
    "gold_sql": "select sum(case when t1.power = '*' or t1.power is null then 1 else 0 end) from cards as t1 inner join sets as t2 on t2.code = t1.setcode where t2.name = 'coldsnap' and t1.convertedmanacost > 5",
    "pred_sql": "select count(*) from cards where convertedmanacost > 5 and power is null and multiverseid in (select multiverseid from sets where name = 'coldsnap')",
    "exec_time": 266.99,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 388,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "What is the Italian flavor text of the card \"Ancestor's Chosen\"?",
    "gold_sql": "select t2.flavortext from cards as t1 inner join foreign_data as t2 on t2.uuid = t1.uuid where t1.name = 'ancestor''s chosen' and t2.language = 'italian'",
    "pred_sql": "select flavortext from foreign_data where name = 'ancestor\\'s chosen' and language = 'italian'",
    "exec_time": 259.23,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 389,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "Please list the Italian text ruling of all the cards in the set Coldsnap.",
    "gold_sql": "select distinct t1.text from foreign_data as t1 inner join cards as t2 on t2.uuid = t1.uuid inner join sets as t3 on t3.code = t2.setcode where t3.name = 'coldsnap' and t1.language = 'italian'",
    "pred_sql": "select t3.text from cards as t1 inner join rulings as t3 on t1.uuid = t3.uuid inner join sets as t2 on t1.setcode = t2.code where t2.name = 'coldsnap' and t3.date = (select max(date) from rulings where uuid = t3.uuid) and t3.text like '%italian%'",
    "exec_time": 300.51,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.061224489795918324
  },
  {
    "id": 390,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.",
    "gold_sql": "select t2.name from foreign_data as t1 inner join cards as t2 on t2.uuid = t1.uuid inner join sets as t3 on t3.code = t2.setcode where t3.name = 'coldsnap' and t1.language = 'italian' order by t2.convertedmanacost desc",
    "pred_sql": "select t1.asciiname from cards as t1 inner join sets as t2 on t1.setcode = t2.setcode where t2.name = 'coldsnap' order by t1.convertedmanacost desc limit 1",
    "exec_time": 322.65,
    "ex": false,
    "sm": false,
    "cm": 0.2,
    "ast": 0.5094339622641509
  },
  {
    "id": 391,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "What is the percentage of the cards with a converted mana cost of 7 in the set Coldsnap?",
    "gold_sql": "select cast(sum(case when t1.convertedmanacost = 7 then 1 else 0 end) as real) * 100 / count(t1.id) from cards as t1 inner join sets as t2 on t2.code = t1.setcode where t2.name = 'coldsnap'",
    "pred_sql": "select cast(sum(case when convertedmanacost = 7 then 1 else 0 end) as real) * 100 / count(*) from cards where multiverseid in (select multiverseid from sets where name = 'coldsnap')",
    "exec_time": 277.14,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.04347826086956519
  },
  {
    "id": 392,
    "db_id": "card_games",
    "difficulty": "challenging",
    "question": "What is the percentage of incredibly powerful cards in the set Coldsnap?",
    "gold_sql": "select cast(sum(case when t1.cardkingdomfoilid is not null and t1.cardkingdomid is not null then 1 else 0 end) as real) * 100 / count(t1.id) from cards as t1 inner join sets as t2 on t2.code = t1.setcode where t2.name = 'coldsnap'",
    "pred_sql": "select cast(sum(case when rarity = 'legendary' then 1 else 0 end) as real) * 100 / count(*) from cards where multiverseid in (select multiverseid from sets where name = 'coldsnap')",
    "exec_time": 282.18,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 393,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "Which of the play format has the highest number of banned status? Indicate the play format and the names of all the card meet the condition.",
    "gold_sql": "with maxbanned as (select format, count(*) as count_banned from legalities where status = 'banned' group by format order by count(*) desc limit 1) select t2.format, t1.name from cards as t1 inner join legalities as t2 on t2.uuid = t1.uuid inner join maxbanned mb on mb.format = t2.format where t2.status = 'banned'",
    "pred_sql": "select format , group_concat(name) from legalities join cards on legalities.uuid = cards.uuid where status = 'banned' group by format order by count(*) desc limit 1",
    "exec_time": 267.58,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.0
  },
  {
    "id": 394,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "Which cards are ranked 1st on EDHRec? List all of the cards name and its banned play format.",
    "gold_sql": "select t1.name, t2.format from cards as t1 inner join legalities as t2 on t2.uuid = t1.uuid where t1.edhrecrank = 1 and t2.status = 'banned' group by t1.name, t2.format",
    "pred_sql": "select t1.name from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid where t2.status = 'banned' and t1.edhrecrank = 1",
    "exec_time": 272.96,
    "ex": true,
    "sm": false,
    "cm": 0.5,
    "ast": 0.875
  },
  {
    "id": 395,
    "db_id": "card_games",
    "difficulty": "challenging",
    "question": "List the names of all the cards in the set Hour of Devastation and find the formats in which these cards are legal.",
    "gold_sql": "select distinct t2.name , case when t1.status = 'legal' then t1.format else null end from legalities as t1 inner join cards as t2 on t2.uuid = t1.uuid where t2.setcode in ( select code from sets where name = 'hour of devastation' )",
    "pred_sql": "select t2.name from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid where t2.format = 'hour of devastation'",
    "exec_time": 278.16,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.5061728395061729
  },
  {
    "id": 396,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "Find and list the names of sets which doesn't have Japanese translation but have Korean translation.",
    "gold_sql": "select name from sets where code in ( select setcode from set_translations where language = 'korean' and language not like '%japanese%' )",
    "pred_sql": "select setcode from set_translations where language = 'japanese' intersect select setcode from set_translations where language = 'korean' except select setcode from set_translations where language = 'japanese' and setcode in (select setcode from set_translations where language = 'korean')",
    "exec_time": 289.07,
    "ex": true,
    "sm": false,
    "cm": 0.0,
    "ast": 0.06451612903225812
  },
  {
    "id": 397,
    "db_id": "card_games",
    "difficulty": "moderate",
    "question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
    "gold_sql": "select distinct t1.frameversion, t1.name , iif(t2.status = 'banned', t1.name, 'no') from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid where t1.artist = 'allen williams'",
    "pred_sql": "select distinct frameeffects, name from cards where artist = 'allen williams' and status = 'banned'",
    "exec_time": 250.24,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.41666666666666663
  },
  {
    "id": 398,
    "db_id": "toxicology",
    "difficulty": "simple",
    "question": "What is the most common bond type?",
    "gold_sql": "select t.bond_type from ( select bond_type, count(bond_id) from bond group by bond_type order by count(bond_id) desc limit 1 ) as t",
    "pred_sql": "select bond_type from bond group by bond_type order by count(*) desc limit 1",
    "exec_time": 46.9,
    "ex": true,
    "sm": false,
    "cm": 0.8,
    "ast": 0.5714285714285714
  },
  {
    "id": 399,
    "db_id": "toxicology",
    "difficulty": "moderate",
    "question": "Calculate the average number of oxygen atoms in single-bonded molecules.",
    "gold_sql": "select avg(oxygen_count) from (select t1.molecule_id, count(t1.element) as oxygen_count from atom as t1 inner join bond as t2 on t1.molecule_id = t2.molecule_id where t2.bond_type = '-' and t1.element = 'o' group by t1.molecule_id) as oxygen_counts",
    "pred_sql": "select avg(a.atom_id2_count) from molecule m join bond b on m.molecule_id = b.molecule_id where b.bond_type = '- ' group by m.molecule_id having count(distinct a.atom_id2) = 8",
    "exec_time": 68.65,
    "ex": false,
    "sm": false,
    "cm": 0.25,
    "ast": 0.0
  },
  {
    "id": 400,
    "db_id": "toxicology",
    "difficulty": "challenging",
    "question": "On average how many carcinogenic molecules are single bonded?",
    "gold_sql": "select avg(single_bond_count) from (select t3.molecule_id, count(t1.bond_type) as single_bond_count from bond as t1 inner join atom as t2 on t1.molecule_id = t2.molecule_id inner join molecule as t3 on t3.molecule_id = t2.molecule_id where t1.bond_type = '-' and t3.label = '+' group by t3.molecule_id) as subquery",
    "pred_sql": "select avg(case when t2.bond_type = 'single' then 1 else 0 end) as avg_single_bonded from atom as t1 join connected as t3 on t1.atom_id = t3.atom_id join bond as t2 on t3.bond_id = t2.bond_id where t1.atom_id in (select atom_id from atom where element = 'carcinogenic')",
    "exec_time": 90.89,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 401,
    "db_id": "toxicology",
    "difficulty": "simple",
    "question": "Find the triple-bonded molecules which are carcinogenic.",
    "gold_sql": "select distinct t2.molecule_id from bond as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t1.bond_type = '#' and t2.label = '+'",
    "pred_sql": "select m.molecule_id, m.label from molecule m join bond b on m.molecule_id = b.molecule_id where b.bond_type = 'triple' and m.label = 'carcinogenic'",
    "exec_time": 63.41,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.1351351351351351
  },
  {
    "id": 402,
    "db_id": "toxicology",
    "difficulty": "moderate",
    "question": "What is the percentage of carbon in double-bond molecules?",
    "gold_sql": "select cast(count(distinct case when t1.element = 'c' then t1.atom_id else null end) as real) * 100 / count(distinct t1.atom_id) from atom as t1 inner join bond as t2 on t1.molecule_id = t2.molecule_id where t2.bond_type = '='",
    "pred_sql": "select cast(sum(case when t1.element = 'c' then 1 else 0 end) as real) * 100 / count(*) from atom as t1 join connected as t2 on t1.atom_id = t2.atom_id2 join bond as t3 on t2.bond_id = t3.bond_id where t3.bond_type = 'double'",
    "exec_time": 85.88,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.26
  },
  {
    "id": 403,
    "db_id": "toxicology",
    "difficulty": "challenging",
    "question": "What elements are in the TR004_8_9 bond atoms?",
    "gold_sql": "select distinct t1.element from atom as t1 inner join connected as t2 on t1.atom_id = t2.atom_id where t2.bond_id = 'tr004_8_9'",
    "pred_sql": "select t1.element , t2.element from atom as t1 join connected as t3 on t1.atom_id = t3.atom_id join atom as t2 on t3.atom_id2 = t2.atom_id where t3.bond_id = (select bond_id from bond where molecule_id = 'tr004_8_9')",
    "exec_time": 78.07,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.29032258064516125
  },
  {
    "id": 404,
    "db_id": "toxicology",
    "difficulty": "challenging",
    "question": "What elements are in a double type bond?",
    "gold_sql": "select distinct t1.element from atom as t1 inner join bond as t2 on t1.molecule_id = t2.molecule_id inner join connected as t3 on t1.atom_id = t3.atom_id where t2.bond_type = '='",
    "pred_sql": "select distinct t1.element from atom as t1 join connected as t2 on t1.atom_id = t2.atom_id2 join bond as t3 on t2.bond_id = t3.bond_id where t3.bond_type = 'double'",
    "exec_time": 64.47,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.6046511627906976
  },
  {
    "id": 405,
    "db_id": "toxicology",
    "difficulty": "moderate",
    "question": "Which type of label is the most numerous in atoms with hydrogen?",
    "gold_sql": "select t.label from ( select t2.label, count(t2.molecule_id) from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t1.element = 'h' group by t2.label order by count(t2.molecule_id) desc limit 1 ) t",
    "pred_sql": "select bond_type from bond where molecule_id in (select molecule_id from atom where element = 'h') group by bond_type order by count(*) desc limit 1",
    "exec_time": 64.86,
    "ex": true,
    "sm": false,
    "cm": 0.16666666666666666,
    "ast": 0.033333333333333326
  },
  {
    "id": 406,
    "db_id": "toxicology",
    "difficulty": "challenging",
    "question": "Which element is the least numerous in non-carcinogenic molecules?",
    "gold_sql": "select t.element from (select t1.element, count(distinct t1.molecule_id) from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t2.label = '-' group by t1.element order by count(distinct t1.molecule_id) asc limit 1) t",
    "pred_sql": "select element from atom where molecule_id not in (select molecule_id from molecule where label = '-') group by element order by count(*) limit 1",
    "exec_time": 51.54,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.08196721311475408
  },
  {
    "id": 407,
    "db_id": "toxicology",
    "difficulty": "moderate",
    "question": "What type of bond is there between the atoms TR004_8 and TR004_20?",
    "gold_sql": "select t1.bond_type from bond as t1 inner join connected as t2 on t1.bond_id = t2.bond_id where t2.atom_id = 'tr004_8' and t2.atom_id2 = 'tr004_20' or t2.atom_id2 = 'tr004_8' and t2.atom_id = 'tr004_20'",
    "pred_sql": "select bond.bond_type from bond join connected on bond.bond_id = connected.bond_id where connected.atom_id = 'tr004_8' and connected.atom_id2 = 'tr004_20'",
    "exec_time": 64.35,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.3421052631578947
  },
  {
    "id": 408,
    "db_id": "toxicology",
    "difficulty": "challenging",
    "question": "How many atoms with iodine and with sulfur type elements are there in single bond molecules?",
    "gold_sql": "select count(distinct case when t1.element = 'i' then t1.atom_id else null end) as iodine_nums , count(distinct case when t1.element = 's' then t1.atom_id else null end) as sulfur_nums from atom as t1 inner join connected as t2 on t1.atom_id = t2.atom_id inner join bond as t3 on t2.bond_id = t3.bond_id where t3.bond_type = '-'",
    "pred_sql": "select count(distinct atom_id) from atom where element in ('iodine', 'sulfur') and atom_id in (select atom_id from connected where bond_id in (select bond_id from bond where bond_type = '-'))",
    "exec_time": 61.68,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 409,
    "db_id": "toxicology",
    "difficulty": "challenging",
    "question": "What percentage of carcinogenic-type molecules does not contain fluorine?",
    "gold_sql": "select cast(count(distinct case when t1.element <> 'f' then t2.molecule_id else null end) as real) * 100 / count(distinct t2.molecule_id) from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t2.label = '+'",
    "pred_sql": "select cast(count(*) as real) * 100 / (select count(*) from molecule where label = '-') from atom where element = 'f' and molecule_id in (select molecule_id from bond where bond_type = 'carcinogenic')",
    "exec_time": 62.76,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 410,
    "db_id": "toxicology",
    "difficulty": "challenging",
    "question": "What is the percentage of carcinogenic molecules in triple type bonds?",
    "gold_sql": "select cast(count(distinct case when t2.label = '+' then t2.molecule_id else null end) as real) * 100 / count(distinct t2.molecule_id) from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id inner join bond as t3 on t2.molecule_id = t3.molecule_id where t3.bond_type = '#'",
    "pred_sql": "select cast(sum(case when t2.bond_type = 'triple' then 1 else 0 end) as real) * 100 / count(*) from atom as t1 join connected as t3 on t1.atom_id = t3.atom_id join atom as t4 on t3.atom_id2 = t4.atom_id join bond as t2 on t3.bond_id = t2.bond_id where t2.bond_type = 'triple'",
    "exec_time": 92.44,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 411,
    "db_id": "toxicology",
    "difficulty": "challenging",
    "question": "Please list top three elements of the toxicology of the molecule TR000 in alphabetical order.",
    "gold_sql": "select distinct t.element from atom as t where t.molecule_id = 'tr000' order by t.element limit 3",
    "pred_sql": "select element from atom where molecule_id = 'tr000' order by element limit 3",
    "exec_time": 46.79,
    "ex": true,
    "sm": false,
    "cm": 1.0,
    "ast": 0.5769230769230769
  },
  {
    "id": 412,
    "db_id": "toxicology",
    "difficulty": "moderate",
    "question": "What is the percentage of double bonds in the molecule TR008? Please provide your answer as a percentage with five decimal places.",
    "gold_sql": "select round(cast(count(case when t.bond_type = '=' then t.bond_id else null end) as real) * 100 / count(t.bond_id),5) from bond as t where t.molecule_id = 'tr008'",
    "pred_sql": "select cast(sum(case when t2.bond_type = 'double' then 1 else 0 end) as real) * 100 / count(*) from atom as t1 join connected as t3 on t1.atom_id = t3.atom_id join bond as t2 on t3.bond_id = t2.bond_id where t1.molecule_id = 'tr008'",
    "exec_time": 91.34,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 413,
    "db_id": "toxicology",
    "difficulty": "simple",
    "question": "What is the percentage of molecules that are carcinogenic? Please provide your answer as a percentage with three decimal places.",
    "gold_sql": "select round(cast(count(case when t.label = '+' then t.molecule_id else null end) as real) * 100 / count(t.molecule_id),3) from molecule t",
    "pred_sql": "select cast(sum(case when t2.label = '+' then 1 else 0 end) as real) * 100 / count(*) from atom join connected on atom.atom_id = connected.atom_id join molecule t2 on atom.molecule_id = t2.molecule_id",
    "exec_time": 73.37,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 414,
    "db_id": "toxicology",
    "difficulty": "moderate",
    "question": "How much of the hydrogen in molecule TR206 is accounted for? Please provide your answer as a percentage with four decimal places.",
    "gold_sql": "select round(cast(count(case when t.element = 'h' then t.atom_id else null end) as real) * 100 / count(t.atom_id),4) from atom as t where t.molecule_id = 'tr206'",
    "pred_sql": "select cast(sum(case when t1.element = 'h' then 1 else 0 end) as real) * 100 / count(*) from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t1.element = 'h' and t2.molecule_id = 'tr206'",
    "exec_time": 79.23,
    "ex": true,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 415,
    "db_id": "toxicology",
    "difficulty": "challenging",
    "question": "What are the elements of the toxicology and label of molecule TR060?",
    "gold_sql": "select distinct t1.element, t2.label from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t2.molecule_id = 'tr060'",
    "pred_sql": "select t1.element , t3.label from atom as t1 join connected as t2 on t1.atom_id = t2.atom_id2 join atom as t3 on t2.atom_id2 = t3.atom_id where t3.molecule_id = 'tr060'",
    "exec_time": 84.21,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.33333333333333337
  },
  {
    "id": 416,
    "db_id": "toxicology",
    "difficulty": "challenging",
    "question": "Which bond type accounted for the majority of the bonds found in molecule TR010 and state whether or not this molecule is carcinogenic?",
    "gold_sql": "select t.bond_type from ( select t1.bond_type, count(t1.molecule_id) from bond as t1 where t1.molecule_id = 'tr010' group by t1.bond_type order by count(t1.molecule_id) desc limit 1 ) as t",
    "pred_sql": "select bond_type from bond where molecule_id = 'tr010' group by bond_type order by count(*) desc limit 1",
    "exec_time": 74.64,
    "ex": true,
    "sm": false,
    "cm": 0.8333333333333334,
    "ast": 0.35416666666666663
  },
  {
    "id": 417,
    "db_id": "toxicology",
    "difficulty": "moderate",
    "question": "Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order.",
    "gold_sql": "select distinct t2.molecule_id from bond as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t1.bond_type = '-' and t2.label = '-' order by t2.molecule_id limit 3",
    "pred_sql": "select molecule_id from bond where bond_type = 'single' except select molecule_id from molecule where label = 'carcinogenic' order by molecule_id asc limit 3",
    "exec_time": 68.37,
    "ex": false,
    "sm": false,
    "cm": 0.8,
    "ast": 0.18181818181818177
  },
  {
    "id": 418,
    "db_id": "toxicology",
    "difficulty": "moderate",
    "question": "How many bonds which involved atom 12 does molecule TR009 have?",
    "gold_sql": "select count(t2.bond_id) from bond as t1 inner join connected as t2 on t1.bond_id = t2.bond_id where t1.molecule_id = 'tr009' and t2.atom_id = t1.molecule_id || '_1' or t2.atom_id2 = t1.molecule_id || '_2'",
    "pred_sql": "select count(*) from connected as t1 join atom as t2 on t1.atom_id = t2.atom_id join bond as t3 on t1.bond_id = t3.bond_id where t2.atom_id = '12' and t3.molecule_id = 'tr009'",
    "exec_time": 70.26,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.33333333333333337
  },
  {
    "id": 419,
    "db_id": "toxicology",
    "difficulty": "moderate",
    "question": "What are the bond type and the atoms of the bond ID of TR001_6_9?",
    "gold_sql": "select t1.bond_type, t2.atom_id, t2.atom_id2 from bond as t1 inner join connected as t2 on t1.bond_id = t2.bond_id where t2.bond_id = 'tr001_6_9'",
    "pred_sql": "select t2.bond_type, t1.atom_id, t3.atom_id2 from connected as t1 join atom as t3 on t1.atom_id2 = t3.atom_id join atom as t4 on t1.atom_id = t4.atom_id join bond as t2 on t1.bond_id = t2.bond_id where t2.bond_id = 'tr001_6_9'",
    "exec_time": 86.96,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.5
  },
  {
    "id": 420,
    "db_id": "toxicology",
    "difficulty": "simple",
    "question": "How many connections does the atom 19 have?",
    "gold_sql": "select count(t.bond_id) from connected as t where substr(t.atom_id, -2) = '19'",
    "pred_sql": "select count(*) from connected where atom_id = '19'",
    "exec_time": 42.1,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.045454545454545414
  },
  {
    "id": 421,
    "db_id": "toxicology",
    "difficulty": "challenging",
    "question": "List all the elements of the toxicology of the molecule \"TR004\".",
    "gold_sql": "select distinct t.element from atom as t where t.molecule_id = 'tr004'",
    "pred_sql": "select t1.element from atom as t1 join connected as t2 on t1.atom_id = t2.atom_id2 join atom as t3 on t3.atom_id = t2.atom_id1 join molecule as t4 on t4.molecule_id = t2.molecule_id where t4.label = 'tr004' group by t1.element",
    "exec_time": 77.0,
    "ex": false,
    "sm": false,
    "cm": 0.25,
    "ast": 0.0
  },
  {
    "id": 422,
    "db_id": "toxicology",
    "difficulty": "moderate",
    "question": "Among all the atoms from 21 to 25, list all the molecules that are carcinogenic.",
    "gold_sql": "select distinct t2.molecule_id from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where substr(t1.atom_id, -2) between '21' and '25' and t2.label = '+'",
    "pred_sql": "select molecule_id from molecule where label = '+' and atom_id between 'tr000_21' and 'tr000_25' group by molecule_id",
    "exec_time": 55.16,
    "ex": false,
    "sm": false,
    "cm": 0.25,
    "ast": 0.10204081632653061
  },
  {
    "id": 423,
    "db_id": "toxicology",
    "difficulty": "moderate",
    "question": "What are the bonds that have phosphorus and nitrogen as their atom elements?",
    "gold_sql": "select t2.bond_id from atom as t1 inner join connected as t2 on t1.atom_id = t2.atom_id where t2.bond_id in ( select t3.bond_id from connected as t3 inner join atom as t4 on t3.atom_id = t4.atom_id where t4.element = 'p' ) and t1.element = 'n'",
    "pred_sql": "select b.bond_id from bond b join atom a on b.bond_id = a.atom_id join atom a2 on b.bond_id = a2.atom_id where a.element = 'phosphorus', where a2.element = 'nitrogen'",
    "exec_time": 63.76,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 424,
    "db_id": "toxicology",
    "difficulty": "moderate",
    "question": "Is the molecule with the most double bonds carcinogenic?",
    "gold_sql": "select t1.label from molecule as t1 inner join ( select t.molecule_id, count(t.bond_type) from bond as t where t.bond_type = '=' group by t.molecule_id order by count(t.bond_type) desc limit 1 ) as t2 on t1.molecule_id = t2.molecule_id",
    "pred_sql": "select m.label from molecule m join bond b on m.molecule_id = b.molecule_id where b.bond_type = 'double' group by m.molecule_id order by count(*) desc limit 1",
    "exec_time": 58.26,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.2666666666666667
  },
  {
    "id": 425,
    "db_id": "toxicology",
    "difficulty": "moderate",
    "question": "What is the average number of bonds the atoms with the element iodine have?",
    "gold_sql": "select cast(count(t2.bond_id) as real) / count(t1.atom_id) from atom as t1 inner join connected as t2 on t1.atom_id = t2.atom_id where t1.element = 'i'",
    "pred_sql": "select avg(t1.bond_id_count) from (select atom_id, count(bond_id) as bond_id_count from atom join connected on atom.atom_id = connected.atom_id where element = 'iodine' group by atom_id) t1",
    "exec_time": 62.84,
    "ex": false,
    "sm": false,
    "cm": 0.25,
    "ast": 0.0
  },
  {
    "id": 426,
    "db_id": "toxicology",
    "difficulty": "challenging",
    "question": "List all the elements of atoms that can not bond with any other atoms.",
    "gold_sql": "select distinct t.element from atom as t where t.element not in ( select distinct t1.element from atom as t1 inner join connected as t2 on t1.atom_id = t2.atom_id )",
    "pred_sql": "select element from atom where atom_id not in (select atom_id from connected)",
    "exec_time": 44.99,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.25806451612903225
  },
  {
    "id": 427,
    "db_id": "toxicology",
    "difficulty": "simple",
    "question": "What are the atoms of the triple bond with the molecule \"TR041\"?",
    "gold_sql": "select t2.atom_id, t2.atom_id2 from atom as t1 inner join connected as t2 on t1.atom_id = t2.atom_id inner join bond as t3 on t2.bond_id = t3.bond_id where t3.bond_type = '#' and t3.molecule_id = 'tr041'",
    "pred_sql": "select a.atom_id from atom a join connected c on a.atom_id = c.atom_id2 join bond b on c.bond_id = b.bond_id where b.bond_type = 'triple' and a.molecule_id = 'tr041'",
    "exec_time": 70.08,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.339622641509434
  },
  {
    "id": 428,
    "db_id": "toxicology",
    "difficulty": "challenging",
    "question": "What are the elements of the atoms of TR144_8_19?",
    "gold_sql": "select t2.element from connected as t1 inner join atom as t2 on t1.atom_id = t2.atom_id where t1.bond_id = 'tr144_8_19'",
    "pred_sql": "select element from atom where atom_id = 'tr144_8_19'",
    "exec_time": 75.82,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.43333333333333335
  },
  {
    "id": 429,
    "db_id": "toxicology",
    "difficulty": "challenging",
    "question": "List the elements of all the triple bonds.",
    "gold_sql": "select distinct t3.element from bond as t1 inner join connected as t2 on t1.bond_id = t2.bond_id inner join atom as t3 on t2.atom_id = t3.atom_id where t1.bond_type = '#'",
    "pred_sql": "select t1.element from atom as t1 join connected as t2 on t1.atom_id = t2.atom_id2 join atom as t3 on t3.atom_id = t2.atom_id3 where t2.bond_id in (select bond_id from bond where bond_type = 'triple') group by t1.element",
    "exec_time": 72.12,
    "ex": false,
    "sm": false,
    "cm": 0.5,
    "ast": 0.11627906976744184
  },
  {
    "id": 430,
    "db_id": "toxicology",
    "difficulty": "moderate",
    "question": "What proportion of single bonds are carcinogenic? Please provide your answer as a percentage with five decimal places.",
    "gold_sql": "select round(cast(count(case when t2.label = '+' then t1.bond_id else null end) as real) * 100 / count(t1.bond_id),5) from bond as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t1.bond_type = '-'",
    "pred_sql": "select cast(sum(case when t2.bond_type = 'single' then 1 else 0 end) as real) * 100 / count(t1.bond_id) from connected as t1 join bond as t2 on t1.bond_id = t2.bond_id where t2.bond_type = 'single'",
    "exec_time": 86.26,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.09999999999999998
  },
  {
    "id": 431,
    "db_id": "toxicology",
    "difficulty": "moderate",
    "question": "Calculate the total atoms with triple-bond molecules containing the element phosphorus or bromine.",
    "gold_sql": "select count(t1.atom_id) from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id inner join bond as t3 on t2.molecule_id = t3.molecule_id where t3.bond_type = '#' and t1.element in ('p', 'br')",
    "pred_sql": "select count(distinct t1.atom_id) from atom as t1 join connected as t2 on t1.atom_id = t2.atom_id2 join bond as t3 on t2.bond_id = t3.bond_id where t3.bond_type = 'triple' and (t1.element = 'phosphorus' or t1.element = 'bromine')",
    "exec_time": 82.02,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.19999999999999996
  },
  {
    "id": 432,
    "db_id": "toxicology",
    "difficulty": "challenging",
    "question": "What is the composition of element chlorine in percentage among the single bond molecules?",
    "gold_sql": "select cast(count(case when t.element = 'cl' then t.atom_id else null end) as real) * 100 / count(t.atom_id) from ( select t1.atom_id, t1.element from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id inner join bond as t3 on t2.molecule_id = t3.molecule_id where t3.bond_type = '-' ) as t",
    "pred_sql": "select cast(sum(case when t2.bond_type = 'single' then 1 else 0 end) as real) * 100 / count(*) from atom as t1 inner join connected as t3 on t1.atom_id = t3.atom_id2 inner join bond as t2 on t3.bond_id = t2.bond_id where t1.element = 'cl' and t2.bond_type = 'single' inner join molecule as t4 on",
    "exec_time": 92.98,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.06666666666666665
  },
  {
    "id": 433,
    "db_id": "toxicology",
    "difficulty": "challenging",
    "question": "What are the elements for bond id TR001_10_11?",
    "gold_sql": "select t2.element from connected as t1 inner join atom as t2 on t1.atom_id = t2.atom_id where t1.bond_id = 'tr001_10_11'",
    "pred_sql": "select t1.element from atom as t1 join connected as t2 on t1.atom_id = t2.atom_id2 join atom as t3 on t3.atom_id = t2.atom_id2 where t2.bond_id = 'tr001_10_11'",
    "exec_time": 71.95,
    "ex": true,
    "sm": false,
    "cm": 1.0,
    "ast": 0.5
  },
  {
    "id": 434,
    "db_id": "toxicology",
    "difficulty": "moderate",
    "question": "What is the percentage of element chlorine in carcinogenic molecules?",
    "gold_sql": "select cast(count( case when t1.element = 'cl' then t1.element else null end) as real) * 100 / count(t1.element) from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t2.label = '+'",
    "pred_sql": "select cast(sum(case when t1.element = 'cl' then 1 else 0 end) as real) * 100 / count(*) from atom as t1 join molecule as t2 on t1.molecule_id = t2.molecule_id where t2.label = '-'",
    "exec_time": 70.0,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.6666666666666667
  },
  {
    "id": 435,
    "db_id": "toxicology",
    "difficulty": "challenging",
    "question": "Tally the toxicology element of the 4th atom of each molecule that was carcinogenic.",
    "gold_sql": "select distinct t1.element from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t2.label = '+' and substr(t1.atom_id, -1) = '4' and length(t1.atom_id) = 7",
    "pred_sql": "select count(t1.element) from atom as t1 join molecule as t2 on t1.molecule_id = t2.molecule_id where t1.atom_id = (select atom_id from atom where molecule_id = t2.molecule_id order by atom_id limit 3 offset 3) and t2.label = '-'",
    "exec_time": 73.52,
    "ex": false,
    "sm": false,
    "cm": 0.2,
    "ast": 0.021276595744680882
  },
  {
    "id": 436,
    "db_id": "toxicology",
    "difficulty": "challenging",
    "question": "What is the ratio of Hydrogen elements in molecule ID TR006? List the ratio with its label.",
    "gold_sql": "with subquery as (select distinct t1.atom_id, t1.element, t1.molecule_id, t2.label from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t2.molecule_id = 'tr006') select cast(count(case when element = 'h' then atom_id else null end) as real) / (case when count(atom_id) = 0 then null else count(atom_id) end) as ratio, label from subquery group by label",
    "pred_sql": "select cast(sum(case when t1.element = 'hydrogen' then 1 else 0 end) as real) * 100 / count(*) from atom as t1 join molecule as t2 on t1.molecule_id = t2.molecule_id where t2.molecule_id = 'tr006'",
    "exec_time": 83.47,
    "ex": false,
    "sm": false,
    "cm": 0.25,
    "ast": 0.3894736842105263
  },
  {
    "id": 437,
    "db_id": "toxicology",
    "difficulty": "moderate",
    "question": "Which non-carcinogenic molecules consisted more than 5 atoms?",
    "gold_sql": "select t.molecule_id from ( select t1.molecule_id, count(t2.atom_id) from molecule as t1 inner join atom as t2 on t1.molecule_id = t2.molecule_id where t1.label = '-' group by t1.molecule_id having count(t2.atom_id) > 5 ) t",
    "pred_sql": "select molecule_id from molecule where label = '-' group by molecule_id having count(distinct atom_id) > 5",
    "exec_time": 49.49,
    "ex": false,
    "sm": false,
    "cm": 0.75,
    "ast": 0.4363636363636364
  },
  {
    "id": 438,
    "db_id": "california_schools",
    "difficulty": "simple",
    "question": "How many schools with an average score in Math greater than 400 in the SAT test are exclusively virtual?",
    "gold_sql": "select count(distinct t2.school) from satscores as t1 inner join schools as t2 on t1.cds = t2.cdscode where t2.virtual = 'f' and t1.avgscrmath > 400",
    "pred_sql": "select count(*) from satscores join schools on satscores.cds = schools.cdscode where satscores.avgscrmath > 400 and satscores.rtype = 's' and schools.virtual = 'y'",
    "exec_time": 186.36,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.10526315789473684
  },
  {
    "id": 439,
    "db_id": "california_schools",
    "difficulty": "simple",
    "question": "Please list the codes of the schools with a total enrollment of over 500.",
    "gold_sql": "select t2.cdscode from schools as t1 inner join frpm as t2 on t1.cdscode = t2.cdscode where t2.`enrollment (k-12)` + t2.`enrollment (ages 5-17)` > 500",
    "pred_sql": "select cds from schools where enroll12 > 500",
    "exec_time": 159.63,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.20588235294117652
  },
  {
    "id": 440,
    "db_id": "california_schools",
    "difficulty": "moderate",
    "question": "Among the schools with an SAT excellence rate of over 0.3, what is the highest eligible free rate for students aged 5-17?",
    "gold_sql": "select max(cast(t1.`free meal count (ages 5-17)` as real) / t1.`enrollment (ages 5-17)`) from frpm as t1 inner join satscores as t2 on t1.cdscode = t2.cds where cast(t2.numge1500 as real) / t2.numtsttakr > 0.3",
    "pred_sql": "select max(`percent (%) eligible free (ages 5-17)`) from frpm where cdscode in (select cds from satscores where numge1500 / enroll12 > 0.3)",
    "exec_time": 205.05,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 441,
    "db_id": "california_schools",
    "difficulty": "simple",
    "question": "Rank schools by their average score in Writing where the score is greater than 499, showing their charter numbers.",
    "gold_sql": "select charternum, avgscrwrite, rank() over (order by avgscrwrite desc) as writingscorerank from schools as t1 inner join satscores as t2 on t1.cdscode = t2.cds where t2.avgscrwrite > 499 and charternum is not null",
    "pred_sql": "select cds, charternum from satscores where avgscrwrite > 499 order by avgscrwrite desc",
    "exec_time": 171.02,
    "ex": false,
    "sm": false,
    "cm": 0.25,
    "ast": 0.0
  },
  {
    "id": 442,
    "db_id": "california_schools",
    "difficulty": "moderate",
    "question": "List the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools.",
    "gold_sql": "select t1.school, t1.street from schools as t1 inner join frpm as t2 on t1.cdscode = t2.cdscode where t2.`enrollment (k-12)` - t2.`enrollment (ages 5-17)` > 30",
    "pred_sql": "select school, street from schools where cdscode in (select cds from satscores where enroll12 - (select enrollment (ages 5-17) from frpm where cds = satscores.cds) > 30)",
    "exec_time": 192.99,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 443,
    "db_id": "california_schools",
    "difficulty": "moderate",
    "question": "Give the names of the schools with the percent eligible for free meals in K-12 is more than 0.1 and test takers whose test score is greater than or equal to 1500?",
    "gold_sql": "select t2.`school name` from satscores as t1 inner join frpm as t2 on t1.cds = t2.cdscode where cast(t2.`free meal count (k-12)` as real) / t2.`enrollment (k-12)` > 0.1 and t1.numge1500 > 0",
    "pred_sql": "select distinct t1.school from frpm as t1 inner join satscores as t2 on t1.cdscode = t2.cds where t1.`percent (%) eligible free (k-12)` > 0.1 and t2.numge1500 > 0",
    "exec_time": 197.85,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.4285714285714286
  },
  {
    "id": 444,
    "db_id": "california_schools",
    "difficulty": "moderate",
    "question": "Name schools in Riverside which the average of average math score for SAT is grater than 400, what is the funding type of these schools?",
    "gold_sql": "select t1.sname, t2.`charter funding type` from satscores as t1 inner join frpm as t2 on t1.cds = t2.cdscode where t2.`district name` like 'riverside%' group by t1.sname, t2.`charter funding type` having cast(sum(t1.avgscrmath) as real) / count(t1.cds) > 400",
    "pred_sql": "select t1.fundingtype from schools as t1 join satscores as t2 on t1.cdscode = t2.cds where t1.county = 'riverside' and t2.avgscrmath > 400",
    "exec_time": 188.58,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.4464285714285714
  },
  {
    "id": 445,
    "db_id": "california_schools",
    "difficulty": "moderate",
    "question": "State the names and full communication address of high schools in Monterey which has more than 800 free or reduced price meals for ages 15-17?",
    "gold_sql": "select t1.`school name`, t2.street, t2.city, t2.state, t2.zip from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.county = 'monterey' and t1.`free meal count (ages 5-17)` > 800 and t1.`school type` = 'high schools (public)'",
    "pred_sql": "select school, street, streetabr, city, zip, state, mailstreet, mailstrabr, mailcity, mailzip, mailstate from schools where magnet = 1 and county = 'monterey' and school in (select school from frpm where `ages 5-17` > 800)",
    "exec_time": 209.57,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 446,
    "db_id": "california_schools",
    "difficulty": "moderate",
    "question": "What is the average score in writing for the schools that were opened after 1991 or closed before 2000? List the school names along with the score. Also, list the communication number of the schools if there is any.",
    "gold_sql": "select t2.school, t1.avgscrwrite, t2.phone from schools as t2 left join satscores as t1 on t2.cdscode = t1.cds where strftime('%y', t2.opendate) > '1991' or strftime('%y', t2.closeddate) < '2000'",
    "pred_sql": "select s.school, ss.avgscrwrite, s.phone from schools s join satscores ss on s.cdscode = ss.cds where s.opendate > '1991-12-31' or s.closeddate < '2000-01-01'",
    "exec_time": 200.84,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.23076923076923073
  },
  {
    "id": 447,
    "db_id": "california_schools",
    "difficulty": "challenging",
    "question": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average.",
    "gold_sql": "select t2.school, t2.doc from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.fundingtype = 'locally funded' and (t1.`enrollment (k-12)` - t1.`enrollment (ages 5-17)`) > (select avg(t3.`enrollment (k-12)` - t3.`enrollment (ages 5-17)`) from frpm as t3 inner join schools as t4 on t3.cdscode = t4.cdscode where t4.fundingtype = 'locally funded')",
    "pred_sql": "select s.doc, s.doctype from schools s join frpm f on s.cdscode = f.cdscode where f.nslp provision status = 'local' and f.enrollment (k-12) - f.enrollment (ages 5-17) > (select avg(enrollment (k-12) - enrollment (ages 5-17)) from frpm where nslp provision status = 'local') group by s",
    "exec_time": 220.04,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 448,
    "db_id": "california_schools",
    "difficulty": "moderate",
    "question": "What is the eligible free rate of the 10th and 11th schools with the highest enrolment for students in grades 1 through 12?",
    "gold_sql": "select cast(`free meal count (k-12)` as real) / `enrollment (k-12)` from frpm order by `enrollment (k-12)` desc limit 9, 2",
    "pred_sql": "select t1.cdscode, t1.`enrollment (k-12)`, t1.`percent (%) eligible free (k-12)` from schools as t1 join frpm as t2 on t1.cdscode = t2.cdscode order by t2.`enrollment (k-12)` desc limit 10, 2",
    "exec_time": 217.42,
    "ex": false,
    "sm": false,
    "cm": 0.5,
    "ast": 0.0
  },
  {
    "id": 449,
    "db_id": "california_schools",
    "difficulty": "moderate",
    "question": "What is the eligible free or reduced price meal rate for the top 5 schools in grades 1-12 with the highest free or reduced price meal count of the schools with the ownership code 66?",
    "gold_sql": "select cast(t1.`frpm count (k-12)` as real) / t1.`enrollment (k-12)` from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.soc = 66 order by t1.`frpm count (k-12)` desc limit 5",
    "pred_sql": "select school, `percent (%) eligible free (k-12)`, `percent (%) eligible frpm (k-12)` from frpm where `educational option type` = 'traditional' and `district type` = 'high schools (public)' and `school type` = 'trad' and `edopscode` = '66' order by `frpm count (k-12)` desc limit 5",
    "exec_time": 222.11,
    "ex": false,
    "sm": false,
    "cm": 0.4,
    "ast": 0.0
  },
  {
    "id": 450,
    "db_id": "california_schools",
    "difficulty": "moderate",
    "question": "What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State.",
    "gold_sql": "select t2.street, t2.city, t2.state, t2.zip from satscores as t1 inner join schools as t2 on t1.cds = t2.cdscode order by cast(t1.numge1500 as real) / t1.numtsttakr asc limit 1",
    "pred_sql": "select t1.street, t1.city, t1.zip, t1.state from schools as t1 join frpm as t2 on t1.cdscode = t2.cdscode order by t2.percent (%) eligible free (k-12) limit 1",
    "exec_time": 193.59,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 451,
    "db_id": "california_schools",
    "difficulty": "challenging",
    "question": "Under whose administration is the school with the highest number of students scoring 1500 or more on the SAT? Indicate their full names.",
    "gold_sql": "select t2.admfname1, t2.admlname1, t2.admfname2, t2.admlname2, t2.admfname3, t2.admlname3 from satscores as t1 inner join schools as t2 on t1.cds = t2.cdscode order by t1.numge1500 desc limit 1",
    "pred_sql": "select admfname1, admfname2, admfname3, admlname1, admlname2, admlname3 from schools join satscores on schools.cdscode = satscores.cds where numge1500 > 0 order by numge1500 desc limit 1",
    "exec_time": 220.42,
    "ex": false,
    "sm": false,
    "cm": 0.8,
    "ast": 0.0
  },
  {
    "id": 452,
    "db_id": "california_schools",
    "difficulty": "simple",
    "question": "What is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980?",
    "gold_sql": "select avg(t1.numtsttakr) from satscores as t1 inner join schools as t2 on t1.cds = t2.cdscode where strftime('%y', t2.opendate) = '1980' and t2.county = 'fresno'",
    "pred_sql": "select avg(numtsttakr) from satscores inner join schools on satscores.cds = schools.cdscode where schools.opendate between '1980-01-01' and '1980-12-31' and schools.county = 'fresno'",
    "exec_time": 206.97,
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.0
  },
  {
    "id": 453,
    "db_id": "california_schools",
    "difficulty": "moderate",
    "question": "What is the telephone number for the school with the lowest average score in reading in Fresno Unified?",
    "gold_sql": "select t2.phone from satscores as t1 inner join schools as t2 on t1.cds = t2.cdscode where t2.district = 'fresno unified' and t1.avgscrread is not null order by t1.avgscrread asc limit 1",
    "pred_sql": "select t1.phone from schools as t1 join frpm as t2 on t1.cdscode = t2.cdscode join satscores as t3 on t1.cdscode = t3.cds where t3.cname = 'fresno unified' and t3.rtype = 'd' order by t3.avgscrread asc limit 1",
    "exec_time": 210.4,
    "ex": true,
    "sm": false,
    "cm": 0.6,
    "ast": 0.38636363636363635
  },
  {
    "id": 454,
    "db_id": "california_schools",
    "difficulty": "simple",
    "question": "List the names of virtual schools that are among the top 5 in their respective counties based on average reading scores.",
    "gold_sql": "select school from (select t2.school,t1.avgscrread, rank() over (partition by t2.county order by t1.avgscrread desc) as rnk from satscores as t1 inner join schools as t2 on t1.cds = t2.cdscode where t2.virtual = 'f' ) ranked_schools where rnk <= 5",
    "pred_sql": "select t1.school from schools as t1 join satscores as t2 on t1.cdscode = t2.cds where t1.virtual = 1 group by t1.school order by avg(t2.avgscrread) desc limit 5",
    "exec_time": 220.8,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.4354838709677419
  },
  {
    "id": 455,
    "db_id": "california_schools",
    "difficulty": "moderate",
    "question": "What is the average writing score of each of the schools managed by Ricci Ulrich? List the schools and the corresponding average writing scores.",
    "gold_sql": "select t2.school, t1.avgscrwrite from satscores as t1 inner join schools as t2 on t1.cds = t2.cdscode where t2.admfname1 = 'ricci' and t2.admlname1 = 'ulrich'",
    "pred_sql": "select t1.school,t2.avgscrwrite from schools as t1 join satscores as t2 on t1.cdscode = t2.cds where t1.admfname1 = 'ricci' and t1.admlname1 = 'ulrich' group by t1.school",
    "exec_time": 207.77,
    "ex": true,
    "sm": false,
    "cm": 0.75,
    "ast": 0.5609756097560976
  },
  {
    "id": 456,
    "db_id": "california_schools",
    "difficulty": "simple",
    "question": "Which state special schools have the highest number of enrollees from grades 1 through 12?",
    "gold_sql": "select t2.school from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.doc = 31 order by t1.`enrollment (k-12)` desc limit 1",
    "pred_sql": "select state from schools where magnet = 1 group by state order by sum(enroll12) desc limit 1",
    "exec_time": 174.56,
    "ex": false,
    "sm": false,
    "cm": 0.16666666666666666,
    "ast": 0.027027027027026973
  },
  {
    "id": 457,
    "db_id": "california_schools",
    "difficulty": "moderate",
    "question": "What is the monthly average number of schools that opened in Alameda County under the jurisdiction of the Elementary School District in 1980?",
    "gold_sql": "select cast(count(school) as real) / 12 from schools where doc = 52 and county = 'alameda' and strftime('%y', opendate) = '1980'",
    "pred_sql": "select avg(enroll12 / 12) as monthlyaverage from satscores inner join schools on satscores.cds = schools.cdscode where schools.county = 'alameda' and schools.doctype = 'elementary school district' and year(opendate) = 1980",
    "exec_time": 205.81,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 458,
    "db_id": "california_schools",
    "difficulty": "moderate",
    "question": "What is the ratio of merged Unified School District schools in Orange County to merged Elementary School District schools?",
    "gold_sql": "select cast(sum(case when doc = 54 then 1 else 0 end) as real) / sum(case when doc = 52 then 1 else 0 end) from schools where statustype = 'merged' and county = 'orange'",
    "pred_sql": "select cast(sum(case when t2.county = 'orange' then 1 else 0 end) as real) * 100 / count(*) from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.statustype = 'merged unified school district' or t2.statustype = 'merged elementary school district'",
    "exec_time": 226.88,
    "ex": true,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 459,
    "db_id": "california_schools",
    "difficulty": "simple",
    "question": "What is the postal street address for the school with the 7th highest Math average? Indicate the school's name.",
    "gold_sql": "select t2.mailstreet, t2.school from satscores as t1 inner join schools as t2 on t1.cds = t2.cdscode order by t1.avgscrmath desc limit 6, 1",
    "pred_sql": "select t1.school from schools as t1 join satscores as t2 on t1.cdscode = t2.cds where t2.avgscrmath = ( select distinct percentile_cont(0.7) within group (order by avgscrmath) over () as pct from satscores ) order by t2.avgscrmath desc limit 1",
    "exec_time": 215.77,
    "ex": false,
    "sm": false,
    "cm": 0.6,
    "ast": 0.052631578947368474
  },
  {
    "id": 460,
    "db_id": "california_schools",
    "difficulty": "challenging",
    "question": "What is the total number of non-chartered schools in the county of Los Angeles with a percent (%) of eligible free meals for grades 1 through 12 that is less than 0.18%?",
    "gold_sql": "select count(t2.school) from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.county = 'los angeles' and t2.charter = 0 and cast(t1.`free meal count (k-12)` as real) * 100 / t1.`enrollment (k-12)` < 0.18",
    "pred_sql": "select count(*) from frpm join schools on frpm.cdscode = schools.cdscode where schools.county = 'los angeles' and frpm.`percent (%) eligible free (k-12)` < 0.18 and schools.charter = 0",
    "exec_time": 206.62,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.3137254901960784
  },
  {
    "id": 461,
    "db_id": "california_schools",
    "difficulty": "moderate",
    "question": "How many students from the ages of 5 to 17 are enrolled at the State Special School school in Fremont for the 2014-2015 academic year?",
    "gold_sql": "select t1.`enrollment (ages 5-17)` from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.edopscode = 'sss' and t2.city = 'fremont' and t1.`academic year` between 2014 and 2015",
    "pred_sql": "select sum(`enrollment (ages 5-17)`) from frpm where `school name` = 'state special school' and `county name` = 'fremont' and `academic year` = '2014-2015'",
    "exec_time": 198.34,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.16666666666666663
  },
  {
    "id": 462,
    "db_id": "california_schools",
    "difficulty": "moderate",
    "question": "Which schools served a grade span of Kindergarten to 9th grade in the county of Los Angeles and what is its Percent (%) Eligible FRPM (Ages 5-17)?",
    "gold_sql": "select t2.school, t1.`frpm count (ages 5-17)` * 100 / t1.`enrollment (ages 5-17)` from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.county = 'los angeles' and t2.gsserved = 'k-9'",
    "pred_sql": "select t1.school , t1.`percent (%) eligible frpm (ages 5-17)` from schools as t1 inner join frpm as t2 on t1.cdscode = t2.cdscode where t1.county = 'los angeles' and t2.`low grade` = 'k' and t2.`high grade` = '9'",
    "exec_time": 221.27,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.44680851063829785
  },
  {
    "id": 463,
    "db_id": "california_schools",
    "difficulty": "moderate",
    "question": "Between San Diego and Santa Barbara, which county offers the most number of schools that does not offer physical building? Indicate the amount.",
    "gold_sql": "select county, count(virtual) from schools where (county = 'san diego' or county = 'santa barbara') and virtual = 'f' group by county order by count(virtual) desc limit 1",
    "pred_sql": "select count(*) from schools where magnet = 1 and county in ('san diego', 'santa barbara')",
    "exec_time": 172.22,
    "ex": false,
    "sm": false,
    "cm": 0.16666666666666666,
    "ast": 0.23404255319148937
  },
  {
    "id": 464,
    "db_id": "california_schools",
    "difficulty": "simple",
    "question": "What is the grade span offered in the school with the highest longitude?",
    "gold_sql": "select gsoffered from schools order by abs(longitude) desc limit 1",
    "pred_sql": "select distinct gsoffered from schools order by longitude desc limit 1",
    "exec_time": 171.31,
    "ex": false,
    "sm": false,
    "cm": 0.75,
    "ast": 0.8
  },
  {
    "id": 465,
    "db_id": "california_schools",
    "difficulty": "challenging",
    "question": "Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city.",
    "gold_sql": "select t2.city, count(t2.cdscode) from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.magnet = 1 and t2.gsoffered = 'k-8' and t1.`nslp provision status` = 'multiple provision types' group by t2.city",
    "pred_sql": "select count(t1.cdscode), t2.city from schools as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t1.magnet = 1 and t1.gsoffered = 'k-8' group by t2.city",
    "exec_time": 203.73,
    "ex": true,
    "sm": false,
    "cm": 0.5,
    "ast": 0.7115384615384616
  },
  {
    "id": 466,
    "db_id": "california_schools",
    "difficulty": "moderate",
    "question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school.",
    "gold_sql": "select t1.`free meal count (k-12)` * 100 / t1.`enrollment (k-12)`, t1.`district code` from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.admfname1 = 'alusine'",
    "pred_sql": "select t1.districtcode from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.admfname1 = 'alusine'",
    "exec_time": 202.36,
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666,
    "ast": 0.8048780487804879
  },
  {
    "id": 467,
    "db_id": "california_schools",
    "difficulty": "challenging",
    "question": "What are the valid e-mail addresses of the administrator of the school located in the San Bernardino county, City of San Bernardino City Unified that opened between 1/1/2009 to 12/31/2010 whose school types are public Intermediate/Middle Schools and Unified Schools?",
    "gold_sql": "select t2.admemail1, t2.admemail2 from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.county = 'san bernardino' and t2.city = 'san bernardino' and t2.doc = 54 and strftime('%y', t2.opendate) between '2009' and '2010' and t2.soc = 62",
    "pred_sql": "select admemail1, admemail2, admemail3 from schools where county = 'san bernardino' and city = 'san bernardino city unified' and opendate between '2009-01-01' and '2010-12-31' and school like '%public intermediate/middle schools%' or school like '%unified schools%' and statustype = 'active'",
    "exec_time": 232.3,
    "ex": true,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 468,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "How many accounts who choose issuance after transaction are staying in East Bohemia region?",
    "gold_sql": "select count(t2.account_id) from district as t1 inner join account as t2 on t1.district_id = t2.district_id where t1.a3 = 'east bohemia' and t2.frequency = 'poplatek po obratu'",
    "pred_sql": "select count(distinct t1.account_id) from trans as t1 inner join account as t2 on t1.account_id = t2.account_id inner join district as t3 on t2.district_id = t3.district_id where t1.date > (select max(date) from trans as t4 inner join account as t5 on t4.account_id = t5.account_id inner join district as t6 on t5.district_id = t6.district_id where t",
    "exec_time": 163.93,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 469,
    "db_id": "financial",
    "difficulty": "simple",
    "question": "List out the no. of districts that have female average salary is more than 6000 but less than 10000?",
    "gold_sql": "select count(distinct t2.district_id) from client as t1 inner join district as t2 on t1.district_id = t2.district_id where t1.gender = 'f' and t2.a11 between 6000 and 10000",
    "pred_sql": "select count(*) from district where a10 > 6000 and a10 < 10000 and a16 in (select district_id from client where gender = 'f')",
    "exec_time": 125.64,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 470,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "How many male customers who are living in North Bohemia have average salary greater than 8000?",
    "gold_sql": "select count(t1.client_id) from client as t1 inner join district as t2 on t1.district_id = t2.district_id where t1.gender = 'm' and t2.a3 = 'north bohemia' and t2.a11 > 8000",
    "pred_sql": "select count(*) from client where gender = 'm' and district_id in (select district_id from district where a3 = 'north bohemia') and district_id in (select district_id from client group by district_id having avg(a10) > 8000)",
    "exec_time": 134.86,
    "ex": false,
    "sm": false,
    "cm": 0.25,
    "ast": 0.0
  },
  {
    "id": 471,
    "db_id": "financial",
    "difficulty": "challenging",
    "question": "List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary?",
    "gold_sql": "select t1.account_id , ( select max(a11) - min(a11) from district ) from account as t1 inner join district as t2 on t1.district_id = t2.district_id inner join disp as t3 on t1.account_id = t3.account_id inner join client as t4 on t3.client_id = t4.client_id where t2.district_id = ( select district_id from client where gender = 'f' order by birth_date asc limit 1 ) order by t2.a11 desc limit 1",
    "pred_sql": "select min(t1.account_id) from account as t1 inner join client as t2 on t1.district_id = t2.district_id inner join district as t3 on t2.district_id = t3.district_id where t2.gender = 'f' group by t3.a10 order by avg(t3.a10) limit 1 union all select max(t1.account_id) from account as t1 inner join client as t2 on t1.district",
    "exec_time": 164.68,
    "ex": false,
    "sm": false,
    "cm": 0.16666666666666666,
    "ast": 0.3508771929824561
  },
  {
    "id": 472,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "List out the account numbers of clients who are youngest and have highest average salary?",
    "gold_sql": "select t1.account_id from account as t1 inner join disp as t2 on t1.account_id = t2.account_id inner join client as t3 on t2.client_id = t3.client_id inner join district as t4 on t4.district_id = t1.district_id where t2.client_id = ( select client_id from client order by birth_date desc limit 1) group by t4.a11, t1.account_id",
    "pred_sql": "select account_id from client where district_id in (select district_id from account group by district_id order by avg(a10) desc limit 1) order by birth_date asc limit 1",
    "exec_time": 122.65,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.38636363636363635
  },
  {
    "id": 473,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "Among the accounts who have approved loan date in 1997, list out the accounts that have the lowest approved amount and choose weekly issuance statement.",
    "gold_sql": "select t2.account_id from loan as t1 inner join account as t2 on t1.account_id = t2.account_id where strftime('%y', t1.date) = '1997' and t2.frequency = 'poplatek tydne' order by t1.amount limit 1",
    "pred_sql": "select account_id from loan where status = 'a' and year(date) = 1997 group by account_id order by sum(amount) limit 1",
    "exec_time": 115.06,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.17391304347826086
  },
  {
    "id": 474,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "Among the accounts who have loan validity more than 12 months, list out the accounts that have the highest approved amount and have account opening date in 1993.",
    "gold_sql": "select t1.account_id from loan as t1 inner join account as t2 on t1.account_id = t2.account_id where strftime('%y', t2.date) = '1993' and t1.duration > 12 order by t1.amount desc limit 1",
    "pred_sql": "select account_id from loan where status = 'a' and duration > 12 and date between '1993-01-01' and '1993-12-31' order by amount desc limit 1",
    "exec_time": 130.17,
    "ex": true,
    "sm": false,
    "cm": 0.6,
    "ast": 0.15217391304347827
  },
  {
    "id": 475,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "Among the account opened, how many female customers who were born before 1950 and stayed in Sokolov?",
    "gold_sql": "select count(t2.client_id) from district as t1 inner join client as t2 on t1.district_id = t2.district_id where t2.gender = 'f' and strftime('%y', t2.birth_date) < '1950' and t1.a2 = 'sokolov'",
    "pred_sql": "select count(*) from client where gender = 'f' and birth_date < '1950-01-01' and district_id in (select district_id from district where a2 = 'sokolov')",
    "exec_time": 123.26,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 476,
    "db_id": "financial",
    "difficulty": "simple",
    "question": "For the female client who was born in 1976/1/29, which district did she opened her account?",
    "gold_sql": "select t1.a2 from district as t1 inner join client as t2 on t1.district_id = t2.district_id where t2.birth_date = '1976-01-29' and t2.gender = 'f'",
    "pred_sql": "select t3.district_id from client as t1 inner join disp as t2 on t1.client_id = t2.client_id inner join account as t3 on t2.account_id = t3.account_id where t1.birth_date = '1976-01-29' and t1.gender = 'f'",
    "exec_time": 135.8,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.2777777777777778
  },
  {
    "id": 477,
    "db_id": "financial",
    "difficulty": "challenging",
    "question": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?",
    "gold_sql": "select cast(sum(t1.gender = 'm') as real) * 100 / count(t1.client_id) from client as t1 inner join district as t2 on t1.district_id = t2.district_id where t2.a3 = 'south bohemia' group by t2.a4 order by t2.a4 desc limit 1",
    "pred_sql": "select cast(sum(case when t2.gender = 'm' then 1 else 0 end) as real) * 100 / count(*) from district as t1 inner join client as t2 on t1.district_id = t2.district_id where t1.a8 = (select a8 from district order by a8 desc limit 1)",
    "exec_time": 154.92,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.09433962264150941
  },
  {
    "id": 478,
    "db_id": "financial",
    "difficulty": "challenging",
    "question": "For the client whose loan was approved first in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27?",
    "gold_sql": "select cast((sum(iif(t3.date = '1998-12-27', t3.balance, 0)) - sum(iif(t3.date = '1993-03-22', t3.balance, 0))) as real) * 100 / sum(iif(t3.date = '1993-03-22', t3.balance, 0)) from loan as t1 inner join account as t2 on t1.account_id = t2.account_id inner join trans as t3 on t3.account_id = t2.account_id where t1.date = '1993-07-05'",
    "pred_sql": "select (select max(date) from loan where account_id = account.account_id and status = 'a' and date between '1993-03-22' and '1998-12-27') as first_loan_date, (select balance from trans where account_id = account.account_id and date = '1998-12-27') - (select balance from trans where account_id = account.account_id and date",
    "exec_time": 163.12,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 479,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "What is the percentage of loan amount that has been fully paid with no issue.",
    "gold_sql": "select (cast(sum(case when status = 'a' then amount else 0 end) as real) * 100) / sum(amount) from loan",
    "pred_sql": "select sum(case when t.status = 'a' then t.amount else 0 end) / sum(t.amount) * 100 as percentage from loan as t where t.status = 'a' and t.payments = t.amount",
    "exec_time": 132.23,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.19354838709677424
  },
  {
    "id": 480,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "For loan amount less than USD100,000, what is the percentage of accounts that is still running with no issue.",
    "gold_sql": "select cast(sum(status = 'c') as real) * 100 / count(account_id) from loan where amount < 100000",
    "pred_sql": "select cast(count(*) as real) * 100 / (select count(*) from loan where amount < 100000) from loan where status = 'a' and amount < 100000",
    "exec_time": 128.02,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 481,
    "db_id": "financial",
    "difficulty": "challenging",
    "question": "For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996.",
    "gold_sql": "select cast((t3.a13 - t3.a12) as real) * 100 / t3.a12 from loan as t1 inner join account as t2 on t1.account_id = t2.account_id inner join district as t3 on t2.district_id = t3.district_id where t1.status = 'd'",
    "pred_sql": "select t1.district_id, t1.a16, (t1.a10 - t2.a10) * 100 / t2.a10 as unemployment_increase from district as t1 join district as t2 on t1.district_id = t2.district_id where t1.a2 like '%praha%' and t1.a16 > 0 and t2.a16 > 0",
    "exec_time": 162.54,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.2545454545454545
  },
  {
    "id": 482,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "List the top nine districts, by descending order, from the highest to the lowest, the number of female account holders.",
    "gold_sql": "select t2.a2, count(t1.client_id) from client as t1 inner join district as t2 on t1.district_id = t2.district_id where t1.gender = 'f' group by t2.district_id, t2.a2 order by count(t1.client_id) desc limit 9",
    "pred_sql": "select district_id, count(*) from client where gender = 'f' group by district_id order by count(*) desc limit 9",
    "exec_time": 125.26,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.4285714285714286
  },
  {
    "id": 483,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "Between 1/1/1995 and 12/31/1997, how many loans in the amount of at least 250,000 per account that chose monthly statement issuance were approved?",
    "gold_sql": "select count(t1.account_id) from account as t1 inner join loan as t2 on t1.account_id = t2.account_id where t2.date between '1995-01-01' and '1997-12-31' and t1.frequency = 'poplatek mesicne' and t2.amount >= 250000",
    "pred_sql": "select count(*) from loan where account_id in (select account_id from account where date between '1995-01-01' and '1997-12-31' and frequency = 'poplatek mesicne') and amount >= 250000 and status = 'a'",
    "exec_time": 153.38,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 484,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "How many accounts have running contracts in Branch location 1?",
    "gold_sql": "select count(t1.account_id) from account as t1 inner join district as t2 on t1.district_id = t2.district_id inner join loan as t3 on t1.account_id = t3.account_id where t1.district_id = 1 and (t3.status = 'c' or t3.status = 'd')",
    "pred_sql": "select count(*) from account where district_id = 1 and status = 'running'",
    "exec_time": 104.85,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.25
  },
  {
    "id": 485,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?",
    "gold_sql": "select count(t1.client_id) from client as t1 inner join district as t2 on t1.district_id = t2.district_id where t1.gender = 'm' and t2.a15 = (select t3.a15 from district as t3 order by t3.a15 desc limit 1, 1)",
    "pred_sql": "select count(*) from client where gender = 'm' and district_id in (select district_id from loan where strftime('%y', date) = '1995' group by district_id order by count(*) desc limit 2 offset 1)",
    "exec_time": 132.41,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 486,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "Which are the top ten withdrawals (non-credit card) by district names for the month of January 1996?",
    "gold_sql": "select distinct t1.a2 from district as t1 inner join account as t2 on t1.district_id = t2.district_id inner join trans as t3 on t2.account_id = t3.account_id where t3.type = 'vydaj' and t3.date like '1996-01%' order by a2 asc limit 10",
    "pred_sql": "select district.a2, sum(trans.amount) as total_withdrawals from trans join account on trans.account_id = account.account_id join district on account.district_id = district.district_id where trans.type = 'prijem' and strftime('%y-%m', trans.date) = '1996-01' group by district.a2 order by total_withdrawals desc limit 10",
    "exec_time": 161.05,
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 487,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "How many accounts have running contracts in Branch location 1?",
    "gold_sql": "select count(t1.account_id) from account as t1 inner join district as t2 on t1.district_id = t2.district_id inner join loan as t3 on t1.account_id = t3.account_id where t1.district_id = 1 and (t3.status = 'c' or t3.status = 'd')",
    "pred_sql": "select count(*) from account where district_id = 1 and status = 'running'",
    "exec_time": 105.88,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.25
  },
  {
    "id": 488,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?",
    "gold_sql": "select count(t1.client_id) from client as t1 inner join district as t2 on t1.district_id = t2.district_id where t1.gender = 'm' and t2.a15 = (select t3.a15 from district as t3 order by t3.a15 desc limit 1, 1)",
    "pred_sql": "select count(*) from client where gender = 'm' and district_id in (select district_id from loan where strftime('%y', date) = '1995' group by district_id order by count(*) desc limit 2 offset 1)",
    "exec_time": 132.56,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 489,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "Who are the account holder identification numbers whose who have transactions on the credit card with the amount is less than the average, in 1998?",
    "gold_sql": "select t1.account_id from trans as t1 inner join account as t2 on t1.account_id = t2.account_id where strftime('%y', t1.date) = '1998' and t1.operation = 'vyber kartou' and t1.amount < (select avg(amount) from trans where strftime('%y', date) = '1998')",
    "pred_sql": "select account_id from trans where account_id in (select account_id from trans where type = 'prijem' and amount < (select avg(amount) from trans where date between '1998-01-01' and '1998-12-31' and type = 'prijem')) and date between '1998-01-01' and '1998-12-31' and type =",
    "exec_time": 161.34,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 490,
    "db_id": "financial",
    "difficulty": "challenging",
    "question": "Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000.",
    "gold_sql": "select t3.type from district as t1 inner join account as t2 on t1.district_id = t2.district_id inner join disp as t3 on t2.account_id = t3.account_id where t3.type != 'owner' and t1.a11 between 8000 and 9000",
    "pred_sql": "select t2.type from account as t1 inner join disp as t2 on t1.account_id = t2.account_id inner join client as t3 on t3.client_id = t2.client_id inner join district as t4 on t4.district_id = t3.district_id where t4.a10 between 8000 and 9000 and t1.account_id not in (select account_id from loan) group by t2.type",
    "exec_time": 159.34,
    "ex": false,
    "sm": false,
    "cm": 0.25,
    "ast": 0.0
  },
  {
    "id": 491,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "What is the average number of crimes committed in 1995 in regions where the number exceeds 4000 and the region has accounts that are opened starting from the year 1997?",
    "gold_sql": "select avg(t1.a15) from district as t1 inner join account as t2 on t1.district_id = t2.district_id where strftime('%y', t2.date) >= '1997' and t1.a15 > 4000",
    "pred_sql": "select avg(t2.num_crimes) from trans as t1 inner join (select district_id, count(*) as num_crimes from account where year(date) >= 1997 group by district_id having count(*) > 4000) as t2 on t1.district_id = t2.district_id where year(t1.date) = 1995",
    "exec_time": 153.76,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 492,
    "db_id": "financial",
    "difficulty": "simple",
    "question": "List all the withdrawals in cash transactions that the client with the id 3356 makes.",
    "gold_sql": "select t4.trans_id from client as t1 inner join disp as t2 on t1.client_id = t2.client_id inner join account as t3 on t2.account_id = t3.account_id inner join trans as t4 on t3.account_id = t4.account_id where t1.client_id = 3356 and t4.operation = 'vyber'",
    "pred_sql": "select trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account from trans where account_id = 3356 and type = 'prijem' and operation = 'prevod z uctu'",
    "exec_time": 132.84,
    "ex": true,
    "sm": false,
    "cm": 0.0,
    "ast": 0.01666666666666672
  },
  {
    "id": 493,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women?",
    "gold_sql": "select cast(sum(t2.gender = 'f') as real) * 100 / count(t2.client_id) from district as t1 inner join client as t2 on t1.district_id = t2.district_id where t1.a11 > 10000",
    "pred_sql": "select cast(sum(case when t1.gender = 'f' then 1 else 0 end) as real) * 100 / count(*) from client as t1 inner join account as t2 on t1.client_id = t2.client_id inner join district as t3 on t2.district_id = t3.district_id where t3.a10 > 10000",
    "exec_time": 152.72,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.33333333333333337
  },
  {
    "id": 494,
    "db_id": "financial",
    "difficulty": "challenging",
    "question": "What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997?",
    "gold_sql": "select cast((sum(case when strftime('%y', t1.date) = '1997' then t1.amount else 0 end) - sum(case when strftime('%y', t1.date) = '1996' then t1.amount else 0 end)) as real) * 100 / sum(case when strftime('%y', t1.date) = '1996' then t1.amount else 0 end) from loan as t1 inner join account as t2 on t1.account_id = t2.account_id inner join disp as t3 on t3.account_id = t2.account_id inner join client as t4 on t4.client_id = t3.client_id where t4.gender = 'm' and t3.type = 'owner'",
    "pred_sql": "select sum(amount) * 100 / nullif((select sum(amount) from loan where account_id in (select account_id from disp where client_id in (select client_id from client where gender = 'm' and date between '1996-01-01' and '1997-12-31'))), 0) as growth_rate from loan where account_id in (select account_id from disp where client_id in (select client_id",
    "exec_time": 163.02,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  },
  {
    "id": 495,
    "db_id": "financial",
    "difficulty": "challenging",
    "question": "How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total?",
    "gold_sql": "select t1.frequency, t2.k_symbol from account as t1 inner join (select account_id, k_symbol, sum(amount) as total_amount from `order` group by account_id, k_symbol) as t2 on t1.account_id = t2.account_id where t1.account_id = 3 and t2.total_amount = 3539",
    "pred_sql": "select count(*) from trans where account_id = 3 and type = 'vydaj' and amount = 3539",
    "exec_time": 113.27,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.34246575342465757
  },
  {
    "id": 496,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "What percentage of male clients request for weekly statements to be issued?",
    "gold_sql": "select cast(sum(t1.gender = 'm') as real) * 100 / count(t1.client_id) from client as t1 inner join district as t3 on t1.district_id = t3.district_id inner join account as t2 on t2.district_id = t3.district_id inner join disp as t4 on t1.client_id = t4.client_id and t2.account_id = t4.account_id where t2.frequency = 'poplatek tydne'",
    "pred_sql": "select cast(sum(case when t2.gender = 'm' then 1 else 0 end) as real) * 100 / count(*) from account as t1 inner join client as t2 on t1.district_id = t2.district_id where t1.frequency = 'poplatek mesicne'",
    "exec_time": 143.4,
    "ex": true,
    "sm": false,
    "cm": 0.0,
    "ast": 0.43243243243243246
  },
  {
    "id": 497,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "Name the account numbers of female clients who are oldest and have lowest average salary?",
    "gold_sql": "select t3.account_id from client as t1 inner join district as t2 on t1.district_id = t2.district_id inner join account as t3 on t2.district_id = t3.district_id inner join disp as t4 on t1.client_id = t4.client_id and t4.account_id = t3.account_id where t1.gender = 'f' order by t1.birth_date asc, t2.a11 asc limit 1",
    "pred_sql": "select t1.account_id from account as t1 inner join client as t2 on t1.district_id = t2.district_id where t2.gender = 'f' group by t1.account_id having min(t2.birth_date) and avg(t1.a10)",
    "exec_time": 141.05,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.4794520547945206
  },
  {
    "id": 498,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "What is the average amount of loan which are still on running contract with statement issuance after each transaction?",
    "gold_sql": "select avg(t2.amount) from account as t1 inner join loan as t2 on t1.account_id = t2.account_id where t2.status in ('c', 'd') and t1.frequency = 'poplatek po obratu'",
    "pred_sql": "select avg(t.amount) from trans t join loan l on t.account_id = l.account_id where l.status = 'a' and t.date between l.date and l.date + interval l.duration month",
    "exec_time": 124.28,
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333,
    "ast": 0.0
  },
  {
    "id": 499,
    "db_id": "financial",
    "difficulty": "moderate",
    "question": "Provide the IDs and age of the client with high level credit card, which is eligible for loans.",
    "gold_sql": "select t1.client_id, strftime('%y', current_timestamp) - strftime('%y', t3.birth_date) from disp as t1 inner join card as t2 on t2.disp_id = t1.disp_id inner join client as t3 on t1.client_id = t3.client_id where t2.type = 'gold' and t1.type = 'owner'",
    "pred_sql": "select c.client_id, datediff(current_date, c.birth_date) / 365 as age from client c join disp d on c.client_id = d.client_id join card on d.disp_id = card.disp_id where card.type = 'gold' and c.district_id in (select district_id from account where frequency = 'poplatek mesicne') group by c.client_id having age > 25",
    "exec_time": 165.8,
    "ex": false,
    "sm": false,
    "cm": 0.0,
    "ast": 0.0
  }
]