[
  {
    "id": 0,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "What is the ratio of customers who pay in EUR against customers who pay in CZK?",
    "gold_sql": "select cast(sum(iif(currency = 'eur', 1, 0)) as float) / sum(iif(currency = 'czk', 1, 0)) as ratio from customers",
    "pred_sql": "select cast(sum(case when t2.currency = 'czk' then 1 else 0 end) as real) * 100 / count(*) from transactions_1k as t1 inner join customers as t2 on t1.customerid = t2.customerid",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 1,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "In 2012, who had the least consumption in LAM?",
    "gold_sql": "select t1.customerid from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where t1.segment = 'lam' and substr(t2.date, 1, 4) = '2012' group by t1.customerid order by sum(t2.consumption) asc limit 1",
    "pred_sql": "select customerid from yearmonth where date like '2012%' and segment = 'lam' group by customerid order by sum(consumption) limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.5
  },
  {
    "id": 2,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "What was the average monthly consumption of customers in SME for the year 2013?",
    "gold_sql": "select avg(t2.consumption) / 12 from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where substr(t2.date, 1, 4) = '2013' and t1.segment = 'sme'",
    "pred_sql": "select avg(consumption) from yearmonth where customerid in (select customerid from customers where segment = 'sme') and date like '2013%'",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 3,
    "db_id": "debit_card_specializing",
    "difficulty": "challenging",
    "question": "What was the difference in gas consumption between CZK-paying customers and EUR-paying customers in 2012?",
    "gold_sql": "select sum(iif(t1.currency = 'czk', t2.consumption, 0)) - sum(iif(t1.currency = 'eur', t2.consumption, 0)) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where substr(t2.date, 1, 4) = '2012'",
    "pred_sql": "select t1.customerid as ( select sum(price) when segment as sum(case when =id sum'eur' when t2.currency = 'czk' when =id sum'eur' - sum0.currency1 'czk' as difference from transactions_1k000 join)))))))))))))))))))))))))))))))))))&",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 4,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "Which year recorded the most consumption of gas paid in CZK?",
    "gold_sql": "select substr(t2.date, 1, 4) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where t1.currency = 'czk' group by substr(t2.date, 1, 4) order by sum(t2.consumption) desc limit 1",
    "pred_sql": "select date, max(consumption) as maxconsumption from yearmonth where customerid in (select customerid from customers where currency = 'czk') group by date order by maxconsumption desc limit 1",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 5,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "What was the gas consumption peak month for SME customers in 2013?",
    "gold_sql": "select substr(t2.date, 5, 2) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where substr(t2.date, 1, 4) = '2013' and t1.segment = 'sme' group by substr(t2.date, 5, 2) order by sum(t2.consumption) desc limit 1",
    "pred_sql": "select date from yearmonth where customerid in (select customerid from customers where segment = 'sme') and date like '2013%' group by date order by sum(consumption) desc limit 1",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 6,
    "db_id": "debit_card_specializing",
    "difficulty": "challenging",
    "question": "What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME?",
    "gold_sql": "select cast(sum(iif(t1.segment = 'sme', t2.consumption, 0)) as real) / count(t1.customerid) - cast(sum(iif(t1.segment = 'lam', t2.consumption, 0)) as real) / count(t1.customerid) , cast(sum(iif(t1.segment = 'lam', t2.consumption, 0)) as real) / count(t1.customerid) - cast(sum(iif(t1.segment = 'kam', t2.consumption, 0)) as real) / count(t1.customerid) , cast(sum(iif(t1.segment = 'kam', t2.consumption, 0)) as real) / count(t1.customerid) - cast(sum(iif(t1.segment = 'sme', t2.consumption, 0)) as real) / count(t1.customerid) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where t1.currency = 'czk' and t2.consumption = ( select min(consumption) from yearmonth ) and t2.date between 201301 and 201312",
    "pred_sql": "select avg(case when t2.segment = 'sme' then t1.consumption else 0 end) - avg(case when t2.segment = 'lam' then t1.consumption else 0 end) as sme_lam, avg(case when t2.segment = 'lam' then t1.consumption else 0 end) - avg(case when t2.segment = 'kam' then t1.consum",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 7,
    "db_id": "debit_card_specializing",
    "difficulty": "challenging",
    "question": "Which of the three segments—SME, LAM and KAM—has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013?",
    "gold_sql": "select cast((sum(iif(t1.segment = 'sme' and t2.date like '2013%', t2.consumption, 0)) - sum(iif(t1.segment = 'sme' and t2.date like '2012%', t2.consumption, 0))) as float) * 100 / sum(iif(t1.segment = 'sme' and t2.date like '2012%', t2.consumption, 0)), cast(sum(iif(t1.segment = 'lam' and t2.date like '2013%', t2.consumption, 0)) - sum(iif(t1.segment = 'lam' and t2.date like '2012%', t2.consumption, 0)) as float) * 100 / sum(iif(t1.segment = 'lam' and t2.date like '2012%', t2.consumption, 0)) , cast(sum(iif(t1.segment = 'kam' and t2.date like '2013%', t2.consumption, 0)) - sum(iif(t1.segment = 'kam' and t2.date like '2012%', t2.consumption, 0)) as float) * 100 / sum(iif(t1.segment = 'kam' and t2.date like '2012%', t2.consumption, 0)) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid",
    "pred_sql": "with segment_consumptional as percentageincrease'2013-2.date = consumption - t2.consumption1 consumption) / t2.consumption1 consumption) * 100) as percentageincrease from transactions_1k as t1 inner join (select customerid, date, customerid, yearmonth where date1 between '2012-01-01' and '2012-12-31' group by customerid",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 8,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "How much did customer 6 consume in total between August and November 2013?",
    "gold_sql": "select sum(consumption) from yearmonth where customerid = 6 and date between '201308' and '201311'",
    "pred_sql": "select sum(consumption) from yearmonth where customerid = 6 and date between '201308' and '201311'",
    "ex": true,
    "sm": true,
    "cm": 1.0
  },
  {
    "id": 9,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "How many more \"discount\" gas stations does the Czech Republic have compared to Slovakia?",
    "gold_sql": "select sum(iif(country = 'cze', 1, 0)) - sum(iif(country = 'svk', 1, 0)) from gasstations where segment = 'discount'",
    "pred_sql": "select sum(case when t2.segment = 'discount' then 1 else 0 end) - sum(case when t1.segment = 'discount' then 1 else 0 end) as difference from gasstations as t1 join gasstations as t2 on t1.country = 'cze' and t2.country = 'sk' and t1.gasstationid = t2.gasstationid where t1.segment = 'value for money",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 10,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "Is it true that more SMEs pay in Czech koruna than in euros? If so, how many more?",
    "gold_sql": "select sum(currency = 'czk') - sum(currency = 'eur') from customers where segment = 'sme'",
    "pred_sql": "select sum(case when t2.currency = 'eur' then 1 else 0 end) - sum(case when t2.currency = 'czk' then 1 else 0 end) as difference from transactions_1k as t1 join customers as t2 on t1.customerid = t2.customerid where t2.segment = 'sme'",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 11,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "How many percent of LAM customer consumed more than 46.73?",
    "gold_sql": "select cast(sum(iif(t2.consumption > 46.73, 1, 0)) as float) * 100 / count(t1.customerid) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where t1.segment = 'lam'",
    "pred_sql": "select casted_consumption as t.customer10.0.customerid from yearmonth.consumption, transactions_1k yearmonth.customerid tconsumption > 4673 t as t0t as transactions.customerid = t4673.customerid and t0.date = t4673.date and t0.consumption > 46.73) / sum(t4673.consumption) * 100 from yearmonth",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 12,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "In February 2012, what percentage of customers consumed more than 528.3?",
    "gold_sql": "select cast(sum(iif(consumption > 528.3, 1, 0)) as float) * 100 / count(customerid) from yearmonth where date = '201202'",
    "pred_sql": "select cast(sum(iif(t2.consumption > 528.3, 1, 0)) as real) * 100 / count(t2.customerid) from yearmonth as t1 inner join yearmonth120.customerid= case when strftime('%y-%m', t1.date) = '2012-02' then 1 else 0 end",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 13,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "What is the highest monthly consumption in the year 2012?",
    "gold_sql": "select sum(consumption) from yearmonth where substr(date, 1, 4) = '2012' group by substr(date, 5, 2) order by sum(consumption) desc limit 1",
    "pred_sql": "select max(consumption) from yearmonth where date like '2012%';",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 14,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "Please list the product description of the products consumed in September, 2013.",
    "gold_sql": "select t3.description from transactions_1k as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid inner join products as t3 on t1.productid = t3.productid where t2.date = '201309'",
    "pred_sql": "select t3.description from transactions_1k as t1 inner join products as t3 on t1.productid = t3.productid where t1.date between '2013-09-01' and '2013-09-30'",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 15,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "Please list the countries of the gas stations with transactions taken place in June, 2013.",
    "gold_sql": "select distinct t2.country from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid inner join yearmonth as t3 on t1.customerid = t3.customerid where t3.date = '201306'",
    "pred_sql": "select distinct t2.country from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where strftime('%y-%m', t.date) group by t.country",
    "ex": false,
    "sm": false,
    "cm": 0.25
  },
  {
    "id": 16,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "Among the customers who paid in euro, how many of them have a monthly consumption of over 1000?",
    "gold_sql": "select count(*) from yearmonth as t1 inner join customers as t2 on t1.customerid = t2.customerid where t2.currency = 'eur' and t1.consumption > 1000.00",
    "pred_sql": "select count(*) from customers where segment = 'lid' and customerid in (select customerid from yearmonth where consumption > 1000)",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 17,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "Please list the product descriptions of the transactions taken place in the gas stations in the Czech Republic.",
    "gold_sql": "select distinct t3.description from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid inner join products as t3 on t1.productid = t3.productid where t2.country = 'cze'",
    "pred_sql": "select t3.description from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid inner join products as t3 on t1.productid = t3.productid where t2.country = 'cze'",
    "ex": true,
    "sm": false,
    "cm": 1.0
  },
  {
    "id": 18,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "Please list the disparate time of the transactions taken place in the gas stations from chain no. 11.",
    "gold_sql": "select distinct t1.time from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t2.chainid = 11",
    "pred_sql": "select distinct t1.time from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t2.chainid = 11",
    "ex": true,
    "sm": true,
    "cm": 1.0
  },
  {
    "id": 19,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "Among the transactions made in the gas stations in the Czech Republic, how many of them are taken place after 2012/1/1?",
    "gold_sql": "select count(t1.transactionid) from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t2.country = 'cze' and strftime('%y', t1.date) >= '2012'",
    "pred_sql": "select count(*) from transactions_1k where gasstationid in (select gasstationid from gasstations where country = 'cze') and date > '2012-01-01'",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 20,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "What kind of currency did the customer paid at 16:25:00 in 2012/8/24?",
    "gold_sql": "select distinct t3.currency from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid inner join customers as t3 on t1.customerid = t3.customerid where t1.date = '2012-08-24' and t1.time = '16:25:00'",
    "pred_sql": "select t2.currency from transactions_1k as t1 inner join customers as t2 on t1.customerid = t2.customerid where t1.date = '2012-08-24' and t1.time = '16:25:00'",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 21,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "What segment did the customer have at 2012/8/23 21:20:00?",
    "gold_sql": "select t2.segment from transactions_1k as t1 inner join customers as t2 on t1.customerid = t2.customerid where t1.date = '2012-08-23' and t1.time = '21:20:00'",
    "pred_sql": "select t2.segment from transactions_1k as t1 join customers as t2 on t1.customerid = t2.customerid where t1.date = '2012-08-23' and t1.time = '21:20:00'",
    "ex": true,
    "sm": false,
    "cm": 1.0
  },
  {
    "id": 22,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "For all the transactions happened during 8:00-9:00 in 2012/8/26, how many happened in CZE?",
    "gold_sql": "select count(t1.transactionid) from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t1.date = '2012-08-26' and t1.time between '08:00:00' and '09:00:00' and t2.country = 'cze'",
    "pred_sql": "select count(*) from transactions_1k where date = '2012-08-26' and time >= '08:00:00' and time < '09:00:00' and gasstationid in (select gasstationid from gasstations where country = 'cze')",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 23,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "What's the nationality of the customer who spent 548.4 in 2012/8/24?",
    "gold_sql": "select t2.country from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t1.date = '2012-08-24' and t1.price = 548.4",
    "pred_sql": "select t2.country from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid inner join customers as t3 on t1.customerid = t3.customerid where t1.date = '2012-08-24' and t1.amount = 548 and t3.customerid = (select customerid from yearmonth where date = '20120824",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 24,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "What is the percentage of the customers who used EUR in 2012/8/25?",
    "gold_sql": "select cast(sum(iif(t2.currency = 'eur', 1, 0)) as float) * 100 / count(t1.customerid) from transactions_1k as t1 inner join customers as t2 on t1.customerid = t2.customerid where t1.date = '2012-08-25'",
    "pred_sql": "select cast(sum(case when t3.currency = 'eur' then 1 else 0 end) as real) * 100 / count(*) from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid inner join customers as t3 on t1.customerid = t3.customerid where t1.date = '2012-08-25'",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 25,
    "db_id": "debit_card_specializing",
    "difficulty": "challenging",
    "question": "For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013?",
    "gold_sql": "select cast(sum(iif(substring(date, 1, 4) = '2012', consumption, 0)) - sum(iif(substring(date, 1, 4) = '2013', consumption, 0)) as float) / sum(iif(substring(date, 1, 4) = '2012', consumption, 0)) from yearmonth where customerid = ( select t1.customerid from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t1.date = '2012-08-25' and t1.price = 1513.12 )",
    "pred_sql": "select (sum(case when t2.date like '2012%' then t1.amount else 0 end) - sum(case when t2.date like '2013%' then t1.amount else 0 end)) / sum(case when t2.date like '2012%' then t1.amount else 0 end) * 100 as consumptiondecreaserate (select consumption201 yearmonth join transactions_1k as t1 on",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 26,
    "db_id": "debit_card_specializing",
    "difficulty": "simple",
    "question": "What is the percentage of \"premium\" against the overall segment in Country = \"SVK\"?",
    "gold_sql": "select cast(sum(iif(country = 'svk' and segment = 'premium', 1, 0)) as float) * 100 / sum(iif(country = 'svk', 1, 0)) from gasstations",
    "pred_sql": "select cast(sum(case when t2.segment = 'premium' then 1 else 0 end) as real) * 100 / count(*) from transactions_1k inner join gasstations as t1 on transactions_1 on t1.gasstationid = t21.gasstationid inner join yearmonth as t4 on t4 on t1.gasstationid = t24.gasstationid inner join gasstations as4.customerid on t",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 27,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "What is the amount spent by customer \"38508\" at the gas stations? How much had the customer spent in January 2012?",
    "gold_sql": "select sum(t1.price ) , sum(iif(t3.date = '201201', t1.price, 0)) from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid inner join yearmonth as t3 on t1.customerid = t3.customerid where t1.customerid = '38508'",
    "pred_sql": "select sum(price) as totalspent from transactions_1k where customerid = 38508 and date between '2012-01%'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 28,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used?",
    "gold_sql": "select t2.customerid, sum(t2.price / t2.amount), t1.currency from customers as t1 inner join transactions_1k as t2 on t1.customerid = t2.customerid where t2.customerid = ( select customerid from yearmonth order by consumption desc limit 1 ) group by t2.customerid, t1.currency",
    "pred_sql": "select customerspending.customerid (select price from transactions_avg( ctransactions_1k where customerid = ( select customerid from_1k where customerspending group by customerid order by price( transactions_1k )_avg desc limit 1 ) group by segment, currency",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 29,
    "db_id": "debit_card_specializing",
    "difficulty": "moderate",
    "question": "For all the people who paid more than 29.00 per unit of product id No.5. Give their consumption status in the August of 2012.",
    "gold_sql": "select t2.consumption from transactions_1k as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where t1.price / t1.amount > 29.00 and t1.productid = 5 and t2.date = '201208'",
    "pred_sql": "select t2.consumption from transactions_1k as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where t1.price > 29 and t1.productid = 5 and t1.date = 201208 and t2.customerid = 5",
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 30,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "What's Angela Sanders's major?",
    "gold_sql": "select t2.major_name from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t1.first_name = 'angela' and t1.last_name = 'sanders'",
    "pred_sql": "select major_name from major where member on member.member_id = member.link_to_major where first_name = 'angela' and last_name = 'sanders';",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 31,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Among the students from the Student_Club who attended the event \"Women's Soccer\", how many of them want a T-shirt that's in medium size?",
    "gold_sql": "select count(t1.event_id) from event as t1 inner join attendance as t2 on t1.event_id = t2.link_to_event inner join member as t3 on t2.link_to_member = t3.member_id where t1.event_name = 'women''s soccer' and t3.t_shirt_size = 'medium'",
    "pred_sql": "select count(*) from member where t_shirt_size = 'medium' and link_to_major in (select link_to_major from major where major_name = 'women''s soccer') and link_to_member in (select link_to_member from attendance where link_to_event = (select event_id from event where event_name = 'women''s soccer'))",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 32,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Among the events attended by more than 10 members of the Student_Club, how many of them are meetings?",
    "gold_sql": "select t1.event_name from event as t1 inner join attendance as t2 on t1.event_id = t2.link_to_event group by t1.event_id having count(t2.link_to_event) > 10 except select t1.event_name from event as t1 where t1.type = 'meeting'",
    "pred_sql": "select count(*) from event where event_id in (select link_to_event from attendance group by link_to_event having count(link_to_member) > 10 and event_name like 'meeting%')",
    "ex": false,
    "sm": false,
    "cm": 0.25
  },
  {
    "id": 33,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "List all the names of events that had an attendance of over 20 students but were not fundraisers.",
    "gold_sql": "select t1.event_name from event as t1 inner join attendance as t2 on t1.event_id = t2.link_to_event group by t1.event_id having count(t2.link_to_event) > 20 except select t1.event_name from event as t1 where t1.type = 'fundraiser'",
    "pred_sql": "select event_name from event where event_id not in (select link_to_event from attendance where link_to_member in (select link_to_member from expense where expense_description like '20%')) and link_to_event in (select link_to_event from attendance) group by event_name having count(link_to_member) > 20",
    "ex": false,
    "sm": false,
    "cm": 0.25
  },
  {
    "id": 34,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "What is the amount of the funds that the Vice President received?",
    "gold_sql": "select t2.amount from member as t1 inner join income as t2 on t1.member_id = t2.link_to_member where t1.position = 'vice president'",
    "pred_sql": "select t1.amount from income as sum1 = (select amount inner join member on income_id where link_to_member = (select link_to_member from member as t =_id where first_name = 'grant' and last_name = 'gilmour') and source = 'dues' and notes = 'none'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 35,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "List the full name of the Student_Club members that grew up in Illinois state.",
    "gold_sql": "select t1.first_name, t1.last_name from member as t1 inner join zip_code as t2 on t1.zip = t2.zip_code where t2.state = 'illinois'",
    "pred_sql": "select first_name, last_name from member where zip in (select zip_code from zip_code where state = 'il')",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 36,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Was each expense in October Meeting on October 8, 2019 approved?",
    "gold_sql": "select t3.approved from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event inner join expense as t3 on t2.budget_id = t3.link_to_budget where t1.event_name = 'october meeting' and t1.event_date like '2019-10-08%'",
    "pred_sql": "select expense_id from expense where expense_date like '2019-10-08' and approved = 'true'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 37,
    "db_id": "student_club",
    "difficulty": "challenging",
    "question": "Calculate the total average cost that Elijah Allen spent in the events on September and October.",
    "gold_sql": "select avg(t2.cost) from member as t1 inner join expense as t2 on t1.member_id = t2.link_to_member where t1.last_name = 'allen' and t1.first_name = 'elijah' and (substr(t2.expense_date, 6, 2) = '09' or substr(t2.expense_date, 6, 2) = '10')",
    "pred_sql": "select avg(t2.cost) from member as t1 inner join expense as t2 on t1.member_id = t2.link_to_member where t1.first_name = 'elijah' and t1.last_name = 'allen' and t2.expense_date between '2019-09-01' and '2019-10-31'",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 38,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Calculate the difference of the total amount spent in all events by the Student_Club in year 2019 and 2020.",
    "gold_sql": "select sum(case when substr(t1.event_date, 1, 4) = '2019' then t2.spent else 0 end) - sum(case when substr(t1.event_date, 1, 4) = '2020' then t2.spent else 0 end) as num from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event",
    "pred_sql": "select sum(cost) as date(event_id)) as 2 ( select t1.link_to_event, sum(t2.spent) as total_spent where where t1.event_id = t2.link_to_event and t1.event_date like '2019%'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 39,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "What was the notes of the fundraising on 2019/9/14?",
    "gold_sql": "select notes from income where source = 'fundraising' and date_received = '2019-09-14'",
    "pred_sql": "select t3.notes from expense as t1 join budget as t2 on t1.link_to_budget = t2.budget_id join attendance as t4 on t1.link_to_member = t4.link_to_member join member as t5 on t4.link_to_member = t5.member_id join zip_code as t6 on t5.zip = t6.zip_code where t1.expense_date = '2019-09-14' and t2.event_status = '",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 40,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "Tell the phone number of \"Carlo Jacobs\".",
    "gold_sql": "select phone from member where first_name = 'carlo' and last_name = 'jacobs'",
    "pred_sql": "select phone from member where last_name = 'jacobs' and first_name = 'carlo'",
    "ex": true,
    "sm": false,
    "cm": 1.0
  },
  {
    "id": 41,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "What is the status of the event which bought \"Post Cards, Posters\" on 2019/8/20?",
    "gold_sql": "select t1.event_status from budget as t1 inner join expense as t2 on t1.budget_id = t2.link_to_budget where t2.expense_description = 'post cards, posters' and t2.expense_date = '2019-08-20'",
    "pred_sql": "select t1.event as (select event where expense_date_approved on expense_date = '2019-08-20' join expense on event1_date.link_to_budget = event2_description.link_to_budget where event2_description.expense_description = 'post cards, posters'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 42,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "What was Brent Thomason's major?",
    "gold_sql": "select t2.major_name from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t1.first_name = 'brent' and t1.last_name = 'thomason'",
    "pred_sql": "select major_name from major where member_id = 'rec28orzgcm1dtqbz';",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 43,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "For all the club members from \"Business\" major, how many of them wear medium size t-shirt?",
    "gold_sql": "select count(t1.member_id) from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t2.major_name = 'business' and t1.t_shirt_size = 'medium'",
    "pred_sql": "select count(*) from member where link_to_major = 'rec09_to_to' and t_shirt_size = 'medium'",
    "ex": true,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 44,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "Which department was the President of the club in?",
    "gold_sql": "select t2.department from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t1.position = 'president'",
    "pred_sql": "select department from major where major_name = 'president';",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 45,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "State the date Connor Hilton paid his/her dues.",
    "gold_sql": "select t2.date_received from member as t1 inner join income as t2 on t1.member_id = t2.link_to_member where t1.first_name = 'connor' and t1.last_name = 'hilton' and t2.source = 'dues'",
    "pred_sql": "select date_received from income where link_to_member = 'rec28orzgcm1dtqbz' and source = 'dues'",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 46,
    "db_id": "student_club",
    "difficulty": "challenging",
    "question": "How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"?",
    "gold_sql": "select cast(sum(case when t2.event_name = 'yearly kickoff' then t1.amount else 0 end) as real) / sum(case when t2.event_name = 'october meeting' then t1.amount else 0 end) from budget as t1 inner join event as t2 on t1.link_to_event = t2.event_id where t1.category = 'advertisement' and t2.type = 'meeting'",
    "pred_sql": "select sum(case when t2.event_name = 'yearly kickoff' then 1 else 0 end) - sum(case when t2.event_name = 'october meeting' then 1 else 0 end) as difference from budget as t1 join event as t2 on t1.link_to_event = t2.event_id where t1.category = 'advertisement'",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 47,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "What is the total cost of the pizzas for all the events?",
    "gold_sql": "select sum(cost) from expense where expense_description = 'pizza'",
    "pred_sql": "select sum(cost) from expense where expense_description like '%pizza%'",
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 48,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "How many cities are there in Orange County, Virginia?",
    "gold_sql": "select count(city) from zip_code where county = 'orange county' and state = 'virginia'",
    "pred_sql": "select count(distinct city) from zip_code where county = 'orange' and state = 'va'",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 49,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "What does the person with the phone number \"809-555-3360\" major in?",
    "gold_sql": "select t2.major_name from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t1.phone = '809-555-3360'",
    "pred_sql": "select major_name from major where major_id in (select link_to_major from member where phone = '809-555-3360')",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 50,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "How many members attended the \"Women's Soccer\" event?",
    "gold_sql": "select count(t2.link_to_member) from event as t1 inner join attendance as t2 on t1.event_id = t2.link_to_event where t1.event_name = 'women''s soccer'",
    "pred_sql": "select count(distinct link_to_member) from attendance where link_to_event in (select event_id from event where event_name = 'women''s soccer')",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 51,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "List all the members of the \"School of Applied Sciences, Technology and Education\" department.",
    "gold_sql": "select t1.first_name, t1.last_name from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t2.department = 'school of applied sciences, technology and education'",
    "pred_sql": "select m.first_name, m.last_name from member m join major j on m.link_to_major = j.major_id where j.department = 'school of applied sciences, technology and education'",
    "ex": true,
    "sm": false,
    "cm": 1.0
  },
  {
    "id": 52,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Among all the closed events, which event has the highest spend-to-budget ratio?",
    "gold_sql": "select t2.event_name from budget as t1 inner join event as t2 on t1.link_to_event = t2.event_id where t2.status = 'closed' order by t1.spent / t1.amount desc limit 1",
    "pred_sql": "select event_id, event_budget_id in (select link_to_event from expense_date, cost) from 'closed') group by link_to_event order by sum(spent)/sum(remaining) desc limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 53,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "What is the highest amount of budget spend for an event?",
    "gold_sql": "select max(spent) from budget",
    "pred_sql": "select max(spent) from budget",
    "ex": true,
    "sm": true,
    "cm": 1.0
  },
  {
    "id": 54,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "What is the total amount of money spent for food?",
    "gold_sql": "select sum(spent) from budget where category = 'food'",
    "pred_sql": "select sum(spent) from budget where category = 'food'",
    "ex": true,
    "sm": true,
    "cm": 1.0
  },
  {
    "id": 55,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "List the name of students that have attended more than 7 events.",
    "gold_sql": "select t1.first_name, t1.last_name from member as t1 inner join attendance as t2 on t1.member_id = t2.link_to_member group by t2.link_to_member having count(t2.link_to_event) > 7",
    "pred_sql": "select first_name, last_name from member where member_id in (select link_to_member from attendance group by link_to_member having count(link_to_event) > 7)",
    "ex": true,
    "sm": false,
    "cm": 0.75
  },
  {
    "id": 56,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Which student has been entrusted to manage the budget for the Yearly Kickoff?",
    "gold_sql": "select t4.first_name, t4.last_name from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event inner join expense as t3 on t2.budget_id = t3.link_to_budget inner join member as t4 on t3.link_to_member = t4.member_id where t1.event_name = 'yearly kickoff'",
    "pred_sql": "select m.first_name, m.last_name from member m join budget b on m.member_id = b.link_to_member where b.event_status = 'open' and b.category = 'advertisement' order by m.member_id limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.2
  },
  {
    "id": 57,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "Which event has the lowest cost?",
    "gold_sql": "select t1.event_name from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event inner join expense as t3 on t2.budget_id = t3.link_to_budget order by t3.cost limit 1",
    "pred_sql": "select event_id, lowest_cost_event by event_id order by sum(cost) limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 58,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Based on the total cost for all event, what is the percentage of cost for Yearly Kickoff event?",
    "gold_sql": "select cast(sum(case when t1.event_name = 'yearly kickoff' then t3.cost else 0 end) as real) * 100 / sum(t3.cost) from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event inner join expense as t3 on t2.budget_id = t3.link_to_budget",
    "pred_sql": "select (select sum(cost) from expense where link_to_budget in (select budget_id from budget where event_status = 'open' and link_to_event = (select event_id from event where event_name = 'yearly kickoff'))) * 100 / (select sum(spent) from budget where event_status = 'open' and link_to_event = (select event_id from event where event_name = 'yearly kickoff'))",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 59,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "Indicate the top source of funds received in September 2019 based on their amount.",
    "gold_sql": "select source from income where date_received between '2019-09-01' and '2019-09-30' order by source desc limit 1",
    "pred_sql": "select source from income where date_received like '2019-09-%' group by source order by sum(amount) desc limit 1",
    "ex": true,
    "sm": false,
    "cm": 0.5
  },
  {
    "id": 60,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "How many members of the Student_Club have major in 'Physics Teaching'?",
    "gold_sql": "select count(t2.member_id) from major as t1 inner join member as t2 on t1.major_id = t2.link_to_major where t1.major_name = 'physics teaching'",
    "pred_sql": "select count(*) from member where link_to_major in (select major_id from major where major_name = 'physics teaching')",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 61,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Name the event with the highest amount spent on advertisement.",
    "gold_sql": "select t2.event_name from budget as t1 inner join event as t2 on t1.link_to_event = t2.event_id where t1.category = 'advertisement' order by t1.spent desc limit 1",
    "pred_sql": "select link_to_event_id from budget.link_to_event_id) from budget where event_id in (select expense_id from expense where category = 'advertisement')) order by spent desc limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 62,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Did Maya Mclean attend the 'Women's Soccer' event?",
    "gold_sql": "select case when t3.event_name = 'women''s soccer' then 'yes' end as result from member as t1 inner join attendance as t2 on t1.member_id = t2.link_to_member inner join event as t3 on t2.link_to_event = t3.event_id where t1.first_name = 'maya' and t1.last_name = 'mclean'",
    "pred_sql": "select t1.event_id from event as t1 inner join attendance as t2 on t1.event_id = t2.link_to_event inner join member as t3 on t2.link_to_member = t3.member_id where t1.event_name = 'women\\''",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 63,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Indicate the cost of posters for 'September Speaker' event.",
    "gold_sql": "select t3.cost from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event inner join expense as t3 on t2.budget_id = t3.link_to_budget where t1.event_name = 'september speaker' and t3.expense_description = 'posters'",
    "pred_sql": "select t3.cost from expense as t1 inner join budget as t2 on t1.link_to_budget = t2.budget_id inner join event as t3 on t2.link_to_event = t3.event_id where t1.expense_description = 'post cards, posters' and t3.event_name = 'september speaker'",
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 64,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Indicate the name of the closed event whose cost has exceeded the budget the most.",
    "gold_sql": "select t2.event_name from budget as t1 inner join event as t2 on t2.event_id = t1.link_to_event where t1.event_status = 'closed' and t1.remaining < 0 order by t1.remaining limit 1",
    "pred_sql": "select event_id, sum(cost) as e from expense.link_to.expense_id expense where link_to_event in (select event_id from budget.budget_id where))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))&",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 65,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Identify the type of expenses and their total value approved for 'October Meeting' event.",
    "gold_sql": "select t1.type, sum(t3.cost) from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event inner join expense as t3 on t2.budget_id = t3.link_to_budget where t1.event_name = 'october meeting'",
    "pred_sql": "select e.type_expense as type_value from budget as (select expense_description from expense from expense where link_to_attendance join expense e on e.link_to_budget = e_to_bendance.link_to_budget join budget b on b.link_to_event = e_to_bendance.link_to_budget join event on event.event_id = b.link_to_event where event.event_name = 'october meeting' and e.approved = 'true' group by e.expense_description",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 66,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.",
    "gold_sql": "select t2.category, sum(t2.amount) from event as t1 join budget as t2 on t1.event_id = t2.link_to_event where t1.event_name = 'april speaker' group by t2.category order by sum(t2.amount) asc",
    "pred_sql": "select category, sum(amount) as amount_budgeted from budget where link_to_event = 'rec0.event_id' and category like 'april speaker' group by category order by amount_budgeted asc",
    "ex": true,
    "sm": false,
    "cm": 0.4
  },
  {
    "id": 67,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "Mention the total expense used on 8/20/2019.",
    "gold_sql": "select sum(cost) from expense where expense_date = '2019-08-20'",
    "pred_sql": "select sum(cost) from expense where expense_date = '2019-08-20'",
    "ex": true,
    "sm": true,
    "cm": 1.0
  },
  {
    "id": 68,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "List out the full name and total cost that member id \"rec4BLdZHS2Blfp4v\" incurred?",
    "gold_sql": "select t1.first_name, t1.last_name, sum(t2.cost) from member as t1 inner join expense as t2 on t1.member_id = t2.link_to_member where t1.member_id = 'rec4bldzhs2blfp4v'",
    "pred_sql": "select t2.first_name, t2.last_name, sum(t1.cost) as total_cost from expense as t1 join member as t2 on t1.link_to_member = t2.member_id where t1.link_to_member = 'rec4bldzhs2blfp4v' group by t2.first_name, t2.last_name",
    "ex": false,
    "sm": false,
    "cm": 0.5
  },
  {
    "id": 69,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "State what kind of expenses that Sacha Harrison incurred?",
    "gold_sql": "select t2.expense_description from member as t1 inner join expense as t2 on t1.member_id = t2.link_to_member where t1.first_name = 'sacha' and t1.last_name = 'harrison'",
    "pred_sql": "select expense_description from expense where link_to_member = 'rec28orzgcm1dtqbz'",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 70,
    "db_id": "student_club",
    "difficulty": "simple",
    "question": "State the category of events were held at MU 215.",
    "gold_sql": "select distinct t2.category from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event where t1.location = 'mu 215'",
    "pred_sql": "select category from budget where link_to_event in (select event_id from event where location = 'mu 215')",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 71,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "List the last name of members with a major in environmental engineering and include its department and college name.",
    "gold_sql": "select t2.last_name, t1.department, t1.college from major as t1 inner join member as t2 on t1.major_id = t2.link_to_major where t2.position = 'member' and t1.major_name = 'environmental engineering'",
    "pred_sql": "select t2.last_name, t3.department, t3.college from member as t1 join major m on m.major_id on t1.link_to_major = t2_id.major_id inner join major as t3 on t2_id.department = t3.department where t2_id.major_name = college3",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 72,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "What are the budget category of the events located at MU 215 and a guest speaker type with a 0 budget spent?",
    "gold_sql": "select distinct t2.category, t1.type from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event where t1.location = 'mu 215' and t2.spent = 0 and t1.type = 'guest speaker'",
    "pred_sql": "select t1.category from budget as t join event as e on t.link_to_event = e.event_id where e.location = 'mu 215' and t.spent = 0 and t.category like '%guest speaker%'",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 73,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "Among the members with t-shirt size of medium, what is the percentage of the amount 50 received by the Student_Club?",
    "gold_sql": "select cast(sum(case when t2.amount = 50 then 1.0 else 0 end) as real) * 100 / count(t2.income_id) from member as t1 inner join income as t2 on t1.member_id = t2.link_to_member where t1.position = 'member' and t1.t_shirt_size = 'medium'",
    "pred_sql": "select sum(case when t2.source = 'dues' then t1.amount else 0 end) / sum(t1.amount) * 100 as percentage from income as t1 join member as t3 on * from income on case when t2.t_shirt_size = 'medium' then 1 else 0 end = 1 and t1.link_to_member = t2.member_id",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 74,
    "db_id": "student_club",
    "difficulty": "moderate",
    "question": "List the names of closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020.",
    "gold_sql": "select distinct event_name from event where type = 'game' and date(substr(event_date, 1, 10)) between '2019-03-15' and '2020-03-20' and status = 'closed'",
    "pred_sql": "select event_name from event where status = 'closed' and event_name like '%game%' and event_date between '2019-03-15' and '2020-03-20'",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 75,
    "db_id": "student_club",
    "difficulty": "challenging",
    "question": "Give the full name and contact number of members who had to spend more than average on each expense.",
    "gold_sql": "select distinct t3.first_name, t3.last_name, t3.phone from expense as t1 inner join budget as t2 on t1.link_to_budget = t2.budget_id inner join member as t3 on t3.member_id = t1.link_to_member where t1.cost > ( select avg(t1.cost) from expense as t1 inner join budget as t2 on t1.link_to_budget = t2.budget_id inner join member as t3 on t3.member_id = t1.link_to_member )",
    "pred_sql": "select t1.first_name , t1.last_name , t1.phone from member on m2.member_id = m.member_id where member as t3 where t1.cost > (select avg(cost) from expense) and t1.link_to_member = t2.member_id and t2.member_id = t3.member_id",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 76,
    "db_id": "student_club",
    "difficulty": "challenging",
    "question": "Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it.",
    "gold_sql": "select t2.first_name, t2.last_name, t1.cost from expense as t1 inner join member as t2 on t1.link_to_member = t2.member_id where t1.expense_description = 'water, veggie tray, supplies'",
    "pred_sql": "select t3.first_name, t3.last_name, sum(t2.cost) as total_spent from expense as t2 join member as t3 on t2.link_to_member = t3.member_id join budget as t1 on t2.link_to_budget = t1.budget_id where t2.expense_description like '%water, cookies%' or t2.expense_description like '%veggie tray%' or t2.expense_description like '%supplies%' group by t2.link_to",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 77,
    "db_id": "student_club",
    "difficulty": "challenging",
    "question": "Write the full names of students who received funds on the date of 9/9/2019 and include the amount received.",
    "gold_sql": "select distinct t3.first_name, t3.last_name, t4.amount from event as t1 inner join attendance as t2 on t1.event_id = t2.link_to_event inner join member as t3 on t3.member_id = t2.link_to_member inner join income as t4 on t4.link_to_member = t3.member_id where t4.date_received = '2019-09-09'",
    "pred_sql": "select t3.first_name, t3.last_name, t4.amount from expense as t1 join income as t4 on t1.link_to_member = t4.link_to_member join member as t2 on t1.link_to_member = t2.member_id join member as t3 on t4.link_to_member = t3.member_id where t1.expense_date = '2019-09-09' and t4.date_received = '2019-0",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 78,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "Are there more in-patient or outpatient who were male? What is the deviation in percentage?",
    "gold_sql": "select cast(sum(case when admission = '+' then 1 else 0 end) as real) * 100 / sum(case when admission = '-' then 1 else 0 end) from patient where sex = 'm'",
    "pred_sql": "select abs((count) - (ount)) * 100 / (count + (count)) as deviationpercentage from (select count(*) as (ount= 'males assex = 'm' and admission is not null) , count(count) from patient) patient sent 'fsex = 'm') on 1=1",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 79,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "What is the percentage of female patient were born after 1930?",
    "gold_sql": "select cast(sum(case when strftime('%y', birthday) > '1930' then 1 else 0 end) as real) * 100 / count(*) from patient where sex = 'f'",
    "pred_sql": "select cast(sum(case when t2.sex = 'f' then 1 else 0 end) as real) * 100 / count(*) as ( select count(*) from patient where 'sex as t2 on t1.id = t2.id where year(t2.birthday) > 1930",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 80,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "What is the ratio of outpatient to inpatient followed up treatment among all the 'SLE' diagnosed patient?",
    "gold_sql": "select sum(case when admission = '+' then 1.0 else 0 end) / sum(case when admission = '-' then 1 else 0 end) from patient where diagnosis = 'sle'",
    "pred_sql": "select cast(sum(case when admission = '+' then 1 else 0 end) as real) * 100 / count(*) from patient where diagnosis = 'sle'",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 81,
    "db_id": "thrombosis_prediction",
    "difficulty": "simple",
    "question": "What is the disease patient '30609' diagnosed with. List all the date of laboratory tests done for this patient.",
    "gold_sql": "select t1.diagnosis, t2.date from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.id = 30609",
    "pred_sql": "select diagnosisandtests as (select diagnosis, id = 30609",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 82,
    "db_id": "thrombosis_prediction",
    "difficulty": "simple",
    "question": "List the patient ID, sex and birthday of patient with LDH beyond normal range.",
    "gold_sql": "select distinct t1.id, t1.sex, t1.birthday from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.ldh > 500",
    "pred_sql": "select id, sex, birthday from patient where id in (select id from laboratory where ldh > (select avg(ldh) from laboratory))",
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 83,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "State the ID and age of patient with positive degree of coagulation.",
    "gold_sql": "select distinct t1.id, strftime('%y', current_timestamp) - strftime('%y', t1.birthday) from patient as t1 inner join examination as t2 on t1.id = t2.id where t2.rvvt = '+'",
    "pred_sql": "select e.id, datediff(current_date, p.birthday) / patient) from patient, examt(e.thrombosis) = 1 inner onain p.id = e.id",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 84,
    "db_id": "thrombosis_prediction",
    "difficulty": "simple",
    "question": "For patients with severe degree of thrombosis, list their ID, sex and disease the patient is diagnosed with.",
    "gold_sql": "select distinct t1.id, t1.sex, t1.diagnosis from patient as t1 inner join examination as t2 on t1.id = t2.id where t2.thrombosis = 2",
    "pred_sql": "select id, sex, diagnosis from patient where diagnosis in (select diagnosis from examination where thrombosis = 1)",
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 85,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "How many female patients who came at the hospital in 1997 was immediately followed at the outpatient clinic?",
    "gold_sql": "select count(*) from patient where strftime('%y', description) = '1997' and sex = 'f' and admission = '-'",
    "pred_sql": "select count(*) from patient as p join examination as e on p.id = e.id where p.sex = 'f' and year(e.`examination date`) = 1997 and e.`examination date` < (select min(`examination date`) from examination as e2 where e2.id = p.id)",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 86,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "How many of the patients with the most serious thrombosis cases examined in 1997 are women?",
    "gold_sql": "select count(*) from patient as t1 inner join examination as t2 on t1.id = t2.id where t1.sex = 'f' and strftime('%y', t2.`examination date`) = '1997' and t2.thrombosis = 1",
    "pred_sql": "select count(*) from examination inner join patient on examination.id = patient.id where examination.thrombosis = (select max(thrombosis) from examination where year(examination.`examination date`) = 1997) and patient.sex = 'f'",
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 87,
    "db_id": "thrombosis_prediction",
    "difficulty": "simple",
    "question": "What are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis.",
    "gold_sql": "select t2.symptoms, t1.diagnosis from patient as t1 inner join examination as t2 on t1.id = t2.id where t2.symptoms is not null order by t1.birthday desc limit 1",
    "pred_sql": "select t1.symptoms, t1.diagnosis from examination as t1 join patient as t2 on t1.id = t2.id where strftime('%y', description desc limit 1;)",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 88,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?",
    "gold_sql": "select t1.date, strftime('%y', t2.`first date`) - strftime('%y', t2.birthday),t2.birthday from laboratory as t1 inner join patient as t2 on t1.id = t2.id where t2.diagnosis = 'sjs' and t2.birthday is not null order by t2.birthday asc limit 1",
    "pred_sql": "select t2.date, datediff(t1.first_date, t2.birthday) from examinationdate, t.id, laboratory as t2 where t1.diagnosis = 'sjs' order by t2.date asc limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.2
  },
  {
    "id": 89,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "What is the ratio of male to female patients among all those with abnormal uric acid counts?",
    "gold_sql": "select cast(sum(case when t2.ua <= 8.0 and t1.sex = 'm' then 1 else 0 end) as real) / sum(case when t2.ua <= 6.5 and t1.sex = 'f' then 1 else 0 end) from patient as t1 inner join laboratory as t2 on t1.id = t2.id",
    "pred_sql": "select cast(sum(case when sex = 'f' then 1 else 0 end) as real) / sum(case when sex = 'm' then 1 else 0 end) from patient where tp > 200",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 90,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "How many underage patients were examined during the course of the three-year period from 1990 to 1993?",
    "gold_sql": "select count(t1.id) from patient as t1 inner join examination as t2 on t1.id = t2.id where strftime('%y', t2.`examination date`) between '1990' and '1993' and strftime('%y', t2.`examination date`) - strftime('%y', t1.birthday) < 18",
    "pred_sql": "select count(*) from patient as e.id on patient.id in (select id from patient where `first date` between '1990-01-01' and '1993-12-31')",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 91,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis?",
    "gold_sql": "select strftime('%y', t2.date) - strftime('%y', t1.birthday), t1.diagnosis from patient as t1 inner join laboratory as t2 on t1.id = t2.id order by t2.hgb desc limit 1",
    "pred_sql": "with maxhemoglobin as ( select id, max(hgb) as maxhgb on t1 join laboratory14(t1.id = t21.id where patient.id = laboratory.id group by id order by t2.hgb = max_h",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 92,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "For the patient who was diagnosed with SLE on 1994/2/19, what was his/her anti-Cardiolipin antibody concentration status on 1993/11/12?",
    "gold_sql": "select `acl iga`, `acl igg`, `acl igm` from examination where id in ( select id from patient where diagnosis = 'sle' and description = '1994-02-19' ) and `examination date` = '1993-11-12'",
    "pred_sql": "select t3.`acl igg`, t3.`acl igm`, `acl igg inner join examination as t3 on patient.id = examination.id inner join laboratory as t2 on examination.id = laboratory.id where patient.diagnosis = 'sle' and patient.first date = '1994-02-19' and t2.date = '1993-11-12'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 93,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981?",
    "gold_sql": "select cast((sum(case when t2.date like '1981-11-%' then t2.`t-cho` else 0 end) - sum(case when t2.date like '1981-12-%' then t2.`t-cho` else 0 end)) as real) / sum(case when t2.date like '1981-12-%' then t2.`t-cho` else 0 end) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.birthday = '1959-02-18'",
    "pred_sql": "select cast((sum) as) as) as real) * 100 / as from laboratory where id = (select id from patient where birthday = '1959-02-18') and date between '1981-11-01' and '1981-12-31'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 94,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "How many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID.",
    "gold_sql": "select distinct id from laboratory where date between '1987-07-06' and '1996-01-31' and gpt > 30 and alb < 4",
    "pred_sql": "select id from patient where id in (select p.id from patient p join examination e on p.id = e.id join laboratory l on p.id = l.id where l.date between '1987-07-06' and '1996-01-31' and l.gpt > 30 and l.alb < 4)",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 95,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average?",
    "gold_sql": "select count(*) from examination where thrombosis = 2 and `ana pattern` = 's' and `acl igm` > (select avg(`acl igm`) * 1.2 from examination where thrombosis = 2 and `ana pattern` = 's')",
    "pred_sql": "select count(*) as id) as id) from examination as e join patient as p on e.id = p.id where e.thrombosis = 2 and e.`ana pattern` = 's' and e.`acl igm` > (select avg(`acl igm`) from examination) * 1.2",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 96,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range.",
    "gold_sql": "select distinct t1.id from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.admission = '-' and t2.`t-bil` < 2.0 and t2.date like '1991-10-%'",
    "pred_sql": "select distinct p.id from patient p from laboratory l on p.id = l.id where l.date between '1991-10-01' and '1 between 0 and 1.2 and p.admission = 'outpatient clinic'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 97,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE?",
    "gold_sql": "select avg(t2.alb) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.plt > 400 and t1.diagnosis = 'sle' and t1.sex = 'f'",
    "pred_sql": "select avg(alb.alb) from laboratory as tb join patient as p on tb.id = p.id where p.sex = 'f' and tb.plt > 400 and p.diagnosis = 'sle'",
    "ex": false,
    "sm": false,
    "cm": 1.0
  },
  {
    "id": 98,
    "db_id": "thrombosis_prediction",
    "difficulty": "simple",
    "question": "How many female patients were given an APS diagnosis?",
    "gold_sql": "select count(id) from patient where sex = 'f' and diagnosis = 'aps'",
    "pred_sql": "select count(*) from patient where sex = 'f' and diagnosis = 'aps'",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 99,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "What percentage of patients who were born in 1980 and were diagnosed with RA are women?",
    "gold_sql": "select cast(sum(case when sex = 'f' then 1 else 0 end) as real) * 100 / count(id) from patient where diagnosis = 'ra' and strftime('%y', birthday) = '1980'",
    "pred_sql": "select cast(sum(case when t2.sex = 'f' then 1 else 0 end) as real) * 100 / count(t1.id) from patient as t1 inner join examination as t34 on t1.id = t24.id inner join laboratory as t31 on t1.id = t21.id where t1.birthday like '1980-%' and t24.diagnosis = 'ra' and t2",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 100,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "Was the patient with the number 57266's uric acid within a normal range?",
    "gold_sql": "select case when (t1.sex = 'f' and t2.ua > 6.5) or (t1.sex = 'm' and t2.ua > 8.0) then true else false end from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.id = 57266",
    "pred_sql": "select avg(tu-pro) > 0.4 or avg(tu-pro) < 0.2 as u-count(laboratory.id = 57266",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 101,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "Provide IDs for male patients with ALT glutamic pylvic transaminase (GPT) that have history of ALT glutamic pylvic transaminase (GPT) exceed the normal range.",
    "gold_sql": "select distinct t1.id from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.sex = 'm' and t2.gpt >= 60",
    "pred_sql": "select id from laboratory where gpt > 34 and sex = 'f' group by id",
    "ex": false,
    "sm": false,
    "cm": 0.25
  },
  {
    "id": 102,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "Please provide the diagnosis of patients with ALT glutamic pylvic transaminase beyond the normal range by ascending order of their date of birth.",
    "gold_sql": "select distinct t1.diagnosis from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.gpt > 60 order by t1.birthday asc",
    "pred_sql": "select distinct p.id, p.diagnosis from patient p join laboratory l on p.id = l.id where l.gpt > 30 order by p.birthday asc",
    "ex": false,
    "sm": false,
    "cm": 0.5
  },
  {
    "id": 103,
    "db_id": "thrombosis_prediction",
    "difficulty": "simple",
    "question": "Provide all ID, sex and birthday of patients whose urea nitrogen (UN) just within the borderline of passing?",
    "gold_sql": "select distinct t1.id, t1.sex, t1.birthday from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.un = 29",
    "pred_sql": "select id, sex, birthday from patient where un = 1",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 104,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "List and group all patients by sex for total bilirubin (T-BIL) level not within the normal range.",
    "gold_sql": "select t1.id,t1.sex from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.`t-bil` >= 2.0 group by t1.sex,t1.id",
    "pred_sql": "select p.sex, l.t-bil from laboratory t)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))&",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 105,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "What is the average age of the male patient with high cholesterol?",
    "gold_sql": "select avg(strftime('%y', date('now')) - strftime('%y', t1.birthday)) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.`t-cho` >= 250 and t1.sex = 'm'",
    "pred_sql": "select avg(datediff(curdate(), birthday)/365 from patient where sex = 'm' and tp > 200",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 106,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "For all patients with triglyceride (TG) level beyond the normal range, how many are age more than 50 years?",
    "gold_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.tg >= 200 and strftime('%y', current_timestamp) - strftime('%y', t1.birthday) > 50",
    "pred_sql": "select count(*) from patient as p join laboratory as l on p.id = l.id where l.tg > 1.5 and p.birthday < '1963-01-01'",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 107,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "For patient born between 1936-1956, how many male patients have creatinine phosphokinase beyond the normal range?",
    "gold_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where strftime('%y', t1.birthday) between '1936' and '1956' and t1.sex = 'm' and t2.cpk >= 250",
    "pred_sql": "select count(*) from patient as p join examination as e on p.id = e.id where p.sex = 'm' and e.cre p sexist_normal)",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 108,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "Provide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range.",
    "gold_sql": "select distinct t1.id, t1.sex , strftime('%y', current_timestamp) - strftime('%y', t1.birthday) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.glu >= 180 and t2.`t-cho` < 250",
    "pred_sql": "select p.id, p.sex, datediff(curdate(), p.birthday) as age from patient as p join laboratory as l on p.id = l.id where l.glu > 100 and 120ff < 200",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 109,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "What are the patient's diagnosis for those who has lower red blood blood cell? State their ID and age.",
    "gold_sql": "select distinct t1.diagnosis, t1.id , strftime('%y', current_timestamp) -strftime('%y', t1.birthday) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.rbc < 3.5",
    "pred_sql": "select p.id, timestampdiff(yearlier when t2.hct as real then floor((julianday(t1900-examination.examination date)) - julianday(to_date(p.birthday))) / 365) end as t2",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 110,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "Among the patients who were diagnosed with SLE, who is the oldest with normal hemoglobin level. Provide the ID and sex.",
    "gold_sql": "select t1.id, t1.sex from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.diagnosis = 'sle' and t2.hgb > 10 and t2.hgb < 17 order by t1.birthday asc limit 1",
    "pred_sql": "select id, sex from patient where diagnosis = 'sle' and hgb = 14.0 order by birthday limit id sex",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 111,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "Name the ID and age of patient with two or more laboratory examinations which show their hematoclit level exceeded the normal range.",
    "gold_sql": "select distinct t1.id, strftime('%y', current_timestamp) - strftime('%y', t1.birthday) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.id in ( select id from laboratory where hct >= 52 group by id having count(id) >= 2 )",
    "pred_sql": "select p.id, timestampdiff(year, p.birthday, l.date) as age from laboratory where)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))&",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 112,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range?",
    "gold_sql": "select sum(case when t2.plt <= 100 then 1 else 0 end) - sum(case when t2.plt >= 400 then 1 else 0 end) from patient as t1 inner join laboratory as t2 on t1.id = t2.id",
    "pred_sql": "select sum(case when plt < (caselet where laboratory.c in (select plt' then 1 else 0 end) as below_normal, sum(case when plt >= laboratory laboratory.c where laboratory.ct = ' plt' then 1 else 0 end )",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 113,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level.",
    "gold_sql": "select distinct t1.id from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.plt between 100 and 400 and strftime('%y', t2.date) - strftime('%y', t1.birthday) < 50 and strftime('%y', t2.date) = '1984'",
    "pred_sql": "select distinct p.id from patient p join laboratory l on p.id = l.id where l.date between '1984-01-01' and '1984-12-31' and p.plt between 150 and strftime('%y', p.birthday) < 50)",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 114,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)?",
    "gold_sql": "select cast(sum(case when t2.pt >= 14 and t1.sex = 'f' then 1 else 0 end) as real) * 100 / count(case when t2.pt >= 14 then 1 else 0 end) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where strftime('%y', current_timestamp) - strftime('%y', t1.birthday) > 55",
    "pred_sql": "select cast(sum(case when t2.sex = 'f' then 1 else 0 end) as real) * 100 / count(t1.id) from examination as t1 inner join patient as t2 on t1.id = t2.id where t2.birthday < '19999-12-31') - interval '55' year",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 115,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level?",
    "gold_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.fg <= 150 or t2.fg >= 450 and t2.wbc > 3.5 and t2.wbc < 9.0 and t1.sex = 'm'",
    "pred_sql": "select count(*) from patient as p.sex = 'm' and p.id in (select id from examination where thrombosis = 0) 6 count(*) from laboratory as l where l.id = p.id and l.fg is not null",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 116,
    "db_id": "thrombosis_prediction",
    "difficulty": "simple",
    "question": "How many patients with an Ig G higher than normal?",
    "gold_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id inner join examination as t3 on t3.id = t2.id where t2.igg >= 2000",
    "pred_sql": "select count(*) from laboratory where igg > 1",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 117,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "Among the patients with a normal Ig G level, how many of them have symptoms?",
    "gold_sql": "select count(t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id inner join examination as t3 on t3.id = t2.id where t2.igg between 900 and 2000 and t3.symptoms is not null",
    "pred_sql": "select count(*) from patient where id in (select p.id from patient p join examination e on p.id = e.id where e.`acl igg` = 1 and e.symptoms is not null)",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 118,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "How many patients with a normal Ig A level came to the hospital after 1990/1/1?",
    "gold_sql": "select count(t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.iga between 80 and 500 and strftime('%y', t1.`first date`) > '1990'",
    "pred_sql": "select count(*) from patient where id in (select p where p.id = e.id and e.`acl iga` = 0 and examination.date > '1990-01-01'))",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 119,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "For the patients with an abnormal Ig M level, what is the most common disease they are diagnosed with?",
    "gold_sql": "select t1.diagnosis from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.igm not between 40 and 400 group by t1.diagnosis order by count(t1.diagnosis) desc limit 1",
    "pred_sql": "select diagnosis from examination where `acl igm` > 1 group by diagnosis order by count(*) desc limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.5
  },
  {
    "id": 120,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "How many patients with a abnormal C-reactive protein don't have their data recorded?",
    "gold_sql": "select count(t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where (t2.crp = '+' ) and t1.description is null",
    "pred_sql": "select count(*) from laboratory where crp is not null and crp != 'none'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 121,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "Among the patients whose creatinine level is abnormal, how many of them aren't 70 yet?",
    "gold_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.cre >= 1.5 and strftime('%y', date('now')) - strftime('%y', t1.birthday) < 70",
    "pred_sql": "select count(*) from patient where id in (select p.id from examination e join laboratory l on e.id = l.id where l.cre > 1.5 or l.cre < 0.5 or laboratory)",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 122,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital?",
    "gold_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.rnp = 'negative' or t2.rnp = '0' and t1.admission = '+'",
    "pred_sql": "select count(*) from patient where `antirnp` = 0 and admission is not null",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 123,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "Among the patients with normal anti-SM, how many of them does not have thrombosis?",
    "gold_sql": "select count(t1.id) from examination as t1 inner join laboratory as t2 on t1.id = t2.id where t2.sm in ('negative','0') and t1.thrombosis = 0",
    "pred_sql": "select count(*) from patient where sc170 = 'negative' and id in (select id from examination where thrombosis = 0)",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 124,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "Among the patients who has a normal anti-scl70, how many of them are female and does not have any symptom?",
    "gold_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id inner join examination as t3 on t3.id = t2.id where (t2.sc170 = 'negative' or t2.sc170 = '0') and t1.sex = 'f' and t3.symptoms is null",
    "pred_sql": "select count(*) from patient as p join examination as e on p.id = e.id where p.sex = 'f' and e.symptoms is null and p.id",
    "ex": true,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 125,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male?",
    "gold_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.centromea in ('negative', '0') and t2.ssb in ('negative', '0') and t1.sex = 'm'",
    "pred_sql": "select count(*) from patient where sex = 'm' and sc170-ssb` = 'negative' and centromea = 'negative'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 126,
    "db_id": "thrombosis_prediction",
    "difficulty": "moderate",
    "question": "Among the patients who have an abnormal level of glutamic oxaloacetic transaminase, when was the youngest of them born?",
    "gold_sql": "select t1.birthday from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.got >= 60 order by t1.birthday desc limit 1",
    "pred_sql": "select min(date) from laboratory where gpt > 30 group by id",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 127,
    "db_id": "thrombosis_prediction",
    "difficulty": "challenging",
    "question": "For the patients with a normal range of creatinine phosphokinase, how many of them have a positive measure of degree of coagulation?",
    "gold_sql": "select count(t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id inner join examination as t3 on t1.id = t3.id where t2.cpk < 250 and (t3.kct = '+' or t3.rvvt = '+' or t3.lac = '+')",
    "pred_sql": "select count(*) from patientid, laboratory where examinationid.id = laboratory.id and examinationid.cpk < 200 and laboratory.crp = 'normal' and examinationid.thrombosis = 1",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 128,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Give the name of the league had the most goals in the 2016 season?",
    "gold_sql": "select t2.name from match as t1 inner join league as t2 on t1.league_id = t2.id where t1.season = '2015/2016' group by t2.name order by sum(t1.home_team_goal + t1.away_team_goal) desc limit 1",
    "pred_sql": "select league.name from match.season, m.season = '2016 group by league_id order by sum(home_team_goal) + sum(away_team_goal) desc limit 1)",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 129,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "In Scotland Premier League, which away team won the most during the 2010 season?",
    "gold_sql": "select teaminfo.team_long_name from league as leaguedata inner join match as matchdata on leaguedata.id = matchdata.league_id inner join team as teaminfo on matchdata.away_team_api_id = teaminfo.team_api_id where leaguedata.name = 'scotland premier league' and matchdata.season = '2009/2010' and matchdata.away_team_goal - matchdata.home_team_goal > 0 group by matchdata.away_team_api_id order by count(*) desc limit 1",
    "pred_sql": "select away_team_api_id from match where season = '2010' and away_team_goal > home_team_goal group by away_team_api_id order by count(*) desc limit 1",
    "ex": true,
    "sm": false,
    "cm": 0.5
  },
  {
    "id": 130,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "What are the speed in which attacks are put together of the top 4 teams with the highest build Up Play Speed?",
    "gold_sql": "select t1.buildupplayspeed from team_attributes as t1 inner join team as t2 on t1.team_api_id = t2.team_api_id order by t1.buildupplayspeed asc limit 4",
    "pred_sql": "select t.team_long_name, ta.team_fifa_api_id, t.team_fifa as team_attributes order by buildupplayspeed desc limit 4 on",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 131,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Give the name of the league had the most matches end as draw in the 2016 season?",
    "gold_sql": "select t2.name from match as t1 inner join league as t2 on t1.league_id = t2.id where t1.season = '2015/2016' and t1.home_team_goal = t1.away_team_goal group by t2.name order by count(t1.id) desc limit 1",
    "pred_sql": "select l.name from (select league l join match m where season = '2016' and goal = 'd' group by league_id order by count(*) desc limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 132,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015.",
    "gold_sql": "select distinct datetime() - t2.birthday age from player_attributes as t1 inner join player as t2 on t1.player_api_id = t2.player_api_id where strftime('%y',t1.`date`) >= '2013' and strftime('%y',t1.`date`) <= '2015' and t1.sprint_speed >= 97",
    "pred_sql": "select t2.player_name from player as t1 join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t2 on inner_table inner_condition_ and t1.birthday like '%-%03' and t1.birthday like '%-%04' and t1.birthday like '%-%05'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 133,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Give the name of the league with the highest matches of all time and how many matches were played in the said league.",
    "gold_sql": "select t2.name, t1.max_count from league as t2 join (select league_id, max(cnt) as max_count from (select league_id, count(id) as cnt from match group by league_id) as subquery) as t1 on t1.league_id = t2.id",
    "pred_sql": "select name , count as (select league_id league on match.league_id = league.id group by name order by count(*) desc limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 134,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "Give the team_fifa_api_id of teams with more than 50 but less than 60 build-up play speed.",
    "gold_sql": "select distinct team_fifa_api_id from team_attributes where buildupplayspeed > 50 and buildupplayspeed < 60",
    "pred_sql": "select team_fifa_api_id from team_attributes where buildupplayspeed between 50 and 60 group by team_fifa_api_id having count(*) > 50",
    "ex": false,
    "sm": false,
    "cm": 0.5
  },
  {
    "id": 135,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "List the long name of teams with above-average build-up play passing in 2012.",
    "gold_sql": "select distinct t4.team_long_name from team_attributes as t3 inner join team as t4 on t3.team_api_id = t4.team_api_id where substr(t3.`date`, 1, 4) = '2012' and t3.buildupplaypassing > ( select cast(sum(t2.buildupplaypassing) as real) / count(t1.id) from team as t1 inner join team_attributes as t2 on t1.team_api_id = t2.team_api_id where strftime('%y',t2.`date`) = '2012')",
    "pred_sql": "select t2.team_long_name from team_attributes as t1 join team as t2 on t1.team_api_id = t2.team_api_id where t1.buildup like '2012%' and t1.buildupplaypassing > (select avg(buildupplaypassing) from team_attributes) group by t2.team_long_name",
    "ex": false,
    "sm": false,
    "cm": 0.5
  },
  {
    "id": 136,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992.",
    "gold_sql": "select cast(count(case when t2.preferred_foot = 'left' then t1.id else null end) as real) * 100 / count(t1.id) percent from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where substr(t1.birthday, 1, 4) between '1987' and '1992'",
    "pred_sql": "select cast(sum(case when t2.preferred_foot = 'left' then 1 else 0 end) as real) * 100 / count(t1.player_api_id) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.birthday between '1987-01-01' and '1992-12-31'",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 137,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "Find the average number of long-shot done by Ahmed Samir Farag.",
    "gold_sql": "select cast(sum(t2.long_shots) as real) / count(t2.`date`) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.player_name = 'ahmed samir farag'",
    "pred_sql": "select avg(ta.long_shots) from player_attributes from player_attributes where player_name = 'ah_fifa_api_id = team_fifa_api_id join player as p on player_api_id = home_player_x1 where player_api_id where p.player_name = 'ahmed samir farag'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 138,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy.",
    "gold_sql": "select t1.player_name from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.height > 180 group by t1.id order by cast(sum(t2.heading_accuracy) as real) / count(t2.`player_fifa_api_id`) desc limit 10",
    "pred_sql": "select t2.player_name from player as t1 join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.height > 180 group by t2.player_api_id order by avg(t2.heading_accuracy) desc limit 10",
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 139,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season.",
    "gold_sql": "select t1.name from league as t1 inner join match as t2 on t1.id = t2.league_id where t2.season = '2009/2010' group by t1.name having (cast(sum(t2.home_team_goal) as real) / count(distinct t2.id)) - (cast(sum(t2.away_team_goal) as real) / count(distinct t2.id)) > 0",
    "pred_sql": "select t2.name from match as m join league as t2 on m.league_id = t2.id where m.season = '2009/2010' and m.home_team_goal > m.away_team_goal group by t2.name",
    "ex": true,
    "sm": false,
    "cm": 1.0
  },
  {
    "id": 140,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "List the football players with a birthyear of 1970 and a birthmonth of October.",
    "gold_sql": "select player_name from player where substr(birthday, 1, 7) = '1970-10'",
    "pred_sql": "select player_name from player where birthday like '1970-10%'",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 141,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "What is the overall rating of the football player Gabriel Tamas in year 2011?",
    "gold_sql": "select t2.overall_rating from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.player_name = 'gabriel tamas' and strftime('%y', t2.date) = '2011'",
    "pred_sql": "select overall_rating from player_attributes where player_api_id = (select player_api_id from player where player_name = 'gabriel tamas') and date like '2011%'",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 142,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Calculate the average home team goal in the 2010/2011 season in the country of Poland.",
    "gold_sql": "select cast(sum(t2.home_team_goal) as real) / count(t2.id) from country as t1 inner join match as t2 on t1.id = t2.country_id where t1.name = 'poland' and t2.season = '2010/2011'",
    "pred_sql": "select avg(home_team_goal) from match where season='2010/2011' and country_id=(select id country_id league_id season stage date match_api_id home_team_api_id away_team_api_id home_team_goal away_team_goal home_player_x1 home_player_x2 home_player_x3 home_player_x4 home_player_x5 home_player_x6 home_player_x7 home_player_x8 home_player_x9 home_player_x10 home_player_x11 away",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 143,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "Who has the highest average finishing rate between the highest and shortest football player?",
    "gold_sql": "select a from ( select avg(finishing) result, 'max' a from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.height = ( select max(height) from player ) union select avg(finishing) result, 'min' a from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.height = ( select min(height) from player ) ) order by result desc limit 1",
    "pred_sql": "select avg(t2.finishing) from player_attributes as t1 inner join player_api_id, (select player_api_id, min(height) as min_height, max(height) as max_height from player group by player_api_id) as t3 on t1.player_api_id = t2.player_api_id where t2.player_api_id = t1.player_api_id group by t3.min_height <= t2.height and t2.height <= t3.max_height order by avg(t1.finishing",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 144,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "From 2010 to 2015, what was the average overall rating of players who are higher than 170?",
    "gold_sql": "select cast(sum(t2.overall_rating) as real) / count(t2.id) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.height > 170 and strftime('%y',t2.`date`) >= '2010' and strftime('%y',t2.`date`) <= '2015'",
    "pred_sql": "select avg(overall_rating) from player_attributes where player_api_id in (select player_api_id from player where height > 170 and date between '2010-01-01' and '2015-12-31')",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 145,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye\n?",
    "gold_sql": "select cast(sum(case when t1.player_name = 'abdou diallo' then t2.ball_control else 0 end) as real) / count(case when t1.player_name = 'abdou diallo' then t2.id else null end) - cast(sum(case when t1.player_name = 'aaron appindangoye' then t2.ball_control else 0 end) as real) / count(case when t1.player_name = 'aaron appindangoye' then t2.id else null end) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id",
    "pred_sql": "select avg(`ball_control`) - (select avg(`ball_control`) from player_attributes where player_api_id in (select player_api_id from player where player_name = 'abdou diallo') or player_api_id in (select player_api_id from player where player_name = 'aaron appindangoye')) as difference_ball_control from player_attributes",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 146,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "Which player is older, Aaron Lennon or Abdelaziz Barrada?",
    "gold_sql": "select player_name from player where player_name in ('aaron lennon', 'abdelaziz barrada') order by birthday asc limit 1",
    "pred_sql": "select player_name from player where player_name in ('aaron lennon', 'abdelaziz barrada') order by birthday asc limit 1",
    "ex": true,
    "sm": true,
    "cm": 1.0
  },
  {
    "id": 147,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "Which player is the tallest?",
    "gold_sql": "select player_name from player order by height desc limit 1",
    "pred_sql": "select player_name from player order by height desc limit 1",
    "ex": true,
    "sm": true,
    "cm": 1.0
  },
  {
    "id": 148,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Among the players whose preferred foot was the left foot when attacking, how many of them would remain in his position when the team attacked?",
    "gold_sql": "select count(player_api_id) from player_attributes where preferred_foot = 'left' and attacking_work_rate = 'low'",
    "pred_sql": "select count(*) from player_attributes where preferred_foot = 'left'",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 149,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "Among the players born before the year 1986, how many of them would remain in his position and defense while the team attacked?",
    "gold_sql": "select count(distinct t1.player_name) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where strftime('%y',t1.birthday) < '1986' and t2.defensive_work_rate = 'high'",
    "pred_sql": "select count(*) from player_attributes pa join player p on pa.player_api_id = p.player_api_id join team_attributes ta on pa.player_fifa_api_id and p.player_fifa_api_id where p.birthday < '1986-01-01' and ta.defencepressureclass = 'balanced'",
    "ex": true,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 150,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Please list the names of the players whose volley score and dribbling score are over 70.",
    "gold_sql": "select distinct t1.player_name from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t2.volleys > 70 and t2.dribbling > 70",
    "pred_sql": "select t2.player_name from player_attributes as t1 join player as t2 on t1.player_api_id = t2.player_api_id where t1.vol_player_api_id from player_attributes > 70",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 151,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "How many matches were held in the Belgium Jupiler League in April, 2009?",
    "gold_sql": "select count(t2.id) from league as t1 inner join match as t2 on t1.id = t2.league_id where t1.name = 'belgium jupiler league' and substr(t2.`date`, 1, 7) = '2009-04'",
    "pred_sql": "select count(*) from match where league_id instr(`date('2001-04-2009', '-01') and league_id = (select id from league where name = 'belgium jupiler league')",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 152,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "Give the name of the league had the most matches in the 2008/2009 season?",
    "gold_sql": "select t1.name from league as t1 join match as t2 on t1.id = t2.league_id where t2.season = '2008/2009' group by t1.name having count(t2.id) = (select max(match_count) from (select count(t2.id) as match_count from match as t2 where t2.season = '2008/2009' group by t2.league_id))",
    "pred_sql": "select league_id, count(*) as match_count from match where season = '2008/2009' group by league_id order by match_count desc limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.16666666666666666
  },
  {
    "id": 153,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel?",
    "gold_sql": "select (sum(case when t1.player_name = 'ariel borysiuk' then t2.overall_rating else 0 end) * 1.0 - sum(case when t1.player_name = 'paulin puel' then t2.overall_rating else 0 end)) * 100 / sum(case when t1.player_name = 'paulin puel' then t2.overall_rating else 0 end) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id",
    "pred_sql": "with b.overall as ariel from (select overall_rating from player_attributes` where player_api_id = 2_id then t2.overall_rating else 0 end) - sum(case when t1.player_id = 2_id then t2.overall_rating else 0 end) as diff from (select player_api_id as _id, 2_api_id as 1_id from player where player_name = 'ariel borysiuk') t1 join player_attributes",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 154,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Calculate the average overall rating of Pietro Marino.",
    "gold_sql": "select cast(sum(t2.overall_rating) as real) / count(t2.id) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.player_name = 'pietro marino'",
    "pred_sql": "select avg(overall_rating) from player_attributes where player_api_id = (select player_api_id from player where player_name = 'pietro marino')",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 155,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "What is Ajax's highest chance creation passing score and what is it classified as?",
    "gold_sql": "select t2.chancecreationpassing, t2.chancecreationpassingclass from team as t1 inner join team_attributes as t2 on t1.team_api_id = t2.team_api_id where t1.team_long_name = 'ajax' order by t2.chancecreationpassing desc limit 1",
    "pred_sql": "select max(chancecreationpassing), max(chancecreationpassingclass) from team_attributes where team_api_id = (select team_api_id from team where name = 'ajax')",
    "ex": false,
    "sm": false,
    "cm": 0.2
  },
  {
    "id": 156,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "For the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player.",
    "gold_sql": "select t1.player_name from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where substr(t2.`date`, 1, 10) = '2016-06-23' and t2.overall_rating = 77 order by t1.birthday asc limit 1",
    "pred_sql": "select t.player as (select t2.player_name from player as t1 join player_attributes as t1 join player t1 on t2 on t1.player_api_id = t2.player_api_id where overall_rating = 77 and date = '2016-06-23' group by player_api_id) player11 join player player12 on player11.player_api_id = player12.player_api_id order by player12.birthday asc limit",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 157,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "What was the overall rating for Aaron Mooy on 2016/2/4?",
    "gold_sql": "select t2.overall_rating from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where substr(t2.`date`, 1, 10) = '2016-02-04' and t1.player_name = 'aaron mooy'",
    "pred_sql": "select overall_rating from player_attributes where player_api_id = (select player_api_id from player where player_name = 'aaron mooy') and date = '2016-02-04 00:00:00'",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 158,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "How was Francesco Migliore's attacking work rate on 2015/5/1?",
    "gold_sql": "select t2.attacking_work_rate from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t2.`date` like '2015-05-01%' and t1.player_name = 'francesco migliore'",
    "pred_sql": "select attacking_work_rate from player_attributes where player_api_id = (select player_api_id from player where player_name = 'francesco migliore') and date = '2015-05-01'",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 159,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "When was the first time did Kevin Constant have his highest crossing score? Give the date.",
    "gold_sql": "select `date` from ( select t2.crossing, t2.`date` from player as t1 inner join player_attributes as t2 on t1.player_fifa_api_id = t2.player_fifa_api_id where t1.player_name = 'kevin constant' order by t2.crossing desc) order by date desc limit 1",
    "pred_sql": "select t2.date from player as t1 join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.player_name = 'kevin constant' order by t2.crossing desc limit 1",
    "ex": true,
    "sm": false,
    "cm": 0.8
  },
  {
    "id": 160,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Tell the build Up play passing class for \"FC Lorient\" on 2010/2/22.",
    "gold_sql": "select t2.buildupplaypassingclass from team as t1 inner join team_attributes as t2 on t1.team_api_id = t2.team_api_id where t1.team_long_name = 'fc lorient' and t2.`date` like '2010-02-22%'",
    "pred_sql": "select buildupplaypassingclass from team_attributes where date '20 = 'fc lorient' and date = '2010-02-22 00:00:00'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 161,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "For the team \"Hannover 96\", what was its defence aggression class on 2015/9/10?",
    "gold_sql": "select t2.defenceaggressionclass from team as t1 inner join team_attributes as t2 on t1.team_api_id = t2.team_api_id where t1.team_long_name = 'hannover 96' and t2.`date` like '2015-09-10%'",
    "pred_sql": "select defenceaggressionclass from team_attributes where team_api_id in (select team_api_id from team where team_long_name like 'hannover 96') and date like '2015/9/10'",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 162,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21?",
    "gold_sql": "select cast(sum(t2.overall_rating) as real) / count(t2.id) from player as t1 inner join player_attributes as t2 on t1.player_fifa_api_id = t2.player_fifa_api_id where t1.player_name = 'marko arnautovic' and substr(t2.`date`, 1, 10) between '2007-02-22' and '2016-04-21'",
    "pred_sql": "select avg(overall_rating) from player_attributes where player_api_id = (select player_api_id from player where player_name = 'marko arnautovic') and date between '2007-02-22' and '2016-04-21'",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 163,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12?",
    "gold_sql": "select (sum(case when t1.player_name = 'landon donovan' then t2.overall_rating else 0 end) * 1.0 - sum(case when t1.player_name = 'jordan bowery' then t2.overall_rating else 0 end)) * 100 / sum(case when t1.player_name = 'landon donovan' then t2.overall_rating else 0 end) lvsj_percent from player as t1 inner join player_attributes as t2 on t1.player_fifa_api_id = t2.player_fifa_api_id where substr(t2.`date`, 1, 10) = '2013-07-12'",
    "pred_sql": "select cast((select overall_rating from player_attributes where player_api_id = 505942) where date = '2013-07-12' limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 164,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "List down most tallest players' name.",
    "gold_sql": "select player_name from (select player_name, height, dense_rank() over (order by height desc) as rank from player) where rank = 1",
    "pred_sql": "select player_name from player order by height desc limit 1",
    "ex": true,
    "sm": false,
    "cm": 0.6
  },
  {
    "id": 165,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "State the name of the most strongest player.",
    "gold_sql": "select distinct t1.player_name from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t2.overall_rating = (select max(overall_rating) from player_attributes)",
    "pred_sql": "select player_name from player where overall_rating = (select max(overall_rating) from player_attributes join player on player_attributes.player_api_id = player.player_api_id)",
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 166,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Who are the players that tend to be attacking when their mates were doing attack moves? List down their name.",
    "gold_sql": "select distinct t1.player_name from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t2.attacking_work_rate = 'high'",
    "pred_sql": "select t2.player_name from team_attributes as t1 join player as t2 on t1.team_fifa_api_id = t2.player_fifa_api_id where t1.buildupplayspeedclass = 'balanced' and t1.buildupplaydribblingclass = 'little'",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 167,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "What are the short name of team who played safe while creating chance of passing?",
    "gold_sql": "select distinct t1.team_short_name from team as t1 inner join team_attributes as t2 on t1.team_api_id = t2.team_api_id where t2.chancecreationpassingclass = 'safe'",
    "pred_sql": "select t2.team_short_name from team_attributes as t1 join team as t2 on t1.team_api_id = t2.team_api_id where t1.defenceteamwidth = 1 and t1.chancecreationpassing > 50",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 168,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "How many football players born after the 1990s have the first name \"Aaron\"?",
    "gold_sql": "select count(id) from player where birthday > '1990' and player_name like 'aaron%'",
    "pred_sql": "select count(*) from player where player_name like 'aaron%' and strftime('%y', birthday) > '1990'",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 169,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "What is the difference between players 6 and 23's jumping scores?",
    "gold_sql": "select sum(case when t1.id = 6 then t1.jumping else 0 end) - sum(case when t1.id = 23 then t1.jumping else 0 end) from player_attributes as t1",
    "pred_sql": "select `jumping` - player_jumping_id as (select player_j_id = 23",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 170,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Please provide top four football players' IDs who are among the lowest potential players and prefer to use the right foot when attacking.",
    "gold_sql": "select id from player_attributes where preferred_foot = 'right' order by potential asc limit 4",
    "pred_sql": "select player_api_id from player where preferred_foot = 'right' and attacking_work_rate = 'medium' order by potential asc limit 4",
    "ex": false,
    "sm": false,
    "cm": 0.4
  },
  {
    "id": 171,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "How many players had the highest potential score for crossing that preferred to use their left foots while attacking?",
    "gold_sql": "select count(t1.id) from player_attributes as t1 where t1.preferred_foot = 'left' and t1.crossing = ( select max(crossing) from player_attributes)",
    "pred_sql": "select count(t.player_api_id, p.player_api_id) from player as p join player_attributes as pa on p.player_api_id = pa.player_api_id join team_attributes as ta on p.player_api_id = ta.team_fifa_api_id where pa.preferred_foot = 'left' and pa.crossing = (select max(crossing) from player_attributes where preferred_foot = 'left')",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 172,
    "db_id": "european_football_2",
    "difficulty": "challenging",
    "question": "What was the final score for the match on September 24, 2008, in the Belgian Jupiler League between the home team and the away team?",
    "gold_sql": "select t2.home_team_goal, t2.away_team_goal from league as t1 inner join match as t2 on t1.id = t2.league_id where t1.name = 'belgium jupiler league' and t2.`date` like '2008-09-24%'",
    "pred_sql": "select home_team_goal, away_team_goal from match where date=\"2008-09-24 00:00:00\" and league_id=1 and season=\"2008/2009\" and stage=1",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 173,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Does the KSV Cercle Brugge team have a slow, balanced or fast speed class?",
    "gold_sql": "select distinct t1.buildupplayspeedclass from team_attributes as t1 inner join team as t2 on t1.team_api_id = t2.team_api_id where t2.team_long_name = 'ksv cercle brugge'",
    "pred_sql": "select t2.buildupplayspeedclass from team as t1 inner join team_attributes as t2 on t1.team_api_id = t2.team_api_id where t1.team_long_name = 'ksv cercle brugge'",
    "ex": true,
    "sm": false,
    "cm": 1.0
  },
  {
    "id": 174,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "Please state the finishing rate and curve score of the player who has the heaviest weight.",
    "gold_sql": "select id, finishing, curve from player_attributes where player_api_id = ( select player_api_id from player order by weight desc limit 1 ) limit 1",
    "pred_sql": "select t3 as player_api_id , t3.finishing , t4 asurveyn,t sum1.weight t1 join player as t2 on t1.player_api_id = t2.player_api_id join team as t5 . on t2.player_api_id = t3.player_api_id join league as t4 on t3.league_id = t4.league_id where t2.weight = (select max(weight) from player) and",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 175,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "Which top 4 leagues had the most games in the 2015-2016 season?",
    "gold_sql": "select t1.name from league as t1 inner join match as t2 on t1.id = t2.league_id where t2.season = '2015/2016' group by t1.name order by count(t2.id) desc limit 4",
    "pred_sql": "select league_id, count(*) as game_count from match where season = '2015/2016' group by league_id order by game_count desc limit 4",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 176,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "Please provide the full name of the away team that scored the most goals.",
    "gold_sql": "select t2.team_long_name from match as t1 inner join team as t2 on t1.away_team_api_id = t2.team_api_id order by t1.away_team_goal desc limit 1",
    "pred_sql": "select t2.team_long_name from match as m join team as t2 on m.away_team_api_id = t2.team_api_id group by t2.team_long_name order by count(*)",
    "ex": false,
    "sm": false,
    "cm": 0.4
  },
  {
    "id": 177,
    "db_id": "european_football_2",
    "difficulty": "simple",
    "question": "Please name one player whose overall strength is the greatest.",
    "gold_sql": "select distinct t1.player_name from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t2.overall_rating = ( select max(overall_rating) from player_attributes)",
    "pred_sql": "select player_name from player where player_api_id = (select player_api_id from player_attributes where overall_rating = (select max(overall_rating) from player_attributes))",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 178,
    "db_id": "european_football_2",
    "difficulty": "moderate",
    "question": "What is the percentage of players that are under 180 cm who have an overall strength of more than 70?",
    "gold_sql": "select cast(count(case when t2.overall_rating > 70 and t1.height < 180 then t1.id else null end) as real) * 100 / count(t1.id) percent from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id",
    "pred_sql": "select cast(sum(case when t2.height < 180 then 1 else 0 end) as real) * 100 / count(*) from player as t1 inner join `player_attributes` as t2 on t1.player_api_id = t2.player_api_id where t2.strength > 70",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 179,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "Please list the reference names of the drivers who are eliminated in the first period in race number 20.",
    "gold_sql": "select t2.driverref from qualifying as t1 inner join drivers as t2 on t2.driverid = t1.driverid where t1.raceid = 20 order by t1.q1 desc limit 5",
    "pred_sql": "select t2.driverref from results as t1 join drivers as t2 on t1.driverid = t2.driverid where t1.raceid = 20 and t1.position > 20 and t1.positionorder = 1",
    "ex": false,
    "sm": false,
    "cm": 0.2
  },
  {
    "id": 180,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "What is the surname of the driver with the best lap time in race number 19 in the second qualifying period?",
    "gold_sql": "select t2.surname from qualifying as t1 inner join drivers as t2 on t2.driverid = t1.driverid where t1.raceid = 19 order by t1.q2 asc limit 1",
    "pred_sql": "select t3.surname from qualifying as t1 join drivers as t3 on t1.driverid = t3.driverid join races as t2 on t1.raceid = t2.raceid where t1.number = 2 and t2.round = 19 order by t1.q2 asc limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.6
  },
  {
    "id": 181,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "Please give the name of the race held on the circuits in Germany.",
    "gold_sql": "select distinct t2.name from circuits as t1 inner join races as t2 on t2.circuitid = t1.circuitid where t1.country = 'germany'",
    "pred_sql": "select t2.name from circuits as t1 inner join circuits on circuits.country = 'germany')",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 182,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "What is the coordinates location of the circuits for Australian grand prix?",
    "gold_sql": "select distinct t1.lat, t1.lng from circuits as t1 inner join races as t2 on t2.circuitid = t1.circuitid where t2.name = 'australian grand prix'",
    "pred_sql": "select t1.location, t1.lat, t1.lng from circuits as t1 join races as t2 on t1.circuitid = t2.circuitid where t2.name = 'australian grand prix'",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 183,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "Give the coordinate position for Abu Dhabi Grand Prix.",
    "gold_sql": "select distinct t1.lat, t1.lng from circuits as t1 inner join races as t2 on t2.circuitid = t1.circuitid where t2.name = 'abu dhabi grand prix'",
    "pred_sql": "select lat, lng from circuits where name = 'abu dhabi grand prix'",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 184,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "What's Bruno Senna's Q1 result in the qualifying race No. 354?",
    "gold_sql": "select t1.q1 from qualifying as t1 inner join drivers as t2 on t2.driverid = t1.driverid where t1.raceid = 354 and t2.forename = 'bruno' and t2.surname = 'senna'",
    "pred_sql": "select q1 from qualifying where raceid = 354 and driverid = (select driverid from drivers where forename = 'bruno' and surname = 'senna')",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 185,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "What is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903?",
    "gold_sql": "select t2.number from qualifying as t1 inner join drivers as t2 on t2.driverid = t1.driverid where t1.raceid = 903 and t1.q3 like '1:54%'",
    "pred_sql": "select t2.number from qualifying as t1 join drivers as t2 on t1.driverid = t2.driverid where t1.qualifyid = 903 and t1.position = 3 and t1.q3 = '01:54.000'",
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 186,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",
    "gold_sql": "select count(t3.driverid) from races as t1 inner join results as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t1.year = 2007 and t1.name = 'bahrain grand prix' and t2.time is null",
    "pred_sql": "select count(driverid) as (select driverid from results where raceid = (select raceid from races where name = 'bahrain grand prix' and year = 2007 and statusid is not null",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 187,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "For all the drivers who finished the game in race No. 592, who is the oldest?",
    "gold_sql": "select t1.forename, t1.surname from drivers as t1 inner join results as t2 on t2.driverid = t1.driverid where t2.raceid = 592 and t2.time is not null and t1.dob is not null order by t1.dob asc limit 1",
    "pred_sql": "select min(surname) from drivers where driverid in (select driverid from results where raceid = 592 and position order by raceid = 592 desc limit 1))",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 188,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "Who was the player that got the lap time of 0:01:27 in the race No. 161? Show his introduction website.",
    "gold_sql": "select distinct t2.forename, t2.surname, t2.url from laptimes as t1 inner join drivers as t2 on t2.driverid = t1.driverid where t1.raceid = 161 and t1.time like '1:27%'",
    "pred_sql": "select url from drivers where driverid = (select driverid from laptimes where raceid = 161 and time = '0:01:27')",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 189,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "Where is Malaysian Grand Prix held? Give the location coordinates.",
    "gold_sql": "select distinct t1.lat, t1.lng from circuits as t1 inner join races as t2 on t2.circuitid = t1.circuitid where t2.name = 'malaysian grand prix'",
    "pred_sql": "select location, lat, lng from circuits where name = 'malaysian grand prix'",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 190,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "For the constructor which got the highest point in the race No. 9 , what is its introduction website?",
    "gold_sql": "select t2.url from constructorresults as t1 inner join constructors as t2 on t2.constructorid = t1.constructorid where t1.raceid = 9 order by t1.points desc limit 1",
    "pred_sql": "select url from constructors where constructorid = (select constructorid from constructorresults where raceid = 9 order by points desc limit 1)",
    "ex": true,
    "sm": false,
    "cm": 0.8
  },
  {
    "id": 191,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?",
    "gold_sql": "select t2.code from qualifying as t1 inner join drivers as t2 on t2.driverid = t1.driverid where t1.raceid = 45 and t1.q3 like '1:33%'",
    "pred_sql": "select t2.code from qualifying as t1 join drivers as t2 on t1.driverid = t2.driverid where t1.raceid = 45 and t1.q3 = '0:01:33' limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.5
  },
  {
    "id": 192,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "Show me the season page of year when the race No. 901 took place.",
    "gold_sql": "select t2.url from races as t1 inner join seasons as t2 on t2.year = t1.year where t1.raceid = 901",
    "pred_sql": "select url from races(raceid, year, raceid from races where raceid = 901 limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 193,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "For all the drivers who finished the game in race No. 872, who is the youngest?",
    "gold_sql": "select t1.forename, t1.surname from drivers as t1 inner join results as t2 on t2.driverid = t1.driverid where t2.raceid = 872 and t2.time is not null order by t1.dob desc limit 1",
    "pred_sql": "select min(surname) from drivers where driverid in (select driverid from results where raceid = 872 and position in (1,2,3))",
    "ex": false,
    "sm": false,
    "cm": 0.2
  },
  {
    "id": 194,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "For the driver who set the fastest lap speed, what is his nationality?",
    "gold_sql": "select t1.nationality from drivers as t1 inner join results as t2 on t2.driverid = t1.driverid order by t2.fastestlapspeed desc limit 1",
    "pred_sql": "select nationality from drivers where driverid = (select driverid from results where fastestlapspeed = (select max(fastestlapspeed) from results )))",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 195,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed?",
    "gold_sql": "select (sum(iif(t2.raceid = 853, t2.fastestlapspeed, 0)) - sum(iif(t2.raceid = 854, t2.fastestlapspeed, 0))) * 100 / sum(iif(t2.raceid = 853, t2.fastestlapspeed, 0)) from drivers as t1 inner join results as t2 on t2.driverid = t1.driverid where t1.forename = 'paul' and t1.surname = 'di resta'",
    "pred_sql": "select cast((select fastestlapspeed from results where resultid = (select max(resultid) from results where raceid = (select raceid from results where resultid = (select max(resultid) from results where raceid = (select raceid from results where driverid = (select driverid from drivers where driverref = 'diresta') and number = 853) and statusid = (select min(id) from results where raceid = (select raceid",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 196,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "For the drivers who took part in the race in 1983/7/16, what's their race completion rate?",
    "gold_sql": "select cast(count(case when t2.time is not null then t2.driverid end) as real) * 100 / count(t2.driverid) from races as t1 inner join results as t2 on t2.raceid = t1.raceid where t1.date = '1983-07-16'",
    "pred_sql": "select cast(s.driverid as real) * 100 / count(distinct raceid) from (select raceid, count(distinct case when position in (1, 2, 3) then driverid end ';'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 197,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "List the names of all races that occurred in the earliest recorded year and month.",
    "gold_sql": "select name from races where strftime('%y', date) = ( select strftime('%y', date) from races order by date asc limit 1 ) and strftime('%m', date) = ( select strftime('%m', date) from races order by date asc limit 1 )",
    "pred_sql": "select name from races where year, min(minstr(date,' ') order by date limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 198,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "State the driver with the most points scored. Find his full name with that points.",
    "gold_sql": "select t3.forename, t3.surname, t2.points from races as t1 inner join driverstandings as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid order by t2.points desc limit 1",
    "pred_sql": "select t3.forename , t3.surname from drivers as t3 inner join results on t.driverstandings as t1 on t3.driverid = t1.driverid where t1.points = ( select max(points) from driverstandings )",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 199,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "What is the best lap time recorded? List the driver and race with such recorded lap time.",
    "gold_sql": "select t2.milliseconds, t1.forename, t1.surname, t3.name from drivers as t1 inner join laptimes as t2 on t1.driverid = t2.driverid inner join races as t3 on t2.raceid = t3.raceid order by t2.milliseconds asc limit 1",
    "pred_sql": "select t1.driverid, t1.raceid, min(t1.time) from laptimes as t1 join races as t2 on t1.raceid = t2.raceid where t1.time = (select min(time) from laptimes) group by t1.driverid, t1.raceid",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 200,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "What is the average lap time for Lewis Hamilton in the 2009 Malaysian Grand Prix?",
    "gold_sql": "select avg(t2.milliseconds) from races as t1 inner join laptimes as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t3.forename = 'lewis' and t3.surname = 'hamilton' and t1.year = 2009 and t1.name = 'malaysian grand prix'",
    "pred_sql": "select avg(milliseconds) from laptimes where raceid = (select raceid from races where name = 'malaysian grand prix' and year = 2009) and driverid = (select driverid from drivers where forename = 'lewis' and surname = 'hamilton')",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 201,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010.",
    "gold_sql": "select cast(count(case when t2.position <> 1 then t2.position end) as real) * 100 / count(t2.driverstandingsid) from races as t1 inner join driverstandings as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t3.surname = 'hamilton' and t1.year >= 2010",
    "pred_sql": "select cast(sum(case when t2.position = 1 then 1 else 0 end) as real) * 100 / count(*) from races as t1 inner join results as t2 on t1.raceid = t2.raceid where t2.driverid = (select driverid from drivers where forename = 'lewis' and surname = 'hamilton') and t1.year >= 2010",
    "ex": true,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 202,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "Name the driver with the most winning. Mention his nationality and what is his maximum point scores.",
    "gold_sql": "select t1.forename, t1.surname, t1.nationality, max(t2.points) from drivers as t1 inner join driverstandings as t2 on t2.driverid = t1.driverid where t2.wins >= 1 group by t1.forename, t1.surname, t1.nationality order by count(t2.wins) desc limit 1",
    "pred_sql": "select t3.nationality, max(t1.points) from driverstandings as t1 join drivers as t3 on t1.driverid = t3.driverid where t1.position = 1 group by t3.nationality order by max(t1.points) desc limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 203,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "How old is the youngest Japanese driver? What is his name?",
    "gold_sql": "select strftime('%y', current_timestamp) - strftime('%y', dob), forename , surname from drivers where nationality = 'japanese' order by dob desc limit 1",
    "pred_sql": "select min(dob), surname from drivers where nationality = 'japanese'",
    "ex": false,
    "sm": false,
    "cm": 0.4
  },
  {
    "id": 204,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "Name the races along with its circuit name and location for f1 races hosted in September 2005.",
    "gold_sql": "select distinct t2.name, t1.name, t1.location from circuits as t1 inner join races as t2 on t2.circuitid = t1.circuitid where t2.year = 2005 and strftime('%m', t2.date) = '09'",
    "pred_sql": "select t1.name, t1.location from races as t1 join circuits as t2 on t1.circuitid = t2.circuitid where t1.year = 2005 and month(t1.date) = 9",
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 205,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "Which race was Alex Yoong in when he was in track number less than 20?",
    "gold_sql": "select t1.name from races as t1 inner join driverstandings as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t3.forename = 'alex' and t3.surname = 'yoong' and t2.position < 20",
    "pred_sql": "select t20.driverid, t1.driverid = (select t.raceid from results t where t.driverid = (select d.driverid from drivers d where d.forename = 'alex' and d.surname = 'yoong'))",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 206,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "State the race and year of race in which Michael Schumacher had his fastest lap.",
    "gold_sql": "select t1.name, t1.year from races as t1 inner join laptimes as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t3.forename = 'michael' and t3.surname = 'schumacher' order by t2.milliseconds asc limit 1",
    "pred_sql": "select t2.year from drivers as t1 join results as t2 on t1.driverid = t2.driverid where t1.forename = 'michael' and t1.surname = 'schumacher' and t2.fastestlap = 1",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 207,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "Which was Lewis Hamilton first race? What was his points recorded for his first race event?",
    "gold_sql": "select t1.name, t2.points from races as t1 inner join driverstandings as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t3.forename = 'lewis' and t3.surname = 'hamilton' order by t1.year asc limit 1",
    "pred_sql": "select t2.positiontext from driverstandings as points_for where race.driverid = points_for.driverstandings as t1 join races as t2 on t1.raceid = t2.raceid join drivers as t3 on t1.driverid = t3.driverid where t3.forename = 'lewis' and t3.surname = 'hamilton' order by t2.year asc limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 208,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "Among all European Grand Prix races, what is the percentage of the races were hosted in Germany?",
    "gold_sql": "select cast(count(case when t1.country = 'germany' then t2.circuitid end) as real) * 100 / count(t2.circuitid) from circuits as t1 inner join races as t2 on t2.circuitid = t1.circuitid where t2.name = 'european grand prix'",
    "pred_sql": "select cast(sum(case when t2.country = 'germany' then 1 else 0 end) as real) * 100 / count(*) from races as t1 inner join circuits as t2 on t1.circuitid = t2.circuitid inner join seasons as t3 on t1.year = t3.year where t3.url like '%european grand prix%'",
    "ex": true,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 209,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "What's the location coordinates of Silverstone Circuit?",
    "gold_sql": "select lat, lng from circuits where name = 'silverstone circuit'",
    "pred_sql": "select location, lng, lat from circuits where name = 'silverstone circuit'",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 210,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "What's the reference name of Marina Bay Street Circuit?",
    "gold_sql": "select circuitref from circuits where name = 'marina bay street circuit'",
    "pred_sql": "select circuitref from circuits where name = 'marina bay street circuit'",
    "ex": true,
    "sm": true,
    "cm": 1.0
  },
  {
    "id": 211,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "Which country is the oldest driver from?",
    "gold_sql": "select nationality from drivers where dob is not null order by dob asc limit 1",
    "pred_sql": "select nationality from drivers order by dob limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.8
  },
  {
    "id": 212,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "Which driver ranked the first in the Canadian Grand Prix in 2007? Please give his reference name.",
    "gold_sql": "select t3.forename, t3.surname, t3.driverref from races as t1 inner join results as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t1.name = 'canadian grand prix' and t2.rank = 1 and t1.year = 2007",
    "pred_sql": "select t2.driverref from races as t1 join results as t2 on t1.raceid = t2.raceid where t1.name = 'canadian grand prix' and t1.year = 2007 and t2.position = 1",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 213,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "In which Formula_1 race did Lewis Hamilton rank the highest?",
    "gold_sql": "select name from races where raceid in ( select raceid from results where rank = 1 and driverid = ( select driverid from drivers where forename = 'lewis' and surname = 'hamilton' ) )",
    "pred_sql": "select t2.name from drivers as t1 join results as t2 on t1.driverid = t2.driverid where t1.forename = 'lewis' and t1.surname = 'hamilton' order by t2.position limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.2
  },
  {
    "id": 214,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "What was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix?",
    "gold_sql": "select t2.fastestlapspeed from races as t1 inner join results as t2 on t2.raceid = t1.raceid where t1.name = 'spanish grand prix' and t1.year = 2009 and t2.fastestlapspeed is not null order by t2.fastestlapspeed desc limit 1",
    "pred_sql": "select fastestlapspeed from results where raceid = (select raceid from races where name = 'spanish grand prix 2009') order by fastestlapspeed desc limit 1",
    "ex": true,
    "sm": false,
    "cm": 0.8
  },
  {
    "id": 215,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "What was Lewis Hamilton's final rank in the 2008 Chinese Grand Prix?",
    "gold_sql": "select t2.positionorder from races as t1 inner join results as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t3.forename = 'lewis' and t3.surname = 'hamilton' and t1.name = 'chinese grand prix' and t1.year = 2008",
    "pred_sql": "select t2008 as (select t3 raceid and results r join races as t1raceid0 on t2raceid0 = t1raceid0 join drivers as t3driverid0 on t2driverid0 = t3driverid0 where t1year0 = 2008 and t2raceid0 = (select raceid from races where name0 = 'chinese grand prix') order by t2positionorder0 desc limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 216,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "What's the finish time for the driver who ranked second in 2008's AustChineseralian Grand Prix?",
    "gold_sql": "select t1.time from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t1.rank = 2 and t2.name = 'chinese grand prix' and t2.year = 2008",
    "pred_sql": "select t2.time from results as t1 join races as t3 on t1.raceid = t3.raceid join drivers as t4 on t1.driverid = t4.driverid where t1.position = 2 and t3.name = 'austchineseralian grand prix 2008'",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 217,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "Among the drivers that finished the race in the 2008 Chinese Grand Prix, how many of them have participated in Formula_1 races?",
    "gold_sql": "select count(*) from ( select t1.driverid from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t2.name = 'chinese grand prix' and t2.year = 2008 and t1.time is not null group by t1.driverid having count(t2.raceid) > 0 )",
    "pred_sql": "select count(distinct t2.driverid) from races as t1 join results as t2 on t1.raceid = t2.raceid where t1.name = 'chinese grand prix' and t1.year = 2008 and t2.position is not null",
    "ex": true,
    "sm": false,
    "cm": 0.25
  },
  {
    "id": 218,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix?",
    "gold_sql": "with time_in_seconds as ( select t1.positionorder, case when t1.positionorder = 1 then (cast(substr(t1.time, 1, 1) as real) * 3600) + (cast(substr(t1.time, 3, 2) as real) * 60) + cast(substr(t1.time, 6) as real) else cast(substr(t1.time, 2) as real) end as time_seconds from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t2.name = 'australian grand prix' and t1.time is not null and t2.year = 2008 ), champion_time as ( select time_seconds from time_in_seconds where positionorder = 1), last_driver_incremental as ( select time_seconds from time_in_seconds where positionorder = (select max(positionorder) from time_in_seconds) ) select (cast((select time_seconds from last_driver_incremental) as real) * 100) / (select time_seconds + (select time_seconds from last_driver_incremental) from champion_time)",
    "pred_sql": "select cast((select(select(driverstandings as (select(driverstandingsid = (select max(driverstandingsid)fromdriverstandingswhere raceid = 2008 and driverstandings whereposition=1) driverstandingsid = 2008 and name = 'australian grand prix')) - selectselect as t from(selectaceid = (select min(points) as driverlid = 2008 and name = 'australian grand prix') as tid",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 219,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "How many circuits are there in Adelaide, Australia?",
    "gold_sql": "select count(circuitid) from circuits where location = 'adelaide' and country = 'australia'",
    "pred_sql": "select count(*) from circuits where location = 'adelaide' and country = 'australia'",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 220,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "What are the maximum points of British constructors?",
    "gold_sql": "select max(t1.points) from constructorstandings as t1 inner join constructors as t2 on t1.constructorid = t2.constructorid where t2.nationality = 'british'",
    "pred_sql": "select max(t2.points) from constructors as t1 inner join constructorstandings as t2 on t1.constructorid = t2.constructorid where t1.nationality = 'british'",
    "ex": true,
    "sm": false,
    "cm": 1.0
  },
  {
    "id": 221,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "Please list the constructor names with 0 points at race 291.",
    "gold_sql": "select t2.name from constructorstandings as t1 inner join constructors as t2 on t1.constructorid = t2.constructorid where t1.points = 0 and t1.raceid = 291",
    "pred_sql": "select t2.name from results as t1 join constructors as t2 on t1.constructorid = t2.constructorid where t1.raceid = 291 and t1.points = 0",
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 222,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "How many Japanese constructors have 0 points in 2 races?",
    "gold_sql": "select count(t1.raceid) from constructorstandings as t1 inner join constructors as t2 on t1.constructorid = t2.constructorid where t1.points = 0 and t2.nationality = 'japanese' group by t1.constructorid having count(raceid) = 2",
    "pred_sql": "select count(*) from constructors where nationality = 'japanese' and constructorid in (select constructorid from results where points = 0 and raceid in (select raceid from results where position = 1))",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 223,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "Please calculate the race completion percentage of Japanese drivers from 2007 to 2009.",
    "gold_sql": "select cast(sum(iif(t1.time is not null, 1, 0)) as real) * 100 / count(t1.raceid) from results as t1 inner join races as t2 on t1.raceid = t2.raceid inner join drivers as t3 on t1.driverid = t3.driverid where t3.nationality = 'japanese' and t2.year between 2007 and 2009",
    "pred_sql": "select cast(sum(case when t2.nationality = 'japan' then 1 else 0 end) as real) * 100 / count(*) from races join results as t1 on races.raceid = t1.raceid join drivers as t2 on t1.driverid = t2.driverid where races.year in (2007, 2008, 2009)",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 224,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "What is the average time in seconds of champion for each year, before year 1975?",
    "gold_sql": "with time_in_seconds as ( select t2.year, t2.raceid, t1.positionorder, case when t1.positionorder = 1 then (cast(substr(t1.time, 1, 1) as real) * 3600) + (cast(substr(t1.time, 3, 2) as real) * 60) + cast(substr(t1.time, 6,2) as real ) + cast(substr(t1.time, 9) as real)/1000 else 0 end as time_seconds from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t1.time is not null ), champion_time as ( select year, raceid, time_seconds from time_in_seconds where positionorder = 1 ) select year, avg(time_seconds) from champion_time where year < 1975 group by year having avg(time_seconds) is not null",
    "pred_sql": "select avg_time.year, avg(t_time.time/1000) as average_time from ( select t1 on 199 on from races as year, t2.time as time from seasons as t t1 t9915907 inner join ( select raceid, avg(milliseconds/1000) as time from results where driverid = ( select driverid from driverstandings where position = 1 ) group by raceid ) as t2 on",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 225,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "What is the fastest lap number of the champion in 2009?",
    "gold_sql": "select t1.fastestlap from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t2.year = 2009 and t1.time like '_:%:__.___'",
    "pred_sql": "select t2.position from driverstandings as t1 join(select raceid, min(position) as position from results as t3 where t3.raceid 2009 group by t3.raceid) as t4 on t1.raceid = t4.raceid and t1.position = t4.position order by t1.points desc limit 0, 1",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 226,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "What is the average of fastest lap speed in the 2009 Spanish Grand Prix race?",
    "gold_sql": "select avg(t1.fastestlapspeed) from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t2.year = 2009 and t2.name = 'spanish grand prix'",
    "pred_sql": "select avg(milliseconds) from results where raceid = (select raceid from races where name = 'spanish grand prix'2009') and fastestlapspeed is not null",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 227,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50?",
    "gold_sql": "select cast(sum(iif(strftime('%y', t3.dob) < '1985' and t1.laps > 50, 1, 0)) as real) * 100 / count(*) from results as t1 inner join races as t2 on t1.raceid = t2.raceid inner join drivers as t3 on t1.driverid = t3.driverid where t2.year between 2000 and 2005",
    "pred_sql": "select cast(sum(case when t2.lap > 50 then 1 else 0 end) as real) * 100 / count(t1.driverid) from drivers as t1 inner join laptimes as t2 on t1.driverid = t2.driverid where t1.dob < '1985-01-01' and t1.driverid in (select t3.driverid from drivers as t3 where t3.dob",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 228,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "How many French drivers who obtain the laptime less than 02:00.00?",
    "gold_sql": "select count(t1.driverid) from drivers as t1 inner join laptimes as t2 on t1.driverid = t2.driverid where t1.nationality = 'french' and (cast(substr(t2.time, 1, 2) as integer) * 60 + cast(substr(t2.time, 4, 2) as integer) + cast(substr(t2.time, 7, 2) as real) / 1000) < 120",
    "pred_sql": "select count(driverid from drivers where nationality = 'french' and (select count(*) from laptimes where driverid = drivers.driverid and time)",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 229,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "List out the code for drivers who have nationality in American.",
    "gold_sql": "select code from drivers where nationality = 'american'",
    "pred_sql": "select distinct driverid as ( select driverid from drivers where nationality = 'american'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 230,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?",
    "gold_sql": "select count(*) from ( select t1.nationality from drivers as t1 order by julianday(t1.dob) desc limit 3) as t3 where t3.nationality = 'dutch'",
    "pred_sql": "select driverid from drivers where nationality = 'netherlands' order by dob asc limit 3",
    "ex": false,
    "sm": false,
    "cm": 0.4
  },
  {
    "id": 231,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "Please state the reference name of the oldest German driver.",
    "gold_sql": "select driverref from drivers where nationality = 'german' order by julianday(dob) asc limit 1",
    "pred_sql": "select t2 as (select t3.surnamefrom drivers as t3inner join results as t2on t2.driverid = t2.driveridjoin join constructors as t1on t2.constructorid = t1.constructoridwhere t1",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 232,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "Which drivers who were born in 1971 and has the fastest lap time on the race? Give id and code of these drivers.",
    "gold_sql": "select t2.driverid, t2.code from results as t1 inner join drivers as t2 on t1.driverid = t2.driverid where strftime('%y', t2.dob) = '1971' and t1.fastestlaptime is not null",
    "pred_sql": "select t3.driverid, t3.code from races as fast1 on results on races.raceid = results.raceid join drivers t3 on results.driverid = t3.driverid where t3.dob = '1971-01-01' and results.fastestlap = 1",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 233,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "From race no. 50 to 100, how many finishers have been disqualified?",
    "gold_sql": "select sum(iif(time is not null, 1, 0)) from results where statusid = 2 and raceid < 100 and raceid > 50",
    "pred_sql": "select count(*) from results where raceid between 50 and 100 and statusid = 2",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 234,
    "db_id": "formula_1",
    "difficulty": "simple",
    "question": "How many times the circuits were held in Austria? Please give their location and coordinates.",
    "gold_sql": "select distinct location, lat, lng from circuits where country = 'austria'",
    "pred_sql": "select t1.location, t1.lat, t1.lng from circuits as t1 inner join results as t2 on t1.circuitid = t2.circuitid where t1.country = 'austria'",
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 235,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "On what year did the youngest driver had his first qualifying race? Also state the name, date and time of the race.",
    "gold_sql": "select t3.year, t3.name, t3.date, t3.time from qualifying as t1 inner join drivers as t2 on t1.driverid = t2.driverid inner join races as t3 on t1.raceid = t3.raceid where t1.driverid = ( select driverid from drivers order by dob desc limit 1 ) order by t3.date asc limit 1",
    "pred_sql": "select t2.year, t1.name, r.date, r.time from drivers as3 join races as t3 on t1.raceid = t3.raceid join drivers as t4 on t1.driverid = t4.driverid where t4.dob = (select min(dob) from drivers) order by t1.q1 asc limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.4
  },
  {
    "id": 236,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985.",
    "gold_sql": "select t2.forename, t2.surname from pitstops as t1 inner join drivers as t2 on t1.driverid = t2.driverid where t2.nationality = 'german' and strftime('%y', t2.dob) between '1980' and '1985' group by t2.forename, t2.surname order by avg(t1.duration) limit 3",
    "pred_sql": "select d as (select driverid) / 3 as avgduration from d, t1.pitstops.driverid' and driverid in (select id from pitstops.drivernationality, d2 = 'nationality' and nationality = 'german' and dob between '1980-01-01' and '1985-12-31' group by driverid order by avg(millisecondsid) limit 3 group by driverid",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 237,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "Who is the champion of the Canadian Grand Prix in 2008? Indicate his finish time.",
    "gold_sql": "select t1.time from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t2.name = 'canadian grand prix' and t2.year = 2008 and t1.time like '_:%:__.___'",
    "pred_sql": "select t3.time from races as t1 inner join results as t2 on t1.raceid = t2.raceid inner join drivers as t3 on t2.driverid = t3.driverid where t1.name = 'canadian grand prix' and t1.year = 2008 order by t2.points desc limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.2
  },
  {
    "id": 238,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "What is the constructor reference name of the champion in the 2009 Singapore Grand Prix? Please give its website.",
    "gold_sql": "select t3.constructorref, t3.url from results as t1 inner join races as t2 on t1.raceid = t2.raceid inner join constructors as t3 on t1.constructorid = t3.constructorid where t2.name = 'singapore grand prix' and t2.year = 2009 and t1.time like '_:%:__.___'",
    "pred_sql": "select t2.url from races as t1 join constructorstandings as t3 on t1.raceid = t3.raceid join constructors as t2 on t3.constructorid = t2.constructorid where t1.name = 'singapore grand prix 2009' order by t3.points desc limit 1",
    "ex": true,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 239,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "Please list all the superpowers of 3-D Man.",
    "gold_sql": "select t3.power_name from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id where t1.superhero_name = '3-d man'",
    "pred_sql": "select power_name from superpower where id in (select power_id from hero_power where hero_id = (select id from superhero where superhero_name = '3-d man'))",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 240,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team.",
    "gold_sql": "select sum(t1.points), t2.name, t2.nationality from constructorresults as t1 inner join constructors as t2 on t1.constructorid = t2.constructorid inner join races as t3 on t3.raceid = t1.raceid where t3.name = 'monaco grand prix' and t3.year between 1980 and 2010 group by t2.name order by sum(t1.points) desc limit 1",
    "pred_sql": "select t3.name, t3.nationality, max(t1.points) from races where year between 19 join constructorresults as t1 on t19.raceid = t1.raceid join constructors as t3 on t1.constructorid = t3.constructorid join seasons as t2 and t19.year = t1.year join circuits as t2 on t19.circuitid = t2.circuitid where t2.name = 'monaco' and",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 241,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "What is full name of the racer who ranked 1st in the 3rd qualifying race held in the Marina Bay Street Circuit in 2008?",
    "gold_sql": "select t2.forename, t2.surname from qualifying as t1 inner join drivers as t2 on t1.driverid = t2.driverid inner join races as t3 on t1.raceid = t3.raceid where q3 is not null and t3.year = 2008 and t3.circuitid in ( select circuitid from circuits where name = 'marina bay street circuit' ) order by cast(substr(q3, 1, instr(q3, ':') - 1) as integer) * 60 + cast(substr(q3, instr(q3, ':') + 1, instr(q3, '.') - instr(q3, ':') - 1) as real) + cast(substr(q3, instr(q3, '.') + 1) as real) / 1000 asc limit 1",
    "pred_sql": "select t1 as (select t3.surnamefrom drivers as t3inner join results as t2on t2.driverid = t3.driveridinner join races as t1on t1.raceid = t2.raceidwhere t1.name = 'marina bay street circuit' and t1.year = 2008 and t2.position = 1",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 242,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "As of the present, what is the full name of the youngest racer? Indicate her nationality and the name of the race to which he/she first joined.",
    "gold_sql": "select t1.forename, t1.surname, t1.nationality, t3.name from drivers as t1 inner join driverstandings as t2 on t1.driverid = t2.driverid inner join races as t3 on t2.raceid = t3.raceid order by julianday(t1.dob) desc limit 1",
    "pred_sql": "select t3.forename , t3.surname , t3.nationality , t1.name from races as t1 join driverstandings as t2 on t1.year = t2.raceid join drivers as t3 on t2.driverid = t3.driverid order by t3.dob asc limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.75
  },
  {
    "id": 243,
    "db_id": "formula_1",
    "difficulty": "moderate",
    "question": "How many accidents did the driver who had the highest number accidents in the Canadian Grand Prix have?",
    "gold_sql": "select count(t1.driverid) from results as t1 inner join races as t2 on t1.raceid = t2.raceid inner join status as t3 on t1.statusid = t3.statusid where t3.statusid = 3 and t2.name = 'canadian grand prix' group by t1.driverid order by count(t1.driverid) desc limit 1",
    "pred_sql": "select count(*) from results) as accidents as (select status as status on t1.statusid = status.statusid where t1.positiontext = '2' and t1.raceid = (select raceid from races where name = 'canadian grand prix')",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 244,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "Which top 20 driver created the shortest lap time ever record in a Formula_1 race? Please give them full names.",
    "gold_sql": "with lap_times_in_seconds as (select driverid, (case when substr(time, 1, instr(time, ':') - 1) <> '' then cast(substr(time, 1, instr(time, ':') - 1) as real) * 60 else 0 end + case when substr(time, instr(time, ':') + 1, instr(time, '.') - instr(time, ':') - 1) <> '' then cast(substr(time, instr(time, ':') + 1, instr(time, '.') - instr(time, ':') - 1) as real) else 0 end + case when substr(time, instr(time, '.') + 1) <> '' then cast(substr(time, instr(time, '.') + 1) as real) / 1000 else 0 end) as time_in_seconds from laptimes) select t2.forename, t2.surname, t1.driverid from (select driverid, min(time_in_seconds) as min_time_in_seconds from lap_times_in_seconds group by driverid) as t1 inner join drivers as t2 on t1.driverid = t2.driverid order by t1.min_time_in_seconds asc limit 20",
    "pred_sql": "select t3.forename, d.forename, diverstandingst as t1 join drivers as t2 on t1.driverid join driverstandings on drivers.driverstd.position = 1 order by t1.position 2 order 20 order by t1.milliseconds asc limit 20",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 245,
    "db_id": "formula_1",
    "difficulty": "challenging",
    "question": "Please list the lap records for the circuits in Italy.",
    "gold_sql": "with fastest_lap_times as (select t1.raceid, t1.fastestlaptime, (cast(substr(t1.fastestlaptime, 1, instr(t1.fastestlaptime, ':') - 1) as real) * 60) + (cast(substr(t1.fastestlaptime, instr(t1.fastestlaptime, ':') + 1, instr(t1.fastestlaptime, '.') - instr(t1.fastestlaptime, ':') - 1) as real)) + (cast(substr(t1.fastestlaptime, instr(t1.fastestlaptime, '.') + 1) as real) / 1000) as time_in_seconds from results as t1 where t1.fastestlaptime is not null ) select t1.fastestlaptime as lap_record from results as t1 inner join races as t2 on t1.raceid = t2.raceid inner join circuits as t3 on t2.circuitid = t3.circuitid inner join (select min(fastest_lap_times.time_in_seconds) as min_time_in_seconds from fastest_lap_times inner join races as t2 on fastest_lap_times.raceid = t2.raceid inner join circuits as t3 on t2.circuitid = t3.circuitid where t3.country = 'italy' ) as t4 on (cast(substr(t1.fastestlaptime, 1, instr(t1.fastestlaptime, ':') - 1) as real) * 60) + (cast(substr(t1.fastestlaptime, instr(t1.fastestlaptime, ':') + 1, instr(t1.fastestlaptime, '.') - instr(t1.fastestlaptime, ':') - 1) as real)) + (cast(substr(t1.fastestlaptime, instr(t1.fastestlaptime, '.') + 1) as real) / 1000) = t4.min_time_in_seconds limit 1",
    "pred_sql": "select t1.circuitid, t1.name, t3 races, races where l_c.circuitid, circuits.raceid from laptimes'italy'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 246,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Among the superheroes with the super power of \"Super Strength\", how many of them have a height of over 200cm?",
    "gold_sql": "select count(t1.id) from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id where t3.power_name = 'super strength' and t1.height_cm > 200",
    "pred_sql": "select count(*) from superhero as t1 inner join hero_power sp on s.hero_id power_id on t1_id.hero_id = t2_id_id_id.hero_id inner superpower as t3_id_id_id on t2_id_id_id.power_id = t3_id_id_id.id inner(hero_id)",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 247,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Among the superheroes with blue eyes, how many of them have the super power of \"Agility\"?",
    "gold_sql": "select count(t1.id) from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id inner join colour as t4 on t1.eye_colour_id = t4.id where t3.power_name = 'agility' and t4.colour = 'blue'",
    "pred_sql": "select count(*) from superhero as s hero_attribute as ha join hero_power as hp on s.id and c.colour_id where ha.eye_colour_id = (select id from colour where colour = 'blue') and hp.power_id = (select id from superpower where power_name = 'agility')",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 248,
    "db_id": "superhero",
    "difficulty": "challenging",
    "question": "Please list the superhero names of all the superheroes that have blue eyes and blond hair.",
    "gold_sql": "select t1.superhero_name from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id inner join colour as t3 on t1.hair_colour_id = t3.id where t2.colour = 'blue' and t3.colour = 'blond'",
    "pred_sql": "select superhero_name from superhero where eye_colour_id = (select id from colour where colour = 'blu') and hair_colour_id = (select id from colour where colour = 'blond')",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 249,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Rank heroes published by Marvel Comics by their height in descending order.",
    "gold_sql": "select superhero_name, height_cm, rank() over (order by height_cm desc) as heightrank from superhero inner join publisher on superhero.publisher_id = publisher.id where publisher.publisher_name = 'marvel comics'",
    "pred_sql": "select superhero_name, height_cm order by height_cm desc",
    "ex": false,
    "sm": false,
    "cm": 0.25
  },
  {
    "id": 250,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.",
    "gold_sql": "select colour.colour as eyecolor, count(superhero.id) as count, rank() over (order by count(superhero.id) desc) as popularityrank from superhero inner join colour on superhero.eye_colour_id = colour.id inner join publisher on superhero.publisher_id = publisher.id where publisher.publisher_name = 'marvel comics' group by colour.colour",
    "pred_sql": "select colour.colour, count(*) as count) select eye_colour_id, count(hero_id as c.colour join superhero on count.colour.id = superhero.eye_colour_id join colour on count.colour.id = colour.id where superhero.publisher_id = 13 group by colour.colour order by eye_color_popularity desc",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 251,
    "db_id": "superhero",
    "difficulty": "challenging",
    "question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "gold_sql": "select superhero_name from superhero as t1 where exists (select 1 from hero_power as t2 inner join superpower as t3 on t2.power_id = t3.id where t3.power_name = 'super strength' and t1.id = t2.hero_id)and exists (select 1 from publisher as t4 where t4.publisher_name = 'marvel comics' and t1.publisher_id = t4.id)",
    "pred_sql": "select superhero_name from superhero where publisher_id = (select id from publisher where publisher_name = 'marvel comics') and id in (select hero_id from hero_power where power_id = (select id from superpower where power_name = 'super strength'))",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 252,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Which publisher published the slowest superhero?",
    "gold_sql": "select t2.publisher_name from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id inner join hero_attribute as t3 on t1.id = t3.hero_id inner join attribute as t4 on t3.attribute_id = t4.id where t4.attribute_name = 'speed' order by t3.attribute_value limit 1",
    "pred_sql": "select publisher_name from publisher where id = (select publisher_id from superhero order by height_cm asc limit 1);",
    "ex": false,
    "sm": false,
    "cm": 0.4
  },
  {
    "id": 253,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "How many gold-eyed superheroes did Marvel Comics publish?",
    "gold_sql": "select count(t1.id) from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id inner join colour as t3 on t1.eye_colour_id = t3.id where t2.publisher_name = 'marvel comics' and t3.colour = 'gold'",
    "pred_sql": "select count(*) from superhero where eye_colour_id = (select id from colour where colour = 'gold') and publisher_id = (select id from publisher where publisher_name = 'marvel comics')",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 254,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Who is the dumbest superhero?",
    "gold_sql": "select t1.superhero_name from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id inner join attribute as t3 on t2.attribute_id = t3.id where t3.attribute_name = 'intelligence' order by t2.attribute_value limit 1",
    "pred_sql": "select superhero_name from superhero where attribute_value in (select attribute_value from hero_attribute where attribute_id = (select id from attribute where attribute_name = 'dumb')) order by attribute_value limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.8
  },
  {
    "id": 255,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "What is Copycat's race?",
    "gold_sql": "select t2.race from superhero as t1 inner join race as t2 on t1.race_id = t2.id where t1.superhero_name = 'copycat'",
    "pred_sql": "select race_id from superhero where from superhero where superhero_name = 'copycat'hero_name' = 'copycat') limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 256,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "Which superheroes have a durability attribute value of less than 50?",
    "gold_sql": "select superhero_name from superhero as t1 where exists (select 1 from hero_attribute as t2 inner join attribute as t3 on t2.attribute_id = t3.id where t3.attribute_name = 'durability' and t2.attribute_value < 50 and t1.id = t2.hero_id)",
    "pred_sql": "select superhero_name from superhero where skin_colour_id in (select id from colour where colour = 'no colour') and alignment_id in (select id from alignment where alignment = 'bad')",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 257,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "What are the names of the superheroes with the power of death touch?",
    "gold_sql": "select t1.superhero_name from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id where t3.power_name = 'death touch'",
    "pred_sql": "select superhero_name from superhero where id in (select hero_id from hero_power where power_id = (select id from superpower where power_name like 'superhero%death touch'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 258,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "How many female superheroes have a strength value of 100?",
    "gold_sql": "select count(t1.id) from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id inner join attribute as t3 on t2.attribute_id = t3.id inner join gender as t4 on t1.gender_id = t4.id where t3.attribute_name = 'strength' and t2.attribute_value = 100 and t4.gender = 'female'",
    "pred_sql": "select count(*) from superhero as s join hero_attribute as ha on s.id = ha.hero_id where ha.attribute_id = 2 and ha.attribute_value = 100 and s.gender_id = 2",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 259,
    "db_id": "superhero",
    "difficulty": "challenging",
    "question": "What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics.",
    "gold_sql": "select (cast(count(*) as real) * 100 / (select count(*) from superhero)), cast(sum(case when t2.publisher_name = 'marvel comics' then 1 else 0 end) as real) from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id inner join alignment as t3 on t3.id = t1.alignment_id where t3.alignment = 'bad'",
    "pred_sql": "select cast(sum(case when t.alignment_id = 1 then 1 else 0 end) as real) * 100 / count(*) as percentage, count(*) as total from superhero as t join publisher as p on t.publisher_id = p.id where t.alignment_id = 1 and p.publisher_name = 'marvel comics'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 260,
    "db_id": "superhero",
    "difficulty": "challenging",
    "question": "Between DC and Marvel Comics, which publisher has published more superheroes? Find the difference in the number of superheroes they have published.",
    "gold_sql": "select sum(case when t2.publisher_name = 'marvel comics' then 1 else 0 end) - sum(case when t2.publisher_name = 'dc comics' then 1 else 0 end) from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id",
    "pred_sql": "select sum(case when t1.publisher_id = 13 then 1 else 0 end) - sum(case when t1.publisher_id = 1 then 1 else 0 end) as difference from superhero as t1 join publisher as t2 on t1.publisher_id = t2.id",
    "ex": false,
    "sm": false,
    "cm": 0.5
  },
  {
    "id": 261,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "Give the publisher ID of Star Trek.",
    "gold_sql": "select id from publisher where publisher_name = 'star trek'",
    "pred_sql": "select id from publisher where publisher_name = 'star trek' limit 1",
    "ex": true,
    "sm": false,
    "cm": 0.75
  },
  {
    "id": 262,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "What is the total number of superheroes without full name?",
    "gold_sql": "select count(id) from superhero where full_name is null",
    "pred_sql": "select count(id) from superhero where full_name is null",
    "ex": true,
    "sm": true,
    "cm": 1.0
  },
  {
    "id": 263,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "What is the average weight of all female superheroes?",
    "gold_sql": "select avg(t1.weight_kg) from superhero as t1 inner join gender as t2 on t1.gender_id = t2.id where t2.gender = 'female'",
    "pred_sql": "select avg(weight_kg) from superhero where gender_id = 2",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 264,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "List down at least five superpowers of male superheroes.",
    "gold_sql": "select t3.power_name from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t3.id = t2.power_id inner join gender as t4 on t4.id = t1.gender_id where t4.gender = 'male' limit 5",
    "pred_sql": "select t3.power_name from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id inner join gender as t4 on t1.gender_id = t4.id where t4.gender = 'male' limit 5",
    "ex": true,
    "sm": false,
    "cm": 1.0
  },
  {
    "id": 265,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Among the superheroes with height from 170 to 190, list the names of the superheroes with no eye color.",
    "gold_sql": "select distinct t1.superhero_name from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id where t1.height_cm between 170 and 190 and t2.colour = 'no colour'",
    "pred_sql": "select superhero_name from superhero where height_cm between 170 and 190 and eye_colour_id is null",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 266,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Provide the hair colour of the human superhero who is 185 cm tall.",
    "gold_sql": "select distinct t3.colour from superhero as t1 inner join race as t2 on t1.race_id = t2.id inner join colour as t3 on t1.hair_colour_id = t3.id where t1.height_cm = 185 and t2.race = 'human'",
    "pred_sql": "select t3.colour from superhero as t1 inner join gender as t2 on t1.gender_id = t2.id inner join colour as t3 on t1.hair_colour_id = t3.id where t1.height_cm = 185 and t2.gender = 'male'",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 267,
    "db_id": "superhero",
    "difficulty": "challenging",
    "question": "In superheroes with height between 150 to 180, what is the percentage of heroes published by Marvel Comics?",
    "gold_sql": "select cast(count(case when t2.publisher_name = 'marvel comics' then 1 else null end) as real) * 100 / count(t1.id) from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id where t1.height_cm between 150 and 180",
    "pred_sql": "select cast(sum(case when t3.publisher_name = 'marvel comics' then 1 else 0 end) as real) * 100 / count(*) from superhero as t1 inner join publisher as t3 on t1.publisher_id = t3.id where t1.height_cm between 150 and 180",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 268,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Among the male superheroes, list the super hero names of superheroes with weight greater than the 79% average weight of all superheroes.",
    "gold_sql": "select t1.superhero_name from superhero as t1 inner join gender as t2 on t1.gender_id = t2.id where t2.gender = 'male' and t1.weight_kg * 100 > ( select avg(weight_kg) from superhero ) * 79",
    "pred_sql": "select superhero_name from superhero where gender_id = 1 and weight_kg > (select percentile_cont(0.79) within group (order by weight_kg) from superhero) and id in (select hero_id from hero_power where power_id in (select id from superpower));",
    "ex": false,
    "sm": false,
    "cm": 0.25
  },
  {
    "id": 269,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "What are the superpowers of heroes with ID 1?",
    "gold_sql": "select distinct t2.power_name from hero_power as t1 inner join superpower as t2 on t1.power_id = t2.id where t1.hero_id = 1",
    "pred_sql": "select t3.power_name from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id where t1.id = 1",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 270,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "How many heroes have stealth power?",
    "gold_sql": "select count(t1.hero_id) from hero_power as t1 inner join superpower as t2 on t1.power_id = t2.id where t2.power_name = 'stealth'",
    "pred_sql": "select count(distinct h.id) from superhero h join hero_power hp on h.id = hp.hero_id join superpower sp on hp.power_id = sp.id where sp.power_name = 'stealth'",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 271,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "What is the hero's full name with the highest attribute in strength?",
    "gold_sql": "select t1.full_name from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id inner join attribute as t3 on t2.attribute_id = t3.id where t3.attribute_name = 'strength' order by t2.attribute_value desc limit 1",
    "pred_sql": "select superhero.full_name from superhero join hero_attribute on superhero.id = hero_attribute.hero_id join attribute on hero_attribute.attribute_id = attribute.id where attribute.attribute_name = 'strength' order by attribute_value desc limit 1",
    "ex": true,
    "sm": false,
    "cm": 1.0
  },
  {
    "id": 272,
    "db_id": "superhero",
    "difficulty": "challenging",
    "question": "Which superhero has the most durability published by Dark Horse Comics?",
    "gold_sql": "select t1.superhero_name from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id inner join attribute as t3 on t3.id = t2.attribute_id inner join publisher as t4 on t4.id = t1.publisher_id where t4.publisher_name = 'dark horse comics' and t3.attribute_name = 'durability' order by t2.attribute_value desc limit 1",
    "pred_sql": "select superhero_name from superhero where publisher_id = (select id from publisher where publisher_name = 'dark horse comics') order by weight_kg desc limit 1",
    "ex": true,
    "sm": false,
    "cm": 0.4
  },
  {
    "id": 273,
    "db_id": "superhero",
    "difficulty": "challenging",
    "question": "List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics.",
    "gold_sql": "select t1.eye_colour_id, t1.hair_colour_id, t1.skin_colour_id from superhero as t1 inner join publisher as t2 on t2.id = t1.publisher_id inner join gender as t3 on t3.id = t1.gender_id where t2.publisher_name = 'dark horse comics' and t3.gender = 'female'",
    "pred_sql": "select t3.colour as eye_colour, t4.colour as hair_colour, t5.colour as skin_colour from superhero as t1 inner join gender as t2 on t1.gender_id = t2.id inner join colour as t3 on t1.eye_colour_id = t3.id inner join colour as t4 on t1.hair_colour_id = t4.id inner join colour as t5 on t1.skin_colour_id = t5.id inner join publisher as t6 on",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 274,
    "db_id": "superhero",
    "difficulty": "challenging",
    "question": "Which superhero has the same eyes, hair and skin colour? Indicate the publisher of the superhero.",
    "gold_sql": "select t1.superhero_name, t2.publisher_name from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id where t1.eye_colour_id = t1.hair_colour_id and t1.eye_colour_id = t1.skin_colour_id",
    "pred_sql": "select t1.publisher_name from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id inner join colour as t3 on t1.hair_colour_id = t3.id inner join colour as t4 on t1.skin_colour_id = t4.id where s1eye_colour_id having count(distinct t1.publisher_id) = 1",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 275,
    "db_id": "superhero",
    "difficulty": "challenging",
    "question": "What is the percentage of blue female superheroes among all female superheroes?",
    "gold_sql": "select cast(count(case when t3.colour = 'blue' then t1.id else null end) as real) * 100 / count(t1.id) from superhero as t1 inner join gender as t2 on t1.gender_id = t2.id inner join colour as t3 on t1.skin_colour_id = t3.id where t2.gender = 'female'",
    "pred_sql": "select cast(count(case when t2.colour = 'blue' then 1 else null end) as real) * 100 / count(t1.id in (select superhero_id join gender as g on superhero.gender_id = g.id join colour as c on superhero.hair_colour_id = c.id where g.gender = 'female' and c.colour = 'blue'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 276,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "How many powers does Amazo hero have?",
    "gold_sql": "select count(t1.power_id) from hero_power as t1 inner join superhero as t2 on t1.hero_id = t2.id where t2.superhero_name = 'amazo'",
    "pred_sql": "select count(*) from hero_power where hero_id = ( select count(distinct power_id) hair_colour_id = (select id from colour where colour = 'auburn')",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 277,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "Provide the heights of the heroes whose eye colours are amber.",
    "gold_sql": "select t1.height_cm from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id where t2.colour = 'amber'",
    "pred_sql": "select t3.height_cm from colour as t1 inner join superhero as t2 on t1.id = t2.eye_colour_id inner join alignment as t3 on t2.alignment_id = t3.id where t1.colour = 'amber'",
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 278,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "List the heroes' names whose eyes and hair colours are both black.",
    "gold_sql": "select t1.superhero_name from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id and t1.hair_colour_id = t2.id where t2.colour = 'black'",
    "pred_sql": "select superhero_name from superhero where eye_colour_id = (select id from colour where colour = 'black') and hair_colour_id = (select id from colour where colour = 'black')",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 279,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "Describe the names of neutral alignment superheroes.",
    "gold_sql": "select t1.superhero_name from superhero as t1 inner join alignment as t2 on t1.alignment_id = t2.id where t2.alignment = 'neutral'",
    "pred_sql": "select superhero_name from superhero where alignment_id = (select id from alignment where alignment = 'neutral')",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 280,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "How many heroes have the highest attribute value in strength?",
    "gold_sql": "select count(t1.hero_id) from hero_attribute as t1 inner join attribute as t2 on t1.attribute_id = t2.id where t2.attribute_name = 'strength' and t1.attribute_value = ( select max(attribute_value) from hero_attribute )",
    "pred_sql": "select count(distinct hero_id) from hero_attribute where attribute_id = (select id from attribute where attribute_name = 'strength') group by t1.id having max(at.attribute_value) = a_id group by h_id",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 281,
    "db_id": "superhero",
    "difficulty": "challenging",
    "question": "How many percent of female heroes were published by Marvel Comics?",
    "gold_sql": "select cast(count(case when t3.gender = 'female' and t2.publisher_name = 'marvel comics' then 1 else null end) as real) / count(case when t2.publisher_name = 'marvel comics' then 1 else null end) * 100 from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id inner join gender as t3 on t1.gender_id = t3.id",
    "pred_sql": "select cast(sum(case when t2.gender = 'female' then 1 else 0 end) as real) * 100 / count(t1.id) from superhero as t1 inner join gender as t2 on t1.gender_id = t2.id inner join publisher as t3 on t1.publisher_id = t3.id where t3.publisher_name = 'marvel comics'",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 282,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Calculate the difference between Emil Blonsky's weight and Charles Chandler's weight.",
    "gold_sql": "select ( select weight_kg from superhero where full_name like 'emil blonsky' ) - ( select weight_kg from superhero where full_name like 'charles chandler' ) as calculate",
    "pred_sql": "select (t1.weight_kg - t2.weight_kg) as weight_difference from superhero as t1 inner join superhero as t2 on t1.superhero_name = 'emil blonsky' and t2.superhero_name = 'charles chandler'",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 283,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "Calculate the average height for all superhero.",
    "gold_sql": "select cast(sum(height_cm) as real) / count(id) from superhero",
    "pred_sql": "select avg(height_cm) from superhero",
    "ex": false,
    "sm": false,
    "cm": 0.5
  },
  {
    "id": 284,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "What is Abomination's superpower?",
    "gold_sql": "select t3.power_name from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id where t1.superhero_name = 'abomination'",
    "pred_sql": "select t1.power_name from superpower as t1 join hero_power as t2 on t1.id = t2.power_id join superhero as t3 on t2.hero_id = t3.id where t3.superhero_name = 'abomination'",
    "ex": true,
    "sm": false,
    "cm": 1.0
  },
  {
    "id": 285,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Which hero was the fastest?",
    "gold_sql": "select t1.superhero_name from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id inner join attribute as t3 on t2.attribute_id = t3.id where t3.attribute_name = 'speed' order by t2.attribute_value desc limit 1",
    "pred_sql": "select superhero_name from superhero where race_id = (select id from race where race = 'alpha",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 286,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "State all of 3-D Man's attributes along with their values.",
    "gold_sql": "select t3.attribute_name, t2.attribute_value from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id inner join attribute as t3 on t2.attribute_id = t3.id where t1.superhero_name = '3-d man'",
    "pred_sql": "select t1.superhero_name,tv.hero_id as hero_id, t2.attribute_value as attribute_value from hero_attribute as t join attribute as t2 on t.attribute_id = t2.id join hero_attribute as t3 on t.hero_id = t3.hero_id where t.hero_id = (select id from superhero where superhero_name = '3-d man') order by t.attribute_id",
    "ex": false,
    "sm": false,
    "cm": 0.25
  },
  {
    "id": 287,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Which superheroes have blue eyes with brown hair?",
    "gold_sql": "select t1.superhero_name from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id inner join colour as t3 on t1.hair_colour_id = t3.id where t2.colour = 'blue' and t3.colour = 'brown'",
    "pred_sql": "select superhero_name from superhero where eye_colour_id = (select id from colour where colour = 'blue') and hair_colour_id = (select id from colour where colour = 'brown')",
    "ex": true,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 288,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "What is the publisher for Hawkman, Karate Kid and Speedy?",
    "gold_sql": "select t2.publisher_name from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id where t1.superhero_name in ('hawkman', 'karate kid', 'speedy')",
    "pred_sql": "select t3.publisher_name from superhero as t1 inner join publisher as t3 on t1.publisher_id = t3.id inner join race = 'hawkman' or t1.superhero_name = 'karate kid' or t1.superhero_name = 'speedy'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 289,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Calculate the percentage of superheroes with blue eyes.",
    "gold_sql": "select cast(count(case when t2.colour = 'blue' then 1 else null end) as real) * 100 / count(t1.id) from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id",
    "pred_sql": "select cast(sum(case when t2.colour = 'blue' then 1 else 0 end) as real) * 100 / count(*) from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id",
    "ex": true,
    "sm": false,
    "cm": 0.5
  },
  {
    "id": 290,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Find the ratio between male superheroes and female superheroes.",
    "gold_sql": "select cast(count(case when t2.gender = 'male' then t1.id else null end) as real) / count(case when t2.gender = 'female' then t1.id else null end) from superhero as t1 inner join gender as t2 on t1.gender_id = t2.id",
    "pred_sql": "select cast(sum(case when t2.gender = 'male' then 1 else 0 end) as real) / sum(case when t2.gender = 'female' then 1 else 0 end) from superhero as t1 inner join gender as t2 on t1.gender_id = t2.id",
    "ex": true,
    "sm": false,
    "cm": 0.5
  },
  {
    "id": 291,
    "db_id": "superhero",
    "difficulty": "simple",
    "question": "Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.",
    "gold_sql": "select t2.colour from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id where t1.full_name = 'karen beecher-duncan'",
    "pred_sql": "select t1.eye_colour_id from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id where t1.full_name = 'karen beecher-duncan';",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 292,
    "db_id": "superhero",
    "difficulty": "challenging",
    "question": "In superheroes with missing weight data, calculate the difference between the number of superheroes with blue eyes and no eye color.",
    "gold_sql": "select sum(case when t2.id = 7 then 1 else 0 end) - sum(case when t2.id = 1 then 1 else 0 end) from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id where t1.weight_kg = 0 or t1.weight_kg is null",
    "pred_sql": "select sum(case when t2.colour = 'blue' then 1 else 0 end) - sum(case when t2.colour is null then 1 else 0 end) as difference as t1 join (select * from alignment, hero_id is null limit 1",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 293,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "How many green-skinned villains are there in the superhero universe?",
    "gold_sql": "select count(t1.id) from superhero as t1 inner join alignment as t2 on t1.alignment_id = t2.id inner join colour as t3 on t1.skin_colour_id = t3.id where t2.alignment = 'bad' and t3.colour = 'green'",
    "pred_sql": "select count(*) from superhero where skin_colour_id = (select id from colour where colour = 'green') and alignment_id = (select id from alignment where alignment = 'bad')",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 294,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Identify superheroes who can control wind and list their names in alphabetical order.",
    "gold_sql": "select t1.superhero_name from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id where t3.power_name = 'wind control' order by t1.superhero_name",
    "pred_sql": "select superhero_name from superhero where id in (select hero_id from hero_power where power_id = (select id from superpower where power_name like 'wind control') order by superhero_name asc);",
    "ex": false,
    "sm": false,
    "cm": 0.75
  },
  {
    "id": 295,
    "db_id": "superhero",
    "difficulty": "moderate",
    "question": "Identify the gender of the superhero who has the ability of Phoenix Force.",
    "gold_sql": "select t4.gender from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id inner join gender as t4 on t1.gender_id = t4.id where t3.power_name = 'phoenix force'",
    "pred_sql": "select t1.gender from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id where t3.power_name = 'phoenix force'",
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 296,
    "db_id": "superhero",
    "difficulty": "challenging",
    "question": "Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes.",
    "gold_sql": "select sum(case when t2.publisher_name = 'dc comics' then 1 else 0 end) - sum(case when t2.publisher_name = 'marvel comics' then 1 else 0 end) from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id",
    "pred_sql": "select sum(case when t2.publisher_name = 'dc' then 1 else 0 end) - sum(case when t2.publisher_name = 'marvel comics' then 1 else 0 end) as difference from superhero as t1 join publisher as t2 on t1.publisher_id = t2.id",
    "ex": true,
    "sm": false,
    "cm": 0.5
  },
  {
    "id": 297,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "Which user has a higher reputation, Harlan or Jarrod Dixon?",
    "gold_sql": "select displayname from users where displayname in ('harlan', 'jarrod dixon') and reputation = ( select max(reputation) from users where displayname in ('harlan', 'jarrod dixon') )",
    "pred_sql": "select displayname from users where displayname in ('harlan', 'jarrod dixon') order by reputation desc limit 1",
    "ex": true,
    "sm": false,
    "cm": 0.4
  },
  {
    "id": 298,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "Please list the display names of all the users whose accounts were created in the year 2011.",
    "gold_sql": "select displayname from users where strftime('%y', creationdate) = '2011'",
    "pred_sql": "select displayname from users where year(creationdate) = 2011",
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 299,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "How many users last accessed the website after 2014/9/1?",
    "gold_sql": "select count(id) from users where date(lastaccessdate) > '2014-09-01'",
    "pred_sql": "select count(*) from users where lastaccessdate > '2014-09-01' ';'",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 300,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "Who is the owner of the post \"Eliciting priors from experts\"?",
    "gold_sql": "select t2.displayname from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t1.title = 'eliciting priors from experts'",
    "pred_sql": "select owneruserid from posts where title = 'eliciting priors from experts'",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 301,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "How many posts does the user csgillespie own?",
    "gold_sql": "select count(t1.id) from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t2.displayname = 'csgillespie'",
    "pred_sql": "select count(*) from posts where owneruserid = (select id from users where displayname = 'csgillespie')",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 302,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
    "gold_sql": "select t2.displayname from posts as t1 inner join users as t2 on t1.lasteditoruserid = t2.id where t1.title = 'examples for teaching: correlation does not mean causation'",
    "pred_sql": "select t2.displayname from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t1.title = 'examples for teaching: correlation does not mean causation' order by t1.lasteditordisplayname'",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 303,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "Among the posts owned by an elder user, how many of them have a score of over 19?",
    "gold_sql": "select count(t1.id) from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t1.score >= 20 and t2.age > 65",
    "pred_sql": "select count(*) from posts where owneruserid in (select id from users where age > 30) and score > 19",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 304,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "From which post is the tag \"bayesian\" excerpted from? Please give the body of the post.",
    "gold_sql": "select t2.body from tags as t1 inner join posts as t2 on t2.id = t1.excerptpostid where t1.tagname = 'bayesian'",
    "pred_sql": "select t1.body from posts as t1 join tags as t2 on t1.id = t2.excerptpostid where t2.tagname = 'bayesian'",
    "ex": true,
    "sm": false,
    "cm": 1.0
  },
  {
    "id": 305,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "What is the average score of the posts owned by the user csgillespie?",
    "gold_sql": "select avg(t1.score) from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t2.displayname = 'csgillespie'",
    "pred_sql": "select avg(t1.score) from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t2.displayname = 'csgillespie'",
    "ex": true,
    "sm": true,
    "cm": 1.0
  },
  {
    "id": 306,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "Among the posts with a score of over 5, what is the percentage of them being owned by an elder user?",
    "gold_sql": "select cast(sum(iif(t2.age > 65, 1, 0)) as real) * 100 / count(t1.id) from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t1.score > 5",
    "pred_sql": "select cast(sum(case when u.age > 30 then 1 else 0 end) as real) * 100 / count(*) from posts p join users u on p.owneruserid = u.id where p.score > 5",
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 307,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "User No.3025 gave a comment at 20:29:39 on 2014/4/23 to a post, how many favorite counts did that post get?",
    "gold_sql": "select t1.favoritecount from posts as t1 inner join comments as t2 on t1.id = t2.postid where t2.creationdate = '2014-04-23 20:29:39.0' and t2.userid = 3025",
    "pred_sql": "select favoritecount from posts where id = (select postid from comments where userid = 3025 and creationdate = '2014-04-23 20:29:39')",
    "ex": false,
    "sm": false,
    "cm": 0.6666666666666666
  },
  {
    "id": 308,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "User No.23853 gave a comment to a post at 9:08:18 on 2013/7/12, was that post well-finished?",
    "gold_sql": "select iif(t2.closeddate is null, 'not well-finished', 'well-finished') as resylt from comments as t1 inner join posts as t2 on t1.postid = t2.id where t1.userid = 23853 and t1.creationdate = '2013-07-12 09:08:18.0'",
    "pred_sql": "select count(*) from comments where t.posts t3 userid = 23853 and creationdate = '2013-07-12 09:08:18' and postid in (select id from posts where owneruserid = (select max(lastactivitydate) from posts)) then 'yes' else 'no' end as ispostwellfinished from comments where userid = 23853 and creationdate = '20",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 309,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "For the user with the display name of \"Tiago Pasqualini\", how many posts did he/she own?",
    "gold_sql": "select count(t1.id) from users as t1 inner join posts as t2 on t1.id = t2.owneruserid where t1.displayname = 'tiago pasqualini'",
    "pred_sql": "select count(*) from posts where owneruserid = (select id from users where displayname = 'tiago pasqualini')",
    "ex": true,
    "sm": false,
    "cm": 0.3333333333333333
  },
  {
    "id": 310,
    "db_id": "codebase_community",
    "difficulty": "simple",
    "question": "Provide the display name of the user who made the vote No.6347.",
    "gold_sql": "select t1.displayname from users as t1 inner join votes as t2 on t1.id = t2.userid where t2.id = 6347",
    "pred_sql": "select distinct_user.displayname from votes asid = 63 = userid1)",
    "ex": false,
    "sm": false,
    "cm": 0.0
  },
  {
    "id": 311,
    "db_id": "codebase_community",
    "difficulty": "moderate",
    "question": "For the user No.24, how many times is the number of his/her posts compared to his/her votes?",
    "gold_sql": "select cast(count(distinct t2.id) as real) / count(distinct t1.id) from votes as t1 inner join posts as t2 on t1.userid = t2.owneruserid where t1.userid = 24",
    "pred_sql": "select cast(count(*) as real) * 100 / (select count(*) from votes where userid = 24) from posts where owneruserid = 24",
    "ex": false,
    "sm": false,
    "cm": 0.3333333333333333
  }
]